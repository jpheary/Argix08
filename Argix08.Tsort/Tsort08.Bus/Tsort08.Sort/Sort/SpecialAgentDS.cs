//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Sort {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SpecialAgentDS : DataSet {
        
        private SpecialAgentTableDataTable tableSpecialAgentTable;
        
        public SpecialAgentDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SpecialAgentDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SpecialAgentTable"] != null)) {
                    this.Tables.Add(new SpecialAgentTableDataTable(ds.Tables["SpecialAgentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpecialAgentTableDataTable SpecialAgentTable {
            get {
                return this.tableSpecialAgentTable;
            }
        }
        
        public override DataSet Clone() {
            SpecialAgentDS cln = ((SpecialAgentDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SpecialAgentTable"] != null)) {
                this.Tables.Add(new SpecialAgentTableDataTable(ds.Tables["SpecialAgentTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSpecialAgentTable = ((SpecialAgentTableDataTable)(this.Tables["SpecialAgentTable"]));
            if ((this.tableSpecialAgentTable != null)) {
                this.tableSpecialAgentTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "SpecialAgentDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SpecialAgentDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSpecialAgentTable = new SpecialAgentTableDataTable();
            this.Tables.Add(this.tableSpecialAgentTable);
        }
        
        private bool ShouldSerializeSpecialAgentTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SpecialAgentTableRowChangeEventHandler(object sender, SpecialAgentTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpecialAgentTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnCLIENT_NUMBER;
            
            private DataColumn columnCLIENT_DIVISION;
            
            private DataColumn columnLOCATION;
            
            private DataColumn columnACCOUNT_NUMBER;
            
            private DataColumn columnSAN_ID;
            
            private DataColumn columnZONE_CODE;
            
            private DataColumn columnIS_RECORD;
            
            private DataColumn columnTITLE;
            
            private DataColumn columnINSTRUCTIONS;
            
            private DataColumn columnINDICATOR;
            
            private DataColumn columnICON;
            
            internal SpecialAgentTableDataTable() : 
                    base("SpecialAgentTable") {
                this.InitClass();
            }
            
            internal SpecialAgentTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            internal DataColumn CLIENT_DIVISIONColumn {
                get {
                    return this.columnCLIENT_DIVISION;
                }
            }
            
            internal DataColumn LOCATIONColumn {
                get {
                    return this.columnLOCATION;
                }
            }
            
            internal DataColumn ACCOUNT_NUMBERColumn {
                get {
                    return this.columnACCOUNT_NUMBER;
                }
            }
            
            internal DataColumn SAN_IDColumn {
                get {
                    return this.columnSAN_ID;
                }
            }
            
            internal DataColumn ZONE_CODEColumn {
                get {
                    return this.columnZONE_CODE;
                }
            }
            
            internal DataColumn IS_RECORDColumn {
                get {
                    return this.columnIS_RECORD;
                }
            }
            
            internal DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            internal DataColumn INSTRUCTIONSColumn {
                get {
                    return this.columnINSTRUCTIONS;
                }
            }
            
            internal DataColumn INDICATORColumn {
                get {
                    return this.columnINDICATOR;
                }
            }
            
            internal DataColumn ICONColumn {
                get {
                    return this.columnICON;
                }
            }
            
            public SpecialAgentTableRow this[int index] {
                get {
                    return ((SpecialAgentTableRow)(this.Rows[index]));
                }
            }
            
            public event SpecialAgentTableRowChangeEventHandler SpecialAgentTableRowChanged;
            
            public event SpecialAgentTableRowChangeEventHandler SpecialAgentTableRowChanging;
            
            public event SpecialAgentTableRowChangeEventHandler SpecialAgentTableRowDeleted;
            
            public event SpecialAgentTableRowChangeEventHandler SpecialAgentTableRowDeleting;
            
            public void AddSpecialAgentTableRow(SpecialAgentTableRow row) {
                this.Rows.Add(row);
            }
            
            public SpecialAgentTableRow AddSpecialAgentTableRow(string ID, string CLIENT_NUMBER, string CLIENT_DIVISION, string LOCATION, string ACCOUNT_NUMBER, string SAN_ID, string ZONE_CODE, string IS_RECORD, string TITLE, string INSTRUCTIONS, string INDICATOR, string ICON) {
                SpecialAgentTableRow rowSpecialAgentTableRow = ((SpecialAgentTableRow)(this.NewRow()));
                rowSpecialAgentTableRow.ItemArray = new object[] {
                        ID,
                        CLIENT_NUMBER,
                        CLIENT_DIVISION,
                        LOCATION,
                        ACCOUNT_NUMBER,
                        SAN_ID,
                        ZONE_CODE,
                        IS_RECORD,
                        TITLE,
                        INSTRUCTIONS,
                        INDICATOR,
                        ICON};
                this.Rows.Add(rowSpecialAgentTableRow);
                return rowSpecialAgentTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SpecialAgentTableDataTable cln = ((SpecialAgentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SpecialAgentTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnCLIENT_NUMBER = this.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIVISION = this.Columns["CLIENT_DIVISION"];
                this.columnLOCATION = this.Columns["LOCATION"];
                this.columnACCOUNT_NUMBER = this.Columns["ACCOUNT_NUMBER"];
                this.columnSAN_ID = this.Columns["SAN_ID"];
                this.columnZONE_CODE = this.Columns["ZONE_CODE"];
                this.columnIS_RECORD = this.Columns["IS_RECORD"];
                this.columnTITLE = this.Columns["TITLE"];
                this.columnINSTRUCTIONS = this.Columns["INSTRUCTIONS"];
                this.columnINDICATOR = this.Columns["INDICATOR"];
                this.columnICON = this.Columns["ICON"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCLIENT_NUMBER = new DataColumn("CLIENT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIVISION = new DataColumn("CLIENT_DIVISION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_DIVISION);
                this.columnLOCATION = new DataColumn("LOCATION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLOCATION);
                this.columnACCOUNT_NUMBER = new DataColumn("ACCOUNT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnACCOUNT_NUMBER);
                this.columnSAN_ID = new DataColumn("SAN_ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSAN_ID);
                this.columnZONE_CODE = new DataColumn("ZONE_CODE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZONE_CODE);
                this.columnIS_RECORD = new DataColumn("IS_RECORD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIS_RECORD);
                this.columnTITLE = new DataColumn("TITLE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTITLE);
                this.columnINSTRUCTIONS = new DataColumn("INSTRUCTIONS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINSTRUCTIONS);
                this.columnINDICATOR = new DataColumn("INDICATOR", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINDICATOR);
                this.columnICON = new DataColumn("ICON", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnICON);
                this.columnID.AllowDBNull = false;
                this.columnCLIENT_NUMBER.AllowDBNull = false;
                this.columnCLIENT_DIVISION.AllowDBNull = false;
                this.columnLOCATION.AllowDBNull = false;
            }
            
            public SpecialAgentTableRow NewSpecialAgentTableRow() {
                return ((SpecialAgentTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SpecialAgentTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SpecialAgentTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpecialAgentTableRowChanged != null)) {
                    this.SpecialAgentTableRowChanged(this, new SpecialAgentTableRowChangeEvent(((SpecialAgentTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpecialAgentTableRowChanging != null)) {
                    this.SpecialAgentTableRowChanging(this, new SpecialAgentTableRowChangeEvent(((SpecialAgentTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpecialAgentTableRowDeleted != null)) {
                    this.SpecialAgentTableRowDeleted(this, new SpecialAgentTableRowChangeEvent(((SpecialAgentTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpecialAgentTableRowDeleting != null)) {
                    this.SpecialAgentTableRowDeleting(this, new SpecialAgentTableRowChangeEvent(((SpecialAgentTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSpecialAgentTableRow(SpecialAgentTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpecialAgentTableRow : DataRow {
            
            private SpecialAgentTableDataTable tableSpecialAgentTable;
            
            internal SpecialAgentTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpecialAgentTable = ((SpecialAgentTableDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableSpecialAgentTable.IDColumn]));
                }
                set {
                    this[this.tableSpecialAgentTable.IDColumn] = value;
                }
            }
            
            public string CLIENT_NUMBER {
                get {
                    return ((string)(this[this.tableSpecialAgentTable.CLIENT_NUMBERColumn]));
                }
                set {
                    this[this.tableSpecialAgentTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            public string CLIENT_DIVISION {
                get {
                    return ((string)(this[this.tableSpecialAgentTable.CLIENT_DIVISIONColumn]));
                }
                set {
                    this[this.tableSpecialAgentTable.CLIENT_DIVISIONColumn] = value;
                }
            }
            
            public string LOCATION {
                get {
                    return ((string)(this[this.tableSpecialAgentTable.LOCATIONColumn]));
                }
                set {
                    this[this.tableSpecialAgentTable.LOCATIONColumn] = value;
                }
            }
            
            public string ACCOUNT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.ACCOUNT_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.ACCOUNT_NUMBERColumn] = value;
                }
            }
            
            public string SAN_ID {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.SAN_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.SAN_IDColumn] = value;
                }
            }
            
            public string ZONE_CODE {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.ZONE_CODEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.ZONE_CODEColumn] = value;
                }
            }
            
            public string IS_RECORD {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.IS_RECORDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.IS_RECORDColumn] = value;
                }
            }
            
            public string TITLE {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.TITLEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.TITLEColumn] = value;
                }
            }
            
            public string INSTRUCTIONS {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.INSTRUCTIONSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.INSTRUCTIONSColumn] = value;
                }
            }
            
            public string INDICATOR {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.INDICATORColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.INDICATORColumn] = value;
                }
            }
            
            public string ICON {
                get {
                    try {
                        return ((string)(this[this.tableSpecialAgentTable.ICONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpecialAgentTable.ICONColumn] = value;
                }
            }
            
            public bool IsACCOUNT_NUMBERNull() {
                return this.IsNull(this.tableSpecialAgentTable.ACCOUNT_NUMBERColumn);
            }
            
            public void SetACCOUNT_NUMBERNull() {
                this[this.tableSpecialAgentTable.ACCOUNT_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsSAN_IDNull() {
                return this.IsNull(this.tableSpecialAgentTable.SAN_IDColumn);
            }
            
            public void SetSAN_IDNull() {
                this[this.tableSpecialAgentTable.SAN_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsZONE_CODENull() {
                return this.IsNull(this.tableSpecialAgentTable.ZONE_CODEColumn);
            }
            
            public void SetZONE_CODENull() {
                this[this.tableSpecialAgentTable.ZONE_CODEColumn] = System.Convert.DBNull;
            }
            
            public bool IsIS_RECORDNull() {
                return this.IsNull(this.tableSpecialAgentTable.IS_RECORDColumn);
            }
            
            public void SetIS_RECORDNull() {
                this[this.tableSpecialAgentTable.IS_RECORDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTITLENull() {
                return this.IsNull(this.tableSpecialAgentTable.TITLEColumn);
            }
            
            public void SetTITLENull() {
                this[this.tableSpecialAgentTable.TITLEColumn] = System.Convert.DBNull;
            }
            
            public bool IsINSTRUCTIONSNull() {
                return this.IsNull(this.tableSpecialAgentTable.INSTRUCTIONSColumn);
            }
            
            public void SetINSTRUCTIONSNull() {
                this[this.tableSpecialAgentTable.INSTRUCTIONSColumn] = System.Convert.DBNull;
            }
            
            public bool IsINDICATORNull() {
                return this.IsNull(this.tableSpecialAgentTable.INDICATORColumn);
            }
            
            public void SetINDICATORNull() {
                this[this.tableSpecialAgentTable.INDICATORColumn] = System.Convert.DBNull;
            }
            
            public bool IsICONNull() {
                return this.IsNull(this.tableSpecialAgentTable.ICONColumn);
            }
            
            public void SetICONNull() {
                this[this.tableSpecialAgentTable.ICONColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SpecialAgentTableRowChangeEvent : EventArgs {
            
            private SpecialAgentTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public SpecialAgentTableRowChangeEvent(SpecialAgentTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SpecialAgentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
