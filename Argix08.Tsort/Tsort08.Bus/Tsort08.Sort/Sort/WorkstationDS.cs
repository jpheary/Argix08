//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Sort {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class WorkstationDS : DataSet {
        
        private WorkstationDetailTableDataTable tableWorkstationDetailTable;
        
        public WorkstationDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected WorkstationDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["WorkstationDetailTable"] != null)) {
                    this.Tables.Add(new WorkstationDetailTableDataTable(ds.Tables["WorkstationDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkstationDetailTableDataTable WorkstationDetailTable {
            get {
                return this.tableWorkstationDetailTable;
            }
        }
        
        public override DataSet Clone() {
            WorkstationDS cln = ((WorkstationDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["WorkstationDetailTable"] != null)) {
                this.Tables.Add(new WorkstationDetailTableDataTable(ds.Tables["WorkstationDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableWorkstationDetailTable = ((WorkstationDetailTableDataTable)(this.Tables["WorkstationDetailTable"]));
            if ((this.tableWorkstationDetailTable != null)) {
                this.tableWorkstationDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "WorkstationDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/WorkstationDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableWorkstationDetailTable = new WorkstationDetailTableDataTable();
            this.Tables.Add(this.tableWorkstationDetailTable);
        }
        
        private bool ShouldSerializeWorkstationDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void WorkstationDetailTableRowChangeEventHandler(object sender, WorkstationDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkstationDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnWorkStationID;
            
            private DataColumn columnName;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnScaleType;
            
            private DataColumn columnScalePort;
            
            private DataColumn columnPrinterType;
            
            private DataColumn columnPrinterPort;
            
            private DataColumn columnTrace;
            
            private DataColumn columnIsActive;
            
            internal WorkstationDetailTableDataTable() : 
                    base("WorkstationDetailTable") {
                this.InitClass();
            }
            
            internal WorkstationDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn WorkStationIDColumn {
                get {
                    return this.columnWorkStationID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn ScaleTypeColumn {
                get {
                    return this.columnScaleType;
                }
            }
            
            internal DataColumn ScalePortColumn {
                get {
                    return this.columnScalePort;
                }
            }
            
            internal DataColumn PrinterTypeColumn {
                get {
                    return this.columnPrinterType;
                }
            }
            
            internal DataColumn PrinterPortColumn {
                get {
                    return this.columnPrinterPort;
                }
            }
            
            internal DataColumn TraceColumn {
                get {
                    return this.columnTrace;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            public WorkstationDetailTableRow this[int index] {
                get {
                    return ((WorkstationDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowChanged;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowChanging;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowDeleted;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowDeleting;
            
            public void AddWorkstationDetailTableRow(WorkstationDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public WorkstationDetailTableRow AddWorkstationDetailTableRow(string WorkStationID, string Name, int TerminalID, string Number, string Description, string ScaleType, string ScalePort, string PrinterType, string PrinterPort, bool Trace, bool IsActive) {
                WorkstationDetailTableRow rowWorkstationDetailTableRow = ((WorkstationDetailTableRow)(this.NewRow()));
                rowWorkstationDetailTableRow.ItemArray = new object[] {
                        WorkStationID,
                        Name,
                        TerminalID,
                        Number,
                        Description,
                        ScaleType,
                        ScalePort,
                        PrinterType,
                        PrinterPort,
                        Trace,
                        IsActive};
                this.Rows.Add(rowWorkstationDetailTableRow);
                return rowWorkstationDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WorkstationDetailTableDataTable cln = ((WorkstationDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WorkstationDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnWorkStationID = this.Columns["WorkStationID"];
                this.columnName = this.Columns["Name"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnScaleType = this.Columns["ScaleType"];
                this.columnScalePort = this.Columns["ScalePort"];
                this.columnPrinterType = this.Columns["PrinterType"];
                this.columnPrinterPort = this.Columns["PrinterPort"];
                this.columnTrace = this.Columns["Trace"];
                this.columnIsActive = this.Columns["IsActive"];
            }
            
            private void InitClass() {
                this.columnWorkStationID = new DataColumn("WorkStationID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkStationID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnScaleType = new DataColumn("ScaleType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScaleType);
                this.columnScalePort = new DataColumn("ScalePort", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScalePort);
                this.columnPrinterType = new DataColumn("PrinterType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrinterType);
                this.columnPrinterPort = new DataColumn("PrinterPort", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrinterPort);
                this.columnTrace = new DataColumn("Trace", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrace);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnWorkStationID.AllowDBNull = false;
                this.columnTerminalID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
            }
            
            public WorkstationDetailTableRow NewWorkstationDetailTableRow() {
                return ((WorkstationDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WorkstationDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WorkstationDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkstationDetailTableRowChanged != null)) {
                    this.WorkstationDetailTableRowChanged(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkstationDetailTableRowChanging != null)) {
                    this.WorkstationDetailTableRowChanging(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkstationDetailTableRowDeleted != null)) {
                    this.WorkstationDetailTableRowDeleted(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkstationDetailTableRowDeleting != null)) {
                    this.WorkstationDetailTableRowDeleting(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWorkstationDetailTableRow(WorkstationDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkstationDetailTableRow : DataRow {
            
            private WorkstationDetailTableDataTable tableWorkstationDetailTable;
            
            internal WorkstationDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkstationDetailTable = ((WorkstationDetailTableDataTable)(this.Table));
            }
            
            public string WorkStationID {
                get {
                    return ((string)(this[this.tableWorkstationDetailTable.WorkStationIDColumn]));
                }
                set {
                    this[this.tableWorkstationDetailTable.WorkStationIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.NameColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    return ((int)(this[this.tableWorkstationDetailTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableWorkstationDetailTable.TerminalIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableWorkstationDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableWorkstationDetailTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.DescriptionColumn] = value;
                }
            }
            
            public string ScaleType {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.ScaleTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.ScaleTypeColumn] = value;
                }
            }
            
            public string ScalePort {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.ScalePortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.ScalePortColumn] = value;
                }
            }
            
            public string PrinterType {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.PrinterTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.PrinterTypeColumn] = value;
                }
            }
            
            public string PrinterPort {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.PrinterPortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.PrinterPortColumn] = value;
                }
            }
            
            public bool Trace {
                get {
                    try {
                        return ((bool)(this[this.tableWorkstationDetailTable.TraceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.TraceColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableWorkstationDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableWorkstationDetailTable.IsActiveColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableWorkstationDetailTable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableWorkstationDetailTable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableWorkstationDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableWorkstationDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsScaleTypeNull() {
                return this.IsNull(this.tableWorkstationDetailTable.ScaleTypeColumn);
            }
            
            public void SetScaleTypeNull() {
                this[this.tableWorkstationDetailTable.ScaleTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsScalePortNull() {
                return this.IsNull(this.tableWorkstationDetailTable.ScalePortColumn);
            }
            
            public void SetScalePortNull() {
                this[this.tableWorkstationDetailTable.ScalePortColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterTypeNull() {
                return this.IsNull(this.tableWorkstationDetailTable.PrinterTypeColumn);
            }
            
            public void SetPrinterTypeNull() {
                this[this.tableWorkstationDetailTable.PrinterTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterPortNull() {
                return this.IsNull(this.tableWorkstationDetailTable.PrinterPortColumn);
            }
            
            public void SetPrinterPortNull() {
                this[this.tableWorkstationDetailTable.PrinterPortColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceNull() {
                return this.IsNull(this.tableWorkstationDetailTable.TraceColumn);
            }
            
            public void SetTraceNull() {
                this[this.tableWorkstationDetailTable.TraceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkstationDetailTableRowChangeEvent : EventArgs {
            
            private WorkstationDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public WorkstationDetailTableRowChangeEvent(WorkstationDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WorkstationDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
