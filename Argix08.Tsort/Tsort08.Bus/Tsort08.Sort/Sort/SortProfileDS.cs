//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Sort {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SortProfileDS : DataSet {
        
        private SortProfileTableDataTable tableSortProfileTable;
        
        public SortProfileDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SortProfileDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SortProfileTable"] != null)) {
                    this.Tables.Add(new SortProfileTableDataTable(ds.Tables["SortProfileTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SortProfileTableDataTable SortProfileTable {
            get {
                return this.tableSortProfileTable;
            }
        }
        
        public override DataSet Clone() {
            SortProfileDS cln = ((SortProfileDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SortProfileTable"] != null)) {
                this.Tables.Add(new SortProfileTableDataTable(ds.Tables["SortProfileTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSortProfileTable = ((SortProfileTableDataTable)(this.Tables["SortProfileTable"]));
            if ((this.tableSortProfileTable != null)) {
                this.tableSortProfileTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "SortProfileDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SortProfileDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSortProfileTable = new SortProfileTableDataTable();
            this.Tables.Add(this.tableSortProfileTable);
        }
        
        private bool ShouldSerializeSortProfileTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SortProfileTableRowChangeEventHandler(object sender, SortProfileTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SortProfileTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFreightType;
            
            private DataColumn columnSortTypeID;
            
            private DataColumn columnSortType;
            
            private DataColumn columnClientNumber;
            
            private DataColumn columnClientDivision;
            
            private DataColumn columnVendorNumber;
            
            private DataColumn columnStatus;
            
            private DataColumn columnLabelID;
            
            private DataColumn columnExceptionLocation;
            
            internal SortProfileTableDataTable() : 
                    base("SortProfileTable") {
                this.InitClass();
            }
            
            internal SortProfileTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            internal DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            internal DataColumn SortTypeColumn {
                get {
                    return this.columnSortType;
                }
            }
            
            internal DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            internal DataColumn ClientDivisionColumn {
                get {
                    return this.columnClientDivision;
                }
            }
            
            internal DataColumn VendorNumberColumn {
                get {
                    return this.columnVendorNumber;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn ExceptionLocationColumn {
                get {
                    return this.columnExceptionLocation;
                }
            }
            
            public SortProfileTableRow this[int index] {
                get {
                    return ((SortProfileTableRow)(this.Rows[index]));
                }
            }
            
            public event SortProfileTableRowChangeEventHandler SortProfileTableRowChanged;
            
            public event SortProfileTableRowChangeEventHandler SortProfileTableRowChanging;
            
            public event SortProfileTableRowChangeEventHandler SortProfileTableRowDeleted;
            
            public event SortProfileTableRowChangeEventHandler SortProfileTableRowDeleting;
            
            public void AddSortProfileTableRow(SortProfileTableRow row) {
                this.Rows.Add(row);
            }
            
            public SortProfileTableRow AddSortProfileTableRow(string FreightType, int SortTypeID, string SortType, string ClientNumber, string ClientDivision, string VendorNumber, string Status, int LabelID, int ExceptionLocation) {
                SortProfileTableRow rowSortProfileTableRow = ((SortProfileTableRow)(this.NewRow()));
                rowSortProfileTableRow.ItemArray = new object[] {
                        FreightType,
                        SortTypeID,
                        SortType,
                        ClientNumber,
                        ClientDivision,
                        VendorNumber,
                        Status,
                        LabelID,
                        ExceptionLocation};
                this.Rows.Add(rowSortProfileTableRow);
                return rowSortProfileTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SortProfileTableDataTable cln = ((SortProfileTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SortProfileTableDataTable();
            }
            
            internal void InitVars() {
                this.columnFreightType = this.Columns["FreightType"];
                this.columnSortTypeID = this.Columns["SortTypeID"];
                this.columnSortType = this.Columns["SortType"];
                this.columnClientNumber = this.Columns["ClientNumber"];
                this.columnClientDivision = this.Columns["ClientDivision"];
                this.columnVendorNumber = this.Columns["VendorNumber"];
                this.columnStatus = this.Columns["Status"];
                this.columnLabelID = this.Columns["LabelID"];
                this.columnExceptionLocation = this.Columns["ExceptionLocation"];
            }
            
            private void InitClass() {
                this.columnFreightType = new DataColumn("FreightType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreightType);
                this.columnSortTypeID = new DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortTypeID);
                this.columnSortType = new DataColumn("SortType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortType);
                this.columnClientNumber = new DataColumn("ClientNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientNumber);
                this.columnClientDivision = new DataColumn("ClientDivision", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientDivision);
                this.columnVendorNumber = new DataColumn("VendorNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorNumber);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnExceptionLocation = new DataColumn("ExceptionLocation", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExceptionLocation);
                this.columnFreightType.AllowDBNull = false;
                this.columnSortTypeID.AllowDBNull = false;
                this.columnSortType.AllowDBNull = false;
                this.columnClientNumber.AllowDBNull = false;
                this.columnClientDivision.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
            }
            
            public SortProfileTableRow NewSortProfileTableRow() {
                return ((SortProfileTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SortProfileTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SortProfileTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SortProfileTableRowChanged != null)) {
                    this.SortProfileTableRowChanged(this, new SortProfileTableRowChangeEvent(((SortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SortProfileTableRowChanging != null)) {
                    this.SortProfileTableRowChanging(this, new SortProfileTableRowChangeEvent(((SortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SortProfileTableRowDeleted != null)) {
                    this.SortProfileTableRowDeleted(this, new SortProfileTableRowChangeEvent(((SortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SortProfileTableRowDeleting != null)) {
                    this.SortProfileTableRowDeleting(this, new SortProfileTableRowChangeEvent(((SortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSortProfileTableRow(SortProfileTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SortProfileTableRow : DataRow {
            
            private SortProfileTableDataTable tableSortProfileTable;
            
            internal SortProfileTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSortProfileTable = ((SortProfileTableDataTable)(this.Table));
            }
            
            public string FreightType {
                get {
                    return ((string)(this[this.tableSortProfileTable.FreightTypeColumn]));
                }
                set {
                    this[this.tableSortProfileTable.FreightTypeColumn] = value;
                }
            }
            
            public int SortTypeID {
                get {
                    return ((int)(this[this.tableSortProfileTable.SortTypeIDColumn]));
                }
                set {
                    this[this.tableSortProfileTable.SortTypeIDColumn] = value;
                }
            }
            
            public string SortType {
                get {
                    return ((string)(this[this.tableSortProfileTable.SortTypeColumn]));
                }
                set {
                    this[this.tableSortProfileTable.SortTypeColumn] = value;
                }
            }
            
            public string ClientNumber {
                get {
                    return ((string)(this[this.tableSortProfileTable.ClientNumberColumn]));
                }
                set {
                    this[this.tableSortProfileTable.ClientNumberColumn] = value;
                }
            }
            
            public string ClientDivision {
                get {
                    return ((string)(this[this.tableSortProfileTable.ClientDivisionColumn]));
                }
                set {
                    this[this.tableSortProfileTable.ClientDivisionColumn] = value;
                }
            }
            
            public string VendorNumber {
                get {
                    try {
                        return ((string)(this[this.tableSortProfileTable.VendorNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSortProfileTable.VendorNumberColumn] = value;
                }
            }
            
            public string Status {
                get {
                    return ((string)(this[this.tableSortProfileTable.StatusColumn]));
                }
                set {
                    this[this.tableSortProfileTable.StatusColumn] = value;
                }
            }
            
            public int LabelID {
                get {
                    try {
                        return ((int)(this[this.tableSortProfileTable.LabelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSortProfileTable.LabelIDColumn] = value;
                }
            }
            
            public int ExceptionLocation {
                get {
                    try {
                        return ((int)(this[this.tableSortProfileTable.ExceptionLocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSortProfileTable.ExceptionLocationColumn] = value;
                }
            }
            
            public bool IsVendorNumberNull() {
                return this.IsNull(this.tableSortProfileTable.VendorNumberColumn);
            }
            
            public void SetVendorNumberNull() {
                this[this.tableSortProfileTable.VendorNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLabelIDNull() {
                return this.IsNull(this.tableSortProfileTable.LabelIDColumn);
            }
            
            public void SetLabelIDNull() {
                this[this.tableSortProfileTable.LabelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionLocationNull() {
                return this.IsNull(this.tableSortProfileTable.ExceptionLocationColumn);
            }
            
            public void SetExceptionLocationNull() {
                this[this.tableSortProfileTable.ExceptionLocationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SortProfileTableRowChangeEvent : EventArgs {
            
            private SortProfileTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public SortProfileTableRowChangeEvent(SortProfileTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SortProfileTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
