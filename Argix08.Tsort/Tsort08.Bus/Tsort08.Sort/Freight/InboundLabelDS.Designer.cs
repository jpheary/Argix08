//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tsort.Freight {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InboundLabelDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InboundLabelDS : global::System.Data.DataSet {
        
        private InboundLabelTableDataTable tableInboundLabelTable;
        
        private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InboundLabelDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InboundLabelDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InboundLabelTable"] != null)) {
                    base.Tables.Add(new InboundLabelTableDataTable(ds.Tables["InboundLabelTable"]));
                }
                if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                    base.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelTableDataTable InboundLabelTable {
            get {
                return this.tableInboundLabelTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelDataElementTableDataTable InboundLabelDataElementTable {
            get {
                return this.tableInboundLabelDataElementTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InboundLabelDS cln = ((InboundLabelDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InboundLabelTable"] != null)) {
                    base.Tables.Add(new InboundLabelTableDataTable(ds.Tables["InboundLabelTable"]));
                }
                if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                    base.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInboundLabelTable = ((InboundLabelTableDataTable)(base.Tables["InboundLabelTable"]));
            if ((initTable == true)) {
                if ((this.tableInboundLabelTable != null)) {
                    this.tableInboundLabelTable.InitVars();
                }
            }
            this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(base.Tables["InboundLabelDataElementTable"]));
            if ((initTable == true)) {
                if ((this.tableInboundLabelDataElementTable != null)) {
                    this.tableInboundLabelDataElementTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InboundLabelDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InboundLabelDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInboundLabelTable = new InboundLabelTableDataTable();
            base.Tables.Add(this.tableInboundLabelTable);
            this.tableInboundLabelDataElementTable = new InboundLabelDataElementTableDataTable();
            base.Tables.Add(this.tableInboundLabelDataElementTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInboundLabelTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInboundLabelDataElementTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InboundLabelDS ds = new InboundLabelDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InboundLabelTableRowChangeEventHandler(object sender, InboundLabelTableRowChangeEvent e);
        
        public delegate void InboundLabelDataElementTableRowChangeEventHandler(object sender, InboundLabelDataElementTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InboundLabelTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabelID;
            
            private global::System.Data.DataColumn columnSortTypeID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnInput1Len;
            
            private global::System.Data.DataColumn columnInput1ValidString;
            
            private global::System.Data.DataColumn columnInput1ValidStart;
            
            private global::System.Data.DataColumn columnInput2Len;
            
            private global::System.Data.DataColumn columnInput2ValidString;
            
            private global::System.Data.DataColumn columnInput2ValidStart;
            
            private global::System.Data.DataColumn columnInput3Len;
            
            private global::System.Data.DataColumn columnInput3ValidString;
            
            private global::System.Data.DataColumn columnInput3ValidStart;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnLastUpdated;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnRowVersionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableDataTable() {
                this.TableName = "InboundLabelTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InboundLabelTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InboundLabelTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input1LenColumn {
                get {
                    return this.columnInput1Len;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input1ValidStringColumn {
                get {
                    return this.columnInput1ValidString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input1ValidStartColumn {
                get {
                    return this.columnInput1ValidStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input2LenColumn {
                get {
                    return this.columnInput2Len;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input2ValidStringColumn {
                get {
                    return this.columnInput2ValidString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input2ValidStartColumn {
                get {
                    return this.columnInput2ValidStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input3LenColumn {
                get {
                    return this.columnInput3Len;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input3ValidStringColumn {
                get {
                    return this.columnInput3ValidString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Input3ValidStartColumn {
                get {
                    return this.columnInput3ValidStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionIDColumn {
                get {
                    return this.columnRowVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableRow this[int index] {
                get {
                    return ((InboundLabelTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowChanging;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowChanged;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowDeleting;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInboundLabelTableRow(InboundLabelTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableRow AddInboundLabelTableRow(
                        int LabelID, 
                        int SortTypeID, 
                        string Description, 
                        short Input1Len, 
                        string Input1ValidString, 
                        short Input1ValidStart, 
                        short Input2Len, 
                        string Input2ValidString, 
                        short Input2ValidStart, 
                        short Input3Len, 
                        string Input3ValidString, 
                        short Input3ValidStart, 
                        byte IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        byte[] RowVersionID) {
                InboundLabelTableRow rowInboundLabelTableRow = ((InboundLabelTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LabelID,
                        SortTypeID,
                        Description,
                        Input1Len,
                        Input1ValidString,
                        Input1ValidStart,
                        Input2Len,
                        Input2ValidString,
                        Input2ValidStart,
                        Input3Len,
                        Input3ValidString,
                        Input3ValidStart,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersionID};
                rowInboundLabelTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInboundLabelTableRow);
                return rowInboundLabelTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InboundLabelTableDataTable cln = ((InboundLabelTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InboundLabelTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabelID = base.Columns["LabelID"];
                this.columnSortTypeID = base.Columns["SortTypeID"];
                this.columnDescription = base.Columns["Description"];
                this.columnInput1Len = base.Columns["Input1Len"];
                this.columnInput1ValidString = base.Columns["Input1ValidString"];
                this.columnInput1ValidStart = base.Columns["Input1ValidStart"];
                this.columnInput2Len = base.Columns["Input2Len"];
                this.columnInput2ValidString = base.Columns["Input2ValidString"];
                this.columnInput2ValidStart = base.Columns["Input2ValidStart"];
                this.columnInput3Len = base.Columns["Input3Len"];
                this.columnInput3ValidString = base.Columns["Input3ValidString"];
                this.columnInput3ValidStart = base.Columns["Input3ValidStart"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnLastUpdated = base.Columns["LastUpdated"];
                this.columnUserID = base.Columns["UserID"];
                this.columnRowVersionID = base.Columns["RowVersionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabelID = new global::System.Data.DataColumn("LabelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelID);
                this.columnSortTypeID = new global::System.Data.DataColumn("SortTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortTypeID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnInput1Len = new global::System.Data.DataColumn("Input1Len", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput1Len);
                this.columnInput1ValidString = new global::System.Data.DataColumn("Input1ValidString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput1ValidString);
                this.columnInput1ValidStart = new global::System.Data.DataColumn("Input1ValidStart", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput1ValidStart);
                this.columnInput2Len = new global::System.Data.DataColumn("Input2Len", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput2Len);
                this.columnInput2ValidString = new global::System.Data.DataColumn("Input2ValidString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput2ValidString);
                this.columnInput2ValidStart = new global::System.Data.DataColumn("Input2ValidStart", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput2ValidStart);
                this.columnInput3Len = new global::System.Data.DataColumn("Input3Len", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput3Len);
                this.columnInput3ValidString = new global::System.Data.DataColumn("Input3ValidString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput3ValidString);
                this.columnInput3ValidStart = new global::System.Data.DataColumn("Input3ValidStart", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInput3ValidStart);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new global::System.Data.DataColumn("LastUpdated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnRowVersionID = new global::System.Data.DataColumn("RowVersionID", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersionID);
                this.columnLabelID.AllowDBNull = false;
                this.columnSortTypeID.AllowDBNull = false;
                this.columnInput1Len.AllowDBNull = false;
                this.columnInput1ValidStart.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableRow NewInboundLabelTableRow() {
                return ((InboundLabelTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InboundLabelTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InboundLabelTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelTableRowChanged != null)) {
                    this.InboundLabelTableRowChanged(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelTableRowChanging != null)) {
                    this.InboundLabelTableRowChanging(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelTableRowDeleted != null)) {
                    this.InboundLabelTableRowDeleted(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelTableRowDeleting != null)) {
                    this.InboundLabelTableRowDeleting(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInboundLabelTableRow(InboundLabelTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InboundLabelDS ds = new InboundLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InboundLabelTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InboundLabelDataElementTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabelID;
            
            private global::System.Data.DataColumn columnElementType;
            
            private global::System.Data.DataColumn columnInputNumber;
            
            private global::System.Data.DataColumn columnStart;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnIsValueRequired;
            
            private global::System.Data.DataColumn columnIsDuplicateAllowed;
            
            private global::System.Data.DataColumn columnIsCheckDigitValidation;
            
            private global::System.Data.DataColumn columnConstantValue;
            
            private global::System.Data.DataColumn columnValidationExp;
            
            private global::System.Data.DataColumn columnCheckDigitType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableDataTable() {
                this.TableName = "InboundLabelDataElementTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InboundLabelDataElementTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InboundLabelDataElementTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElementTypeColumn {
                get {
                    return this.columnElementType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputNumberColumn {
                get {
                    return this.columnInputNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueRequiredColumn {
                get {
                    return this.columnIsValueRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDuplicateAllowedColumn {
                get {
                    return this.columnIsDuplicateAllowed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckDigitValidationColumn {
                get {
                    return this.columnIsCheckDigitValidation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstantValueColumn {
                get {
                    return this.columnConstantValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidationExpColumn {
                get {
                    return this.columnValidationExp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckDigitTypeColumn {
                get {
                    return this.columnCheckDigitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableRow this[int index] {
                get {
                    return ((InboundLabelDataElementTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanging;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanged;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleting;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableRow AddInboundLabelDataElementTableRow(int LabelID, string ElementType, short InputNumber, short Start, short Length, byte IsValueRequired, byte IsDuplicateAllowed, byte IsCheckDigitValidation, string ConstantValue, string ValidationExp, string CheckDigitType) {
                InboundLabelDataElementTableRow rowInboundLabelDataElementTableRow = ((InboundLabelDataElementTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LabelID,
                        ElementType,
                        InputNumber,
                        Start,
                        Length,
                        IsValueRequired,
                        IsDuplicateAllowed,
                        IsCheckDigitValidation,
                        ConstantValue,
                        ValidationExp,
                        CheckDigitType};
                rowInboundLabelDataElementTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInboundLabelDataElementTableRow);
                return rowInboundLabelDataElementTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InboundLabelDataElementTableDataTable cln = ((InboundLabelDataElementTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InboundLabelDataElementTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabelID = base.Columns["LabelID"];
                this.columnElementType = base.Columns["ElementType"];
                this.columnInputNumber = base.Columns["InputNumber"];
                this.columnStart = base.Columns["Start"];
                this.columnLength = base.Columns["Length"];
                this.columnIsValueRequired = base.Columns["IsValueRequired"];
                this.columnIsDuplicateAllowed = base.Columns["IsDuplicateAllowed"];
                this.columnIsCheckDigitValidation = base.Columns["IsCheckDigitValidation"];
                this.columnConstantValue = base.Columns["ConstantValue"];
                this.columnValidationExp = base.Columns["ValidationExp"];
                this.columnCheckDigitType = base.Columns["CheckDigitType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabelID = new global::System.Data.DataColumn("LabelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelID);
                this.columnElementType = new global::System.Data.DataColumn("ElementType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElementType);
                this.columnInputNumber = new global::System.Data.DataColumn("InputNumber", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputNumber);
                this.columnStart = new global::System.Data.DataColumn("Start", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnIsValueRequired = new global::System.Data.DataColumn("IsValueRequired", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValueRequired);
                this.columnIsDuplicateAllowed = new global::System.Data.DataColumn("IsDuplicateAllowed", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDuplicateAllowed);
                this.columnIsCheckDigitValidation = new global::System.Data.DataColumn("IsCheckDigitValidation", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCheckDigitValidation);
                this.columnConstantValue = new global::System.Data.DataColumn("ConstantValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstantValue);
                this.columnValidationExp = new global::System.Data.DataColumn("ValidationExp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidationExp);
                this.columnCheckDigitType = new global::System.Data.DataColumn("CheckDigitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckDigitType);
                this.columnLabelID.AllowDBNull = false;
                this.columnElementType.AllowDBNull = false;
                this.columnInputNumber.AllowDBNull = false;
                this.columnStart.AllowDBNull = false;
                this.columnLength.AllowDBNull = false;
                this.columnIsValueRequired.AllowDBNull = false;
                this.columnIsDuplicateAllowed.AllowDBNull = false;
                this.columnIsCheckDigitValidation.AllowDBNull = false;
                this.columnConstantValue.AllowDBNull = false;
                this.columnValidationExp.AllowDBNull = false;
                this.columnCheckDigitType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableRow NewInboundLabelDataElementTableRow() {
                return ((InboundLabelDataElementTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InboundLabelDataElementTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InboundLabelDataElementTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelDataElementTableRowChanged != null)) {
                    this.InboundLabelDataElementTableRowChanged(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelDataElementTableRowChanging != null)) {
                    this.InboundLabelDataElementTableRowChanging(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelDataElementTableRowDeleted != null)) {
                    this.InboundLabelDataElementTableRowDeleted(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelDataElementTableRowDeleting != null)) {
                    this.InboundLabelDataElementTableRowDeleting(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InboundLabelDS ds = new InboundLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InboundLabelDataElementTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InboundLabelTableRow : global::System.Data.DataRow {
            
            private InboundLabelTableDataTable tableInboundLabelTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InboundLabelTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelTable = ((InboundLabelTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.LabelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortTypeID {
                get {
                    return ((int)(this[this.tableInboundLabelTable.SortTypeIDColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.SortTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input1Len {
                get {
                    return ((short)(this[this.tableInboundLabelTable.Input1LenColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.Input1LenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Input1ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input1ValidStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input1ValidString\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input1ValidStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input1ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelTable.Input1ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.Input1ValidStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input2Len {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input2LenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input2Len\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2LenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Input2ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input2ValidStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input2ValidString\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2ValidStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input2ValidStart {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input2ValidStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input2ValidStart\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2ValidStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input3Len {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input3LenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input3Len\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3LenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Input3ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input3ValidStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input3ValidString\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3ValidStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Input3ValidStart {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input3ValidStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Input3ValidStart\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3ValidStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsActive {
                get {
                    try {
                        return ((byte)(this[this.tableInboundLabelTable.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInboundLabelTable.LastUpdatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastUpdated\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.LastUpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersionID {
                get {
                    try {
                        return ((byte[])(this[this.tableInboundLabelTable.RowVersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersionID\' in table \'InboundLabelTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.RowVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableInboundLabelTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableInboundLabelTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput1ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input1ValidStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput1ValidStringNull() {
                this[this.tableInboundLabelTable.Input1ValidStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput2LenNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2LenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput2LenNull() {
                this[this.tableInboundLabelTable.Input2LenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput2ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2ValidStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput2ValidStringNull() {
                this[this.tableInboundLabelTable.Input2ValidStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput2ValidStartNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2ValidStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput2ValidStartNull() {
                this[this.tableInboundLabelTable.Input2ValidStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput3LenNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3LenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput3LenNull() {
                this[this.tableInboundLabelTable.Input3LenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput3ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3ValidStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput3ValidStringNull() {
                this[this.tableInboundLabelTable.Input3ValidStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInput3ValidStartNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3ValidStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInput3ValidStartNull() {
                this[this.tableInboundLabelTable.Input3ValidStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableInboundLabelTable.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableInboundLabelTable.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableInboundLabelTable.LastUpdatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastUpdatedNull() {
                this[this.tableInboundLabelTable.LastUpdatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableInboundLabelTable.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableInboundLabelTable.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionIDNull() {
                return this.IsNull(this.tableInboundLabelTable.RowVersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionIDNull() {
                this[this.tableInboundLabelTable.RowVersionIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InboundLabelDataElementTableRow : global::System.Data.DataRow {
            
            private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InboundLabelDataElementTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelDataElementTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LabelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ElementType {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ElementTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ElementTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short InputNumber {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.InputNumberColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.InputNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Start {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.StartColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.StartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Length {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.LengthColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsValueRequired {
                get {
                    return ((byte)(this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsDuplicateAllowed {
                get {
                    return ((byte)(this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsCheckDigitValidation {
                get {
                    return ((byte)(this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConstantValue {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ConstantValueColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ConstantValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidationExp {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ValidationExpColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ValidationExpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckDigitType {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.CheckDigitTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.CheckDigitTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InboundLabelTableRowChangeEvent : global::System.EventArgs {
            
            private InboundLabelTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableRowChangeEvent(InboundLabelTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InboundLabelDataElementTableRowChangeEvent : global::System.EventArgs {
            
            private InboundLabelDataElementTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableRowChangeEvent(InboundLabelDataElementTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InboundLabelDataElementTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591