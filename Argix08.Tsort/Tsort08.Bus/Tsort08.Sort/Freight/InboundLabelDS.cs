//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Freight {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class InboundLabelDS : DataSet {
        
        private InboundLabelTableDataTable tableInboundLabelTable;
        
        private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
        
        public InboundLabelDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected InboundLabelDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["InboundLabelTable"] != null)) {
                    this.Tables.Add(new InboundLabelTableDataTable(ds.Tables["InboundLabelTable"]));
                }
                if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                    this.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelTableDataTable InboundLabelTable {
            get {
                return this.tableInboundLabelTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelDataElementTableDataTable InboundLabelDataElementTable {
            get {
                return this.tableInboundLabelDataElementTable;
            }
        }
        
        public override DataSet Clone() {
            InboundLabelDS cln = ((InboundLabelDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["InboundLabelTable"] != null)) {
                this.Tables.Add(new InboundLabelTableDataTable(ds.Tables["InboundLabelTable"]));
            }
            if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                this.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInboundLabelTable = ((InboundLabelTableDataTable)(this.Tables["InboundLabelTable"]));
            if ((this.tableInboundLabelTable != null)) {
                this.tableInboundLabelTable.InitVars();
            }
            this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(this.Tables["InboundLabelDataElementTable"]));
            if ((this.tableInboundLabelDataElementTable != null)) {
                this.tableInboundLabelDataElementTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "InboundLabelDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InboundLabelDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInboundLabelTable = new InboundLabelTableDataTable();
            this.Tables.Add(this.tableInboundLabelTable);
            this.tableInboundLabelDataElementTable = new InboundLabelDataElementTableDataTable();
            this.Tables.Add(this.tableInboundLabelDataElementTable);
        }
        
        private bool ShouldSerializeInboundLabelTable() {
            return false;
        }
        
        private bool ShouldSerializeInboundLabelDataElementTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InboundLabelTableRowChangeEventHandler(object sender, InboundLabelTableRowChangeEvent e);
        
        public delegate void InboundLabelDataElementTableRowChangeEventHandler(object sender, InboundLabelDataElementTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLabelID;
            
            private DataColumn columnSortTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnInput1Len;
            
            private DataColumn columnInput1ValidString;
            
            private DataColumn columnInput1ValidStart;
            
            private DataColumn columnInput2Len;
            
            private DataColumn columnInput2ValidString;
            
            private DataColumn columnInput2ValidStart;
            
            private DataColumn columnInput3Len;
            
            private DataColumn columnInput3ValidString;
            
            private DataColumn columnInput3ValidStart;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersionID;
            
            internal InboundLabelTableDataTable() : 
                    base("InboundLabelTable") {
                this.InitClass();
            }
            
            internal InboundLabelTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Input1LenColumn {
                get {
                    return this.columnInput1Len;
                }
            }
            
            internal DataColumn Input1ValidStringColumn {
                get {
                    return this.columnInput1ValidString;
                }
            }
            
            internal DataColumn Input1ValidStartColumn {
                get {
                    return this.columnInput1ValidStart;
                }
            }
            
            internal DataColumn Input2LenColumn {
                get {
                    return this.columnInput2Len;
                }
            }
            
            internal DataColumn Input2ValidStringColumn {
                get {
                    return this.columnInput2ValidString;
                }
            }
            
            internal DataColumn Input2ValidStartColumn {
                get {
                    return this.columnInput2ValidStart;
                }
            }
            
            internal DataColumn Input3LenColumn {
                get {
                    return this.columnInput3Len;
                }
            }
            
            internal DataColumn Input3ValidStringColumn {
                get {
                    return this.columnInput3ValidString;
                }
            }
            
            internal DataColumn Input3ValidStartColumn {
                get {
                    return this.columnInput3ValidStart;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionIDColumn {
                get {
                    return this.columnRowVersionID;
                }
            }
            
            public InboundLabelTableRow this[int index] {
                get {
                    return ((InboundLabelTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowChanged;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowChanging;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowDeleted;
            
            public event InboundLabelTableRowChangeEventHandler InboundLabelTableRowDeleting;
            
            public void AddInboundLabelTableRow(InboundLabelTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundLabelTableRow AddInboundLabelTableRow(
                        int LabelID, 
                        int SortTypeID, 
                        string Description, 
                        short Input1Len, 
                        string Input1ValidString, 
                        short Input1ValidStart, 
                        short Input2Len, 
                        string Input2ValidString, 
                        short Input2ValidStart, 
                        short Input3Len, 
                        string Input3ValidString, 
                        short Input3ValidStart, 
                        System.Byte IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        System.Byte[] RowVersionID) {
                InboundLabelTableRow rowInboundLabelTableRow = ((InboundLabelTableRow)(this.NewRow()));
                rowInboundLabelTableRow.ItemArray = new object[] {
                        LabelID,
                        SortTypeID,
                        Description,
                        Input1Len,
                        Input1ValidString,
                        Input1ValidStart,
                        Input2Len,
                        Input2ValidString,
                        Input2ValidStart,
                        Input3Len,
                        Input3ValidString,
                        Input3ValidStart,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersionID};
                this.Rows.Add(rowInboundLabelTableRow);
                return rowInboundLabelTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundLabelTableDataTable cln = ((InboundLabelTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundLabelTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLabelID = this.Columns["LabelID"];
                this.columnSortTypeID = this.Columns["SortTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnInput1Len = this.Columns["Input1Len"];
                this.columnInput1ValidString = this.Columns["Input1ValidString"];
                this.columnInput1ValidStart = this.Columns["Input1ValidStart"];
                this.columnInput2Len = this.Columns["Input2Len"];
                this.columnInput2ValidString = this.Columns["Input2ValidString"];
                this.columnInput2ValidStart = this.Columns["Input2ValidStart"];
                this.columnInput3Len = this.Columns["Input3Len"];
                this.columnInput3ValidString = this.Columns["Input3ValidString"];
                this.columnInput3ValidStart = this.Columns["Input3ValidStart"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersionID = this.Columns["RowVersionID"];
            }
            
            private void InitClass() {
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnSortTypeID = new DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnInput1Len = new DataColumn("Input1Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1Len);
                this.columnInput1ValidString = new DataColumn("Input1ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidString);
                this.columnInput1ValidStart = new DataColumn("Input1ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidStart);
                this.columnInput2Len = new DataColumn("Input2Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2Len);
                this.columnInput2ValidString = new DataColumn("Input2ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidString);
                this.columnInput2ValidStart = new DataColumn("Input2ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidStart);
                this.columnInput3Len = new DataColumn("Input3Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3Len);
                this.columnInput3ValidString = new DataColumn("Input3ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidString);
                this.columnInput3ValidStart = new DataColumn("Input3ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidStart);
                this.columnIsActive = new DataColumn("IsActive", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersionID = new DataColumn("RowVersionID", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersionID);
                this.columnLabelID.AllowDBNull = false;
                this.columnSortTypeID.AllowDBNull = false;
                this.columnInput1Len.AllowDBNull = false;
                this.columnInput1ValidStart.AllowDBNull = false;
            }
            
            public InboundLabelTableRow NewInboundLabelTableRow() {
                return ((InboundLabelTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundLabelTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundLabelTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelTableRowChanged != null)) {
                    this.InboundLabelTableRowChanged(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelTableRowChanging != null)) {
                    this.InboundLabelTableRowChanging(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelTableRowDeleted != null)) {
                    this.InboundLabelTableRowDeleted(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelTableRowDeleting != null)) {
                    this.InboundLabelTableRowDeleting(this, new InboundLabelTableRowChangeEvent(((InboundLabelTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundLabelTableRow(InboundLabelTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelTableRow : DataRow {
            
            private InboundLabelTableDataTable tableInboundLabelTable;
            
            internal InboundLabelTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelTable = ((InboundLabelTableDataTable)(this.Table));
            }
            
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.LabelIDColumn] = value;
                }
            }
            
            public int SortTypeID {
                get {
                    return ((int)(this[this.tableInboundLabelTable.SortTypeIDColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.SortTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.DescriptionColumn] = value;
                }
            }
            
            public short Input1Len {
                get {
                    return ((short)(this[this.tableInboundLabelTable.Input1LenColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.Input1LenColumn] = value;
                }
            }
            
            public string Input1ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input1ValidStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input1ValidStringColumn] = value;
                }
            }
            
            public short Input1ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelTable.Input1ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelTable.Input1ValidStartColumn] = value;
                }
            }
            
            public short Input2Len {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input2LenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2LenColumn] = value;
                }
            }
            
            public string Input2ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input2ValidStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2ValidStringColumn] = value;
                }
            }
            
            public short Input2ValidStart {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input2ValidStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input2ValidStartColumn] = value;
                }
            }
            
            public short Input3Len {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input3LenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3LenColumn] = value;
                }
            }
            
            public string Input3ValidString {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.Input3ValidStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3ValidStringColumn] = value;
                }
            }
            
            public short Input3ValidStart {
                get {
                    try {
                        return ((short)(this[this.tableInboundLabelTable.Input3ValidStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.Input3ValidStartColumn] = value;
                }
            }
            
            public System.Byte IsActive {
                get {
                    try {
                        return ((System.Byte)(this[this.tableInboundLabelTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInboundLabelTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.UserIDColumn] = value;
                }
            }
            
            public System.Byte[] RowVersionID {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableInboundLabelTable.RowVersionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelTable.RowVersionIDColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableInboundLabelTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableInboundLabelTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput1ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input1ValidStringColumn);
            }
            
            public void SetInput1ValidStringNull() {
                this[this.tableInboundLabelTable.Input1ValidStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput2LenNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2LenColumn);
            }
            
            public void SetInput2LenNull() {
                this[this.tableInboundLabelTable.Input2LenColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput2ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2ValidStringColumn);
            }
            
            public void SetInput2ValidStringNull() {
                this[this.tableInboundLabelTable.Input2ValidStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput2ValidStartNull() {
                return this.IsNull(this.tableInboundLabelTable.Input2ValidStartColumn);
            }
            
            public void SetInput2ValidStartNull() {
                this[this.tableInboundLabelTable.Input2ValidStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput3LenNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3LenColumn);
            }
            
            public void SetInput3LenNull() {
                this[this.tableInboundLabelTable.Input3LenColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput3ValidStringNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3ValidStringColumn);
            }
            
            public void SetInput3ValidStringNull() {
                this[this.tableInboundLabelTable.Input3ValidStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsInput3ValidStartNull() {
                return this.IsNull(this.tableInboundLabelTable.Input3ValidStartColumn);
            }
            
            public void SetInput3ValidStartNull() {
                this[this.tableInboundLabelTable.Input3ValidStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableInboundLabelTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableInboundLabelTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableInboundLabelTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableInboundLabelTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableInboundLabelTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableInboundLabelTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionIDNull() {
                return this.IsNull(this.tableInboundLabelTable.RowVersionIDColumn);
            }
            
            public void SetRowVersionIDNull() {
                this[this.tableInboundLabelTable.RowVersionIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelTableRowChangeEvent : EventArgs {
            
            private InboundLabelTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundLabelTableRowChangeEvent(InboundLabelTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundLabelTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLabelID;
            
            private DataColumn columnElementType;
            
            private DataColumn columnInputNumber;
            
            private DataColumn columnStart;
            
            private DataColumn columnLength;
            
            private DataColumn columnIsValueRequired;
            
            private DataColumn columnIsDuplicateAllowed;
            
            private DataColumn columnIsCheckDigitValidation;
            
            private DataColumn columnConstantValue;
            
            private DataColumn columnValidationExp;
            
            private DataColumn columnCheckDigitType;
            
            internal InboundLabelDataElementTableDataTable() : 
                    base("InboundLabelDataElementTable") {
                this.InitClass();
            }
            
            internal InboundLabelDataElementTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn ElementTypeColumn {
                get {
                    return this.columnElementType;
                }
            }
            
            internal DataColumn InputNumberColumn {
                get {
                    return this.columnInputNumber;
                }
            }
            
            internal DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            internal DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            internal DataColumn IsValueRequiredColumn {
                get {
                    return this.columnIsValueRequired;
                }
            }
            
            internal DataColumn IsDuplicateAllowedColumn {
                get {
                    return this.columnIsDuplicateAllowed;
                }
            }
            
            internal DataColumn IsCheckDigitValidationColumn {
                get {
                    return this.columnIsCheckDigitValidation;
                }
            }
            
            internal DataColumn ConstantValueColumn {
                get {
                    return this.columnConstantValue;
                }
            }
            
            internal DataColumn ValidationExpColumn {
                get {
                    return this.columnValidationExp;
                }
            }
            
            internal DataColumn CheckDigitTypeColumn {
                get {
                    return this.columnCheckDigitType;
                }
            }
            
            public InboundLabelDataElementTableRow this[int index] {
                get {
                    return ((InboundLabelDataElementTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanged;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanging;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleted;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleting;
            
            public void AddInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundLabelDataElementTableRow AddInboundLabelDataElementTableRow(int LabelID, string ElementType, short InputNumber, short Start, short Length, System.Byte IsValueRequired, System.Byte IsDuplicateAllowed, System.Byte IsCheckDigitValidation, string ConstantValue, string ValidationExp, string CheckDigitType) {
                InboundLabelDataElementTableRow rowInboundLabelDataElementTableRow = ((InboundLabelDataElementTableRow)(this.NewRow()));
                rowInboundLabelDataElementTableRow.ItemArray = new object[] {
                        LabelID,
                        ElementType,
                        InputNumber,
                        Start,
                        Length,
                        IsValueRequired,
                        IsDuplicateAllowed,
                        IsCheckDigitValidation,
                        ConstantValue,
                        ValidationExp,
                        CheckDigitType};
                this.Rows.Add(rowInboundLabelDataElementTableRow);
                return rowInboundLabelDataElementTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundLabelDataElementTableDataTable cln = ((InboundLabelDataElementTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundLabelDataElementTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLabelID = this.Columns["LabelID"];
                this.columnElementType = this.Columns["ElementType"];
                this.columnInputNumber = this.Columns["InputNumber"];
                this.columnStart = this.Columns["Start"];
                this.columnLength = this.Columns["Length"];
                this.columnIsValueRequired = this.Columns["IsValueRequired"];
                this.columnIsDuplicateAllowed = this.Columns["IsDuplicateAllowed"];
                this.columnIsCheckDigitValidation = this.Columns["IsCheckDigitValidation"];
                this.columnConstantValue = this.Columns["ConstantValue"];
                this.columnValidationExp = this.Columns["ValidationExp"];
                this.columnCheckDigitType = this.Columns["CheckDigitType"];
            }
            
            private void InitClass() {
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnElementType = new DataColumn("ElementType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnElementType);
                this.columnInputNumber = new DataColumn("InputNumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInputNumber);
                this.columnStart = new DataColumn("Start", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStart);
                this.columnLength = new DataColumn("Length", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLength);
                this.columnIsValueRequired = new DataColumn("IsValueRequired", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsValueRequired);
                this.columnIsDuplicateAllowed = new DataColumn("IsDuplicateAllowed", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDuplicateAllowed);
                this.columnIsCheckDigitValidation = new DataColumn("IsCheckDigitValidation", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCheckDigitValidation);
                this.columnConstantValue = new DataColumn("ConstantValue", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConstantValue);
                this.columnValidationExp = new DataColumn("ValidationExp", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValidationExp);
                this.columnCheckDigitType = new DataColumn("CheckDigitType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckDigitType);
                this.columnLabelID.AllowDBNull = false;
                this.columnElementType.AllowDBNull = false;
                this.columnInputNumber.AllowDBNull = false;
                this.columnStart.AllowDBNull = false;
                this.columnLength.AllowDBNull = false;
                this.columnIsValueRequired.AllowDBNull = false;
                this.columnIsDuplicateAllowed.AllowDBNull = false;
                this.columnIsCheckDigitValidation.AllowDBNull = false;
                this.columnConstantValue.AllowDBNull = false;
                this.columnValidationExp.AllowDBNull = false;
                this.columnCheckDigitType.AllowDBNull = false;
            }
            
            public InboundLabelDataElementTableRow NewInboundLabelDataElementTableRow() {
                return ((InboundLabelDataElementTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundLabelDataElementTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundLabelDataElementTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelDataElementTableRowChanged != null)) {
                    this.InboundLabelDataElementTableRowChanged(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelDataElementTableRowChanging != null)) {
                    this.InboundLabelDataElementTableRowChanging(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelDataElementTableRowDeleted != null)) {
                    this.InboundLabelDataElementTableRowDeleted(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelDataElementTableRowDeleting != null)) {
                    this.InboundLabelDataElementTableRowDeleting(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableRow : DataRow {
            
            private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
            
            internal InboundLabelDataElementTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(this.Table));
            }
            
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelDataElementTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LabelIDColumn] = value;
                }
            }
            
            public string ElementType {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ElementTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ElementTypeColumn] = value;
                }
            }
            
            public short InputNumber {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.InputNumberColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.InputNumberColumn] = value;
                }
            }
            
            public short Start {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.StartColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.StartColumn] = value;
                }
            }
            
            public short Length {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.LengthColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LengthColumn] = value;
                }
            }
            
            public System.Byte IsValueRequired {
                get {
                    return ((System.Byte)(this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn] = value;
                }
            }
            
            public System.Byte IsDuplicateAllowed {
                get {
                    return ((System.Byte)(this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn] = value;
                }
            }
            
            public System.Byte IsCheckDigitValidation {
                get {
                    return ((System.Byte)(this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn] = value;
                }
            }
            
            public string ConstantValue {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ConstantValueColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ConstantValueColumn] = value;
                }
            }
            
            public string ValidationExp {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ValidationExpColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ValidationExpColumn] = value;
                }
            }
            
            public string CheckDigitType {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.CheckDigitTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.CheckDigitTypeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableRowChangeEvent : EventArgs {
            
            private InboundLabelDataElementTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundLabelDataElementTableRowChangeEvent(InboundLabelDataElementTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundLabelDataElementTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
