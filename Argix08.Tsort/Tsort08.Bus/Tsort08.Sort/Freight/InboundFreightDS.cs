//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Freight {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class InboundFreightDS : DataSet {
        
        private InboundFreightTableDataTable tableInboundFreightTable;
        
        public InboundFreightDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected InboundFreightDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["InboundFreightTable"] != null)) {
                    this.Tables.Add(new InboundFreightTableDataTable(ds.Tables["InboundFreightTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundFreightTableDataTable InboundFreightTable {
            get {
                return this.tableInboundFreightTable;
            }
        }
        
        public override DataSet Clone() {
            InboundFreightDS cln = ((InboundFreightDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["InboundFreightTable"] != null)) {
                this.Tables.Add(new InboundFreightTableDataTable(ds.Tables["InboundFreightTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInboundFreightTable = ((InboundFreightTableDataTable)(this.Tables["InboundFreightTable"]));
            if ((this.tableInboundFreightTable != null)) {
                this.tableInboundFreightTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "InboundFreightDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InboundFreightDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInboundFreightTable = new InboundFreightTableDataTable();
            this.Tables.Add(this.tableInboundFreightTable);
        }
        
        private bool ShouldSerializeInboundFreightTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InboundFreightTableRowChangeEventHandler(object sender, InboundFreightTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundFreightTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFreightID;
            
            private DataColumn columnFreightType;
            
            private DataColumn columnCurrentLocation;
            
            private DataColumn columnTDSNumber;
            
            private DataColumn columnTrailerNumber;
            
            private DataColumn columnStorageTrailerNumber;
            
            private DataColumn columnClientNumber;
            
            private DataColumn columnClientName;
            
            private DataColumn columnShipperNumber;
            
            private DataColumn columnShipperName;
            
            private DataColumn columnPickupID;
            
            private DataColumn columnPickupDate;
            
            private DataColumn columnPickupNumber;
            
            private DataColumn columnStatus;
            
            private DataColumn columnCartons;
            
            private DataColumn columnPallets;
            
            private DataColumn columnCarrierNumber;
            
            private DataColumn columnDriverNumber;
            
            private DataColumn columnFloorStatus;
            
            private DataColumn columnSealNumber;
            
            private DataColumn columnUnloadedStatus;
            
            private DataColumn columnVendorKey;
            
            private DataColumn columnReceiveDate;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnCubeRatio;
            
            internal InboundFreightTableDataTable() : 
                    base("InboundFreightTable") {
                this.InitClass();
            }
            
            internal InboundFreightTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FreightIDColumn {
                get {
                    return this.columnFreightID;
                }
            }
            
            internal DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            internal DataColumn CurrentLocationColumn {
                get {
                    return this.columnCurrentLocation;
                }
            }
            
            internal DataColumn TDSNumberColumn {
                get {
                    return this.columnTDSNumber;
                }
            }
            
            internal DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            internal DataColumn StorageTrailerNumberColumn {
                get {
                    return this.columnStorageTrailerNumber;
                }
            }
            
            internal DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ShipperNumberColumn {
                get {
                    return this.columnShipperNumber;
                }
            }
            
            internal DataColumn ShipperNameColumn {
                get {
                    return this.columnShipperName;
                }
            }
            
            internal DataColumn PickupIDColumn {
                get {
                    return this.columnPickupID;
                }
            }
            
            internal DataColumn PickupDateColumn {
                get {
                    return this.columnPickupDate;
                }
            }
            
            internal DataColumn PickupNumberColumn {
                get {
                    return this.columnPickupNumber;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            internal DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            internal DataColumn CarrierNumberColumn {
                get {
                    return this.columnCarrierNumber;
                }
            }
            
            internal DataColumn DriverNumberColumn {
                get {
                    return this.columnDriverNumber;
                }
            }
            
            internal DataColumn FloorStatusColumn {
                get {
                    return this.columnFloorStatus;
                }
            }
            
            internal DataColumn SealNumberColumn {
                get {
                    return this.columnSealNumber;
                }
            }
            
            internal DataColumn UnloadedStatusColumn {
                get {
                    return this.columnUnloadedStatus;
                }
            }
            
            internal DataColumn VendorKeyColumn {
                get {
                    return this.columnVendorKey;
                }
            }
            
            internal DataColumn ReceiveDateColumn {
                get {
                    return this.columnReceiveDate;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn CubeRatioColumn {
                get {
                    return this.columnCubeRatio;
                }
            }
            
            public InboundFreightTableRow this[int index] {
                get {
                    return ((InboundFreightTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundFreightTableRowChangeEventHandler InboundFreightTableRowChanged;
            
            public event InboundFreightTableRowChangeEventHandler InboundFreightTableRowChanging;
            
            public event InboundFreightTableRowChangeEventHandler InboundFreightTableRowDeleted;
            
            public event InboundFreightTableRowChangeEventHandler InboundFreightTableRowDeleting;
            
            public void AddInboundFreightTableRow(InboundFreightTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundFreightTableRow AddInboundFreightTableRow(
                        string FreightID, 
                        string FreightType, 
                        string CurrentLocation, 
                        int TDSNumber, 
                        string TrailerNumber, 
                        string StorageTrailerNumber, 
                        string ClientNumber, 
                        string ClientName, 
                        string ShipperNumber, 
                        string ShipperName, 
                        string PickupID, 
                        string PickupDate, 
                        string PickupNumber, 
                        string Status, 
                        int Cartons, 
                        int Pallets, 
                        int CarrierNumber, 
                        int DriverNumber, 
                        string FloorStatus, 
                        string SealNumber, 
                        string UnloadedStatus, 
                        string VendorKey, 
                        string ReceiveDate, 
                        int TerminalID, 
                        System.Decimal CubeRatio) {
                InboundFreightTableRow rowInboundFreightTableRow = ((InboundFreightTableRow)(this.NewRow()));
                rowInboundFreightTableRow.ItemArray = new object[] {
                        FreightID,
                        FreightType,
                        CurrentLocation,
                        TDSNumber,
                        TrailerNumber,
                        StorageTrailerNumber,
                        ClientNumber,
                        ClientName,
                        ShipperNumber,
                        ShipperName,
                        PickupID,
                        PickupDate,
                        PickupNumber,
                        Status,
                        Cartons,
                        Pallets,
                        CarrierNumber,
                        DriverNumber,
                        FloorStatus,
                        SealNumber,
                        UnloadedStatus,
                        VendorKey,
                        ReceiveDate,
                        TerminalID,
                        CubeRatio};
                this.Rows.Add(rowInboundFreightTableRow);
                return rowInboundFreightTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundFreightTableDataTable cln = ((InboundFreightTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundFreightTableDataTable();
            }
            
            internal void InitVars() {
                this.columnFreightID = this.Columns["FreightID"];
                this.columnFreightType = this.Columns["FreightType"];
                this.columnCurrentLocation = this.Columns["CurrentLocation"];
                this.columnTDSNumber = this.Columns["TDSNumber"];
                this.columnTrailerNumber = this.Columns["TrailerNumber"];
                this.columnStorageTrailerNumber = this.Columns["StorageTrailerNumber"];
                this.columnClientNumber = this.Columns["ClientNumber"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnShipperNumber = this.Columns["ShipperNumber"];
                this.columnShipperName = this.Columns["ShipperName"];
                this.columnPickupID = this.Columns["PickupID"];
                this.columnPickupDate = this.Columns["PickupDate"];
                this.columnPickupNumber = this.Columns["PickupNumber"];
                this.columnStatus = this.Columns["Status"];
                this.columnCartons = this.Columns["Cartons"];
                this.columnPallets = this.Columns["Pallets"];
                this.columnCarrierNumber = this.Columns["CarrierNumber"];
                this.columnDriverNumber = this.Columns["DriverNumber"];
                this.columnFloorStatus = this.Columns["FloorStatus"];
                this.columnSealNumber = this.Columns["SealNumber"];
                this.columnUnloadedStatus = this.Columns["UnloadedStatus"];
                this.columnVendorKey = this.Columns["VendorKey"];
                this.columnReceiveDate = this.Columns["ReceiveDate"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnCubeRatio = this.Columns["CubeRatio"];
            }
            
            private void InitClass() {
                this.columnFreightID = new DataColumn("FreightID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreightID);
                this.columnFreightType = new DataColumn("FreightType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreightType);
                this.columnCurrentLocation = new DataColumn("CurrentLocation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentLocation);
                this.columnTDSNumber = new DataColumn("TDSNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTDSNumber);
                this.columnTrailerNumber = new DataColumn("TrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrailerNumber);
                this.columnStorageTrailerNumber = new DataColumn("StorageTrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStorageTrailerNumber);
                this.columnClientNumber = new DataColumn("ClientNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientNumber);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnShipperNumber = new DataColumn("ShipperNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipperNumber);
                this.columnShipperName = new DataColumn("ShipperName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipperName);
                this.columnPickupID = new DataColumn("PickupID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPickupID);
                this.columnPickupDate = new DataColumn("PickupDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPickupDate);
                this.columnPickupNumber = new DataColumn("PickupNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPickupNumber);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnCartons = new DataColumn("Cartons", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCartons);
                this.columnPallets = new DataColumn("Pallets", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPallets);
                this.columnCarrierNumber = new DataColumn("CarrierNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierNumber);
                this.columnDriverNumber = new DataColumn("DriverNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverNumber);
                this.columnFloorStatus = new DataColumn("FloorStatus", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFloorStatus);
                this.columnSealNumber = new DataColumn("SealNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSealNumber);
                this.columnUnloadedStatus = new DataColumn("UnloadedStatus", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnloadedStatus);
                this.columnVendorKey = new DataColumn("VendorKey", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorKey);
                this.columnReceiveDate = new DataColumn("ReceiveDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceiveDate);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnCubeRatio = new DataColumn("CubeRatio", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCubeRatio);
            }
            
            public InboundFreightTableRow NewInboundFreightTableRow() {
                return ((InboundFreightTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundFreightTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundFreightTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundFreightTableRowChanged != null)) {
                    this.InboundFreightTableRowChanged(this, new InboundFreightTableRowChangeEvent(((InboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundFreightTableRowChanging != null)) {
                    this.InboundFreightTableRowChanging(this, new InboundFreightTableRowChangeEvent(((InboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundFreightTableRowDeleted != null)) {
                    this.InboundFreightTableRowDeleted(this, new InboundFreightTableRowChangeEvent(((InboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundFreightTableRowDeleting != null)) {
                    this.InboundFreightTableRowDeleting(this, new InboundFreightTableRowChangeEvent(((InboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundFreightTableRow(InboundFreightTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundFreightTableRow : DataRow {
            
            private InboundFreightTableDataTable tableInboundFreightTable;
            
            internal InboundFreightTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundFreightTable = ((InboundFreightTableDataTable)(this.Table));
            }
            
            public string FreightID {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.FreightIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.FreightIDColumn] = value;
                }
            }
            
            public string FreightType {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.FreightTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.FreightTypeColumn] = value;
                }
            }
            
            public string CurrentLocation {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.CurrentLocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.CurrentLocationColumn] = value;
                }
            }
            
            public int TDSNumber {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.TDSNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.TDSNumberColumn] = value;
                }
            }
            
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.TrailerNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.TrailerNumberColumn] = value;
                }
            }
            
            public string StorageTrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.StorageTrailerNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.StorageTrailerNumberColumn] = value;
                }
            }
            
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.ClientNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.ClientNumberColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.ClientNameColumn] = value;
                }
            }
            
            public string ShipperNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.ShipperNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.ShipperNumberColumn] = value;
                }
            }
            
            public string ShipperName {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.ShipperNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.ShipperNameColumn] = value;
                }
            }
            
            public string PickupID {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.PickupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.PickupIDColumn] = value;
                }
            }
            
            public string PickupDate {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.PickupDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.PickupDateColumn] = value;
                }
            }
            
            public string PickupNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.PickupNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.PickupNumberColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.StatusColumn] = value;
                }
            }
            
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.CartonsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.CartonsColumn] = value;
                }
            }
            
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.PalletsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.PalletsColumn] = value;
                }
            }
            
            public int CarrierNumber {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.CarrierNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.CarrierNumberColumn] = value;
                }
            }
            
            public int DriverNumber {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.DriverNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.DriverNumberColumn] = value;
                }
            }
            
            public string FloorStatus {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.FloorStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.FloorStatusColumn] = value;
                }
            }
            
            public string SealNumber {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.SealNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.SealNumberColumn] = value;
                }
            }
            
            public string UnloadedStatus {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.UnloadedStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.UnloadedStatusColumn] = value;
                }
            }
            
            public string VendorKey {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.VendorKeyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.VendorKeyColumn] = value;
                }
            }
            
            public string ReceiveDate {
                get {
                    try {
                        return ((string)(this[this.tableInboundFreightTable.ReceiveDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.ReceiveDateColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableInboundFreightTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.TerminalIDColumn] = value;
                }
            }
            
            public System.Decimal CubeRatio {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInboundFreightTable.CubeRatioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundFreightTable.CubeRatioColumn] = value;
                }
            }
            
            public bool IsFreightIDNull() {
                return this.IsNull(this.tableInboundFreightTable.FreightIDColumn);
            }
            
            public void SetFreightIDNull() {
                this[this.tableInboundFreightTable.FreightIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFreightTypeNull() {
                return this.IsNull(this.tableInboundFreightTable.FreightTypeColumn);
            }
            
            public void SetFreightTypeNull() {
                this[this.tableInboundFreightTable.FreightTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentLocationNull() {
                return this.IsNull(this.tableInboundFreightTable.CurrentLocationColumn);
            }
            
            public void SetCurrentLocationNull() {
                this[this.tableInboundFreightTable.CurrentLocationColumn] = System.Convert.DBNull;
            }
            
            public bool IsTDSNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.TDSNumberColumn);
            }
            
            public void SetTDSNumberNull() {
                this[this.tableInboundFreightTable.TDSNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.TrailerNumberColumn);
            }
            
            public void SetTrailerNumberNull() {
                this[this.tableInboundFreightTable.TrailerNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStorageTrailerNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.StorageTrailerNumberColumn);
            }
            
            public void SetStorageTrailerNumberNull() {
                this[this.tableInboundFreightTable.StorageTrailerNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.ClientNumberColumn);
            }
            
            public void SetClientNumberNull() {
                this[this.tableInboundFreightTable.ClientNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableInboundFreightTable.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableInboundFreightTable.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipperNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.ShipperNumberColumn);
            }
            
            public void SetShipperNumberNull() {
                this[this.tableInboundFreightTable.ShipperNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipperNameNull() {
                return this.IsNull(this.tableInboundFreightTable.ShipperNameColumn);
            }
            
            public void SetShipperNameNull() {
                this[this.tableInboundFreightTable.ShipperNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPickupIDNull() {
                return this.IsNull(this.tableInboundFreightTable.PickupIDColumn);
            }
            
            public void SetPickupIDNull() {
                this[this.tableInboundFreightTable.PickupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPickupDateNull() {
                return this.IsNull(this.tableInboundFreightTable.PickupDateColumn);
            }
            
            public void SetPickupDateNull() {
                this[this.tableInboundFreightTable.PickupDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPickupNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.PickupNumberColumn);
            }
            
            public void SetPickupNumberNull() {
                this[this.tableInboundFreightTable.PickupNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableInboundFreightTable.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableInboundFreightTable.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsCartonsNull() {
                return this.IsNull(this.tableInboundFreightTable.CartonsColumn);
            }
            
            public void SetCartonsNull() {
                this[this.tableInboundFreightTable.CartonsColumn] = System.Convert.DBNull;
            }
            
            public bool IsPalletsNull() {
                return this.IsNull(this.tableInboundFreightTable.PalletsColumn);
            }
            
            public void SetPalletsNull() {
                this[this.tableInboundFreightTable.PalletsColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.CarrierNumberColumn);
            }
            
            public void SetCarrierNumberNull() {
                this[this.tableInboundFreightTable.CarrierNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.DriverNumberColumn);
            }
            
            public void SetDriverNumberNull() {
                this[this.tableInboundFreightTable.DriverNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsFloorStatusNull() {
                return this.IsNull(this.tableInboundFreightTable.FloorStatusColumn);
            }
            
            public void SetFloorStatusNull() {
                this[this.tableInboundFreightTable.FloorStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsSealNumberNull() {
                return this.IsNull(this.tableInboundFreightTable.SealNumberColumn);
            }
            
            public void SetSealNumberNull() {
                this[this.tableInboundFreightTable.SealNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnloadedStatusNull() {
                return this.IsNull(this.tableInboundFreightTable.UnloadedStatusColumn);
            }
            
            public void SetUnloadedStatusNull() {
                this[this.tableInboundFreightTable.UnloadedStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendorKeyNull() {
                return this.IsNull(this.tableInboundFreightTable.VendorKeyColumn);
            }
            
            public void SetVendorKeyNull() {
                this[this.tableInboundFreightTable.VendorKeyColumn] = System.Convert.DBNull;
            }
            
            public bool IsReceiveDateNull() {
                return this.IsNull(this.tableInboundFreightTable.ReceiveDateColumn);
            }
            
            public void SetReceiveDateNull() {
                this[this.tableInboundFreightTable.ReceiveDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableInboundFreightTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableInboundFreightTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCubeRatioNull() {
                return this.IsNull(this.tableInboundFreightTable.CubeRatioColumn);
            }
            
            public void SetCubeRatioNull() {
                this[this.tableInboundFreightTable.CubeRatioColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundFreightTableRowChangeEvent : EventArgs {
            
            private InboundFreightTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundFreightTableRowChangeEvent(InboundFreightTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundFreightTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
