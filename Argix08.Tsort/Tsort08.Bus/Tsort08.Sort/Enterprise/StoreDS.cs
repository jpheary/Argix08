//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class StoreDS : DataSet {
        
        private StoreDetailTableDataTable tableStoreDetailTable;
        
        public StoreDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected StoreDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["StoreDetailTable"] != null)) {
                    this.Tables.Add(new StoreDetailTableDataTable(ds.Tables["StoreDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoreDetailTableDataTable StoreDetailTable {
            get {
                return this.tableStoreDetailTable;
            }
        }
        
        public override DataSet Clone() {
            StoreDS cln = ((StoreDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["StoreDetailTable"] != null)) {
                this.Tables.Add(new StoreDetailTableDataTable(ds.Tables["StoreDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableStoreDetailTable = ((StoreDetailTableDataTable)(this.Tables["StoreDetailTable"]));
            if ((this.tableStoreDetailTable != null)) {
                this.tableStoreDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "StoreDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StoreDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableStoreDetailTable = new StoreDetailTableDataTable();
            this.Tables.Add(this.tableStoreDetailTable);
        }
        
        private bool ShouldSerializeStoreDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void StoreDetailTableRowChangeEventHandler(object sender, StoreDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StoreDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCLIENT_NUMBER;
            
            private DataColumn columnCLIENT_DIVISION;
            
            private DataColumn columnNUMBER;
            
            private DataColumn columnNAME;
            
            private DataColumn columnADDRESS_LINE1;
            
            private DataColumn columnADDRESS_LINE2;
            
            private DataColumn columnCITY;
            
            private DataColumn columnSTATE;
            
            private DataColumn columnZIP;
            
            private DataColumn columnZIP4;
            
            private DataColumn columnZONE;
            
            private DataColumn columnZONE_TYPE;
            
            private DataColumn columnSTATUS;
            
            private DataColumn columnOPEN_DATE;
            
            private DataColumn columnROUTE;
            
            private DataColumn columnLBL_USER_DATA;
            
            private DataColumn columnSAN_NUMBER;
            
            private DataColumn columnPHONE;
            
            private DataColumn columnINSTRUCTIONS;
            
            private DataColumn columnLABELTYPE;
            
            private DataColumn columnALT_NUMBER;
            
            private DataColumn columnALTROUTE;
            
            private DataColumn columnLOCAL_LANE;
            
            internal StoreDetailTableDataTable() : 
                    base("StoreDetailTable") {
                this.InitClass();
            }
            
            internal StoreDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            internal DataColumn CLIENT_DIVISIONColumn {
                get {
                    return this.columnCLIENT_DIVISION;
                }
            }
            
            internal DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            internal DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            internal DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            internal DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            internal DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            internal DataColumn ZONEColumn {
                get {
                    return this.columnZONE;
                }
            }
            
            internal DataColumn ZONE_TYPEColumn {
                get {
                    return this.columnZONE_TYPE;
                }
            }
            
            internal DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            internal DataColumn OPEN_DATEColumn {
                get {
                    return this.columnOPEN_DATE;
                }
            }
            
            internal DataColumn ROUTEColumn {
                get {
                    return this.columnROUTE;
                }
            }
            
            internal DataColumn LBL_USER_DATAColumn {
                get {
                    return this.columnLBL_USER_DATA;
                }
            }
            
            internal DataColumn SAN_NUMBERColumn {
                get {
                    return this.columnSAN_NUMBER;
                }
            }
            
            internal DataColumn PHONEColumn {
                get {
                    return this.columnPHONE;
                }
            }
            
            internal DataColumn INSTRUCTIONSColumn {
                get {
                    return this.columnINSTRUCTIONS;
                }
            }
            
            internal DataColumn LABELTYPEColumn {
                get {
                    return this.columnLABELTYPE;
                }
            }
            
            internal DataColumn ALT_NUMBERColumn {
                get {
                    return this.columnALT_NUMBER;
                }
            }
            
            internal DataColumn ALTROUTEColumn {
                get {
                    return this.columnALTROUTE;
                }
            }
            
            internal DataColumn LOCAL_LANEColumn {
                get {
                    return this.columnLOCAL_LANE;
                }
            }
            
            public StoreDetailTableRow this[int index] {
                get {
                    return ((StoreDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowChanged;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowChanging;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowDeleted;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowDeleting;
            
            public void AddStoreDetailTableRow(StoreDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public StoreDetailTableRow AddStoreDetailTableRow(
                        string CLIENT_NUMBER, 
                        string CLIENT_DIVISION, 
                        int NUMBER, 
                        string NAME, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string ZONE, 
                        string ZONE_TYPE, 
                        string STATUS, 
                        System.DateTime OPEN_DATE, 
                        string ROUTE, 
                        string LBL_USER_DATA, 
                        string SAN_NUMBER, 
                        string PHONE, 
                        string INSTRUCTIONS, 
                        string LABELTYPE, 
                        string ALT_NUMBER, 
                        string ALTROUTE, 
                        string LOCAL_LANE) {
                StoreDetailTableRow rowStoreDetailTableRow = ((StoreDetailTableRow)(this.NewRow()));
                rowStoreDetailTableRow.ItemArray = new object[] {
                        CLIENT_NUMBER,
                        CLIENT_DIVISION,
                        NUMBER,
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        ZONE,
                        ZONE_TYPE,
                        STATUS,
                        OPEN_DATE,
                        ROUTE,
                        LBL_USER_DATA,
                        SAN_NUMBER,
                        PHONE,
                        INSTRUCTIONS,
                        LABELTYPE,
                        ALT_NUMBER,
                        ALTROUTE,
                        LOCAL_LANE};
                this.Rows.Add(rowStoreDetailTableRow);
                return rowStoreDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StoreDetailTableDataTable cln = ((StoreDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StoreDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCLIENT_NUMBER = this.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIVISION = this.Columns["CLIENT_DIVISION"];
                this.columnNUMBER = this.Columns["NUMBER"];
                this.columnNAME = this.Columns["NAME"];
                this.columnADDRESS_LINE1 = this.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = this.Columns["ADDRESS_LINE2"];
                this.columnCITY = this.Columns["CITY"];
                this.columnSTATE = this.Columns["STATE"];
                this.columnZIP = this.Columns["ZIP"];
                this.columnZIP4 = this.Columns["ZIP4"];
                this.columnZONE = this.Columns["ZONE"];
                this.columnZONE_TYPE = this.Columns["ZONE_TYPE"];
                this.columnSTATUS = this.Columns["STATUS"];
                this.columnOPEN_DATE = this.Columns["OPEN_DATE"];
                this.columnROUTE = this.Columns["ROUTE"];
                this.columnLBL_USER_DATA = this.Columns["LBL_USER_DATA"];
                this.columnSAN_NUMBER = this.Columns["SAN_NUMBER"];
                this.columnPHONE = this.Columns["PHONE"];
                this.columnINSTRUCTIONS = this.Columns["INSTRUCTIONS"];
                this.columnLABELTYPE = this.Columns["LABELTYPE"];
                this.columnALT_NUMBER = this.Columns["ALT_NUMBER"];
                this.columnALTROUTE = this.Columns["ALTROUTE"];
                this.columnLOCAL_LANE = this.Columns["LOCAL_LANE"];
            }
            
            private void InitClass() {
                this.columnCLIENT_NUMBER = new DataColumn("CLIENT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIVISION = new DataColumn("CLIENT_DIVISION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_DIVISION);
                this.columnNUMBER = new DataColumn("NUMBER", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new DataColumn("ADDRESS_LINE1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new DataColumn("ADDRESS_LINE2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new DataColumn("CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY);
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnZIP = new DataColumn("ZIP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP);
                this.columnZIP4 = new DataColumn("ZIP4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP4);
                this.columnZONE = new DataColumn("ZONE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZONE);
                this.columnZONE_TYPE = new DataColumn("ZONE_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZONE_TYPE);
                this.columnSTATUS = new DataColumn("STATUS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATUS);
                this.columnOPEN_DATE = new DataColumn("OPEN_DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOPEN_DATE);
                this.columnROUTE = new DataColumn("ROUTE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnROUTE);
                this.columnLBL_USER_DATA = new DataColumn("LBL_USER_DATA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLBL_USER_DATA);
                this.columnSAN_NUMBER = new DataColumn("SAN_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSAN_NUMBER);
                this.columnPHONE = new DataColumn("PHONE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPHONE);
                this.columnINSTRUCTIONS = new DataColumn("INSTRUCTIONS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINSTRUCTIONS);
                this.columnLABELTYPE = new DataColumn("LABELTYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLABELTYPE);
                this.columnALT_NUMBER = new DataColumn("ALT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnALT_NUMBER);
                this.columnALTROUTE = new DataColumn("ALTROUTE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnALTROUTE);
                this.columnLOCAL_LANE = new DataColumn("LOCAL_LANE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLOCAL_LANE);
            }
            
            public StoreDetailTableRow NewStoreDetailTableRow() {
                return ((StoreDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StoreDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StoreDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoreDetailTableRowChanged != null)) {
                    this.StoreDetailTableRowChanged(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoreDetailTableRowChanging != null)) {
                    this.StoreDetailTableRowChanging(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoreDetailTableRowDeleted != null)) {
                    this.StoreDetailTableRowDeleted(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoreDetailTableRowDeleting != null)) {
                    this.StoreDetailTableRowDeleting(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStoreDetailTableRow(StoreDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StoreDetailTableRow : DataRow {
            
            private StoreDetailTableDataTable tableStoreDetailTable;
            
            internal StoreDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoreDetailTable = ((StoreDetailTableDataTable)(this.Table));
            }
            
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CLIENT_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            public string CLIENT_DIVISION {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn] = value;
                }
            }
            
            public int NUMBER {
                get {
                    try {
                        return ((int)(this[this.tableStoreDetailTable.NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.NUMBERColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.NAMEColumn] = value;
                }
            }
            
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ADDRESS_LINE1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CITYColumn] = value;
                }
            }
            
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.STATEColumn] = value;
                }
            }
            
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZIPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZIPColumn] = value;
                }
            }
            
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZIP4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZIP4Column] = value;
                }
            }
            
            public string ZONE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZONEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZONEColumn] = value;
                }
            }
            
            public string ZONE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZONE_TYPEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZONE_TYPEColumn] = value;
                }
            }
            
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.STATUSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.STATUSColumn] = value;
                }
            }
            
            public System.DateTime OPEN_DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableStoreDetailTable.OPEN_DATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.OPEN_DATEColumn] = value;
                }
            }
            
            public string ROUTE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ROUTEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ROUTEColumn] = value;
                }
            }
            
            public string LBL_USER_DATA {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LBL_USER_DATAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LBL_USER_DATAColumn] = value;
                }
            }
            
            public string SAN_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.SAN_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.SAN_NUMBERColumn] = value;
                }
            }
            
            public string PHONE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.PHONEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.PHONEColumn] = value;
                }
            }
            
            public string INSTRUCTIONS {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.INSTRUCTIONSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.INSTRUCTIONSColumn] = value;
                }
            }
            
            public string LABELTYPE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LABELTYPEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LABELTYPEColumn] = value;
                }
            }
            
            public string ALT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ALT_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ALT_NUMBERColumn] = value;
                }
            }
            
            public string ALTROUTE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ALTROUTEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ALTROUTEColumn] = value;
                }
            }
            
            public string LOCAL_LANE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LOCAL_LANEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LOCAL_LANEColumn] = value;
                }
            }
            
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.CLIENT_NUMBERColumn);
            }
            
            public void SetCLIENT_NUMBERNull() {
                this[this.tableStoreDetailTable.CLIENT_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsCLIENT_DIVISIONNull() {
                return this.IsNull(this.tableStoreDetailTable.CLIENT_DIVISIONColumn);
            }
            
            public void SetCLIENT_DIVISIONNull() {
                this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn] = System.Convert.DBNull;
            }
            
            public bool IsNUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.NUMBERColumn);
            }
            
            public void SetNUMBERNull() {
                this[this.tableStoreDetailTable.NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsNAMENull() {
                return this.IsNull(this.tableStoreDetailTable.NAMEColumn);
            }
            
            public void SetNAMENull() {
                this[this.tableStoreDetailTable.NAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableStoreDetailTable.ADDRESS_LINE1Column);
            }
            
            public void SetADDRESS_LINE1Null() {
                this[this.tableStoreDetailTable.ADDRESS_LINE1Column] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableStoreDetailTable.ADDRESS_LINE2Column);
            }
            
            public void SetADDRESS_LINE2Null() {
                this[this.tableStoreDetailTable.ADDRESS_LINE2Column] = System.Convert.DBNull;
            }
            
            public bool IsCITYNull() {
                return this.IsNull(this.tableStoreDetailTable.CITYColumn);
            }
            
            public void SetCITYNull() {
                this[this.tableStoreDetailTable.CITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATENull() {
                return this.IsNull(this.tableStoreDetailTable.STATEColumn);
            }
            
            public void SetSTATENull() {
                this[this.tableStoreDetailTable.STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIPNull() {
                return this.IsNull(this.tableStoreDetailTable.ZIPColumn);
            }
            
            public void SetZIPNull() {
                this[this.tableStoreDetailTable.ZIPColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIP4Null() {
                return this.IsNull(this.tableStoreDetailTable.ZIP4Column);
            }
            
            public void SetZIP4Null() {
                this[this.tableStoreDetailTable.ZIP4Column] = System.Convert.DBNull;
            }
            
            public bool IsZONENull() {
                return this.IsNull(this.tableStoreDetailTable.ZONEColumn);
            }
            
            public void SetZONENull() {
                this[this.tableStoreDetailTable.ZONEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZONE_TYPENull() {
                return this.IsNull(this.tableStoreDetailTable.ZONE_TYPEColumn);
            }
            
            public void SetZONE_TYPENull() {
                this[this.tableStoreDetailTable.ZONE_TYPEColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableStoreDetailTable.STATUSColumn);
            }
            
            public void SetSTATUSNull() {
                this[this.tableStoreDetailTable.STATUSColumn] = System.Convert.DBNull;
            }
            
            public bool IsOPEN_DATENull() {
                return this.IsNull(this.tableStoreDetailTable.OPEN_DATEColumn);
            }
            
            public void SetOPEN_DATENull() {
                this[this.tableStoreDetailTable.OPEN_DATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsROUTENull() {
                return this.IsNull(this.tableStoreDetailTable.ROUTEColumn);
            }
            
            public void SetROUTENull() {
                this[this.tableStoreDetailTable.ROUTEColumn] = System.Convert.DBNull;
            }
            
            public bool IsLBL_USER_DATANull() {
                return this.IsNull(this.tableStoreDetailTable.LBL_USER_DATAColumn);
            }
            
            public void SetLBL_USER_DATANull() {
                this[this.tableStoreDetailTable.LBL_USER_DATAColumn] = System.Convert.DBNull;
            }
            
            public bool IsSAN_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.SAN_NUMBERColumn);
            }
            
            public void SetSAN_NUMBERNull() {
                this[this.tableStoreDetailTable.SAN_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsPHONENull() {
                return this.IsNull(this.tableStoreDetailTable.PHONEColumn);
            }
            
            public void SetPHONENull() {
                this[this.tableStoreDetailTable.PHONEColumn] = System.Convert.DBNull;
            }
            
            public bool IsINSTRUCTIONSNull() {
                return this.IsNull(this.tableStoreDetailTable.INSTRUCTIONSColumn);
            }
            
            public void SetINSTRUCTIONSNull() {
                this[this.tableStoreDetailTable.INSTRUCTIONSColumn] = System.Convert.DBNull;
            }
            
            public bool IsLABELTYPENull() {
                return this.IsNull(this.tableStoreDetailTable.LABELTYPEColumn);
            }
            
            public void SetLABELTYPENull() {
                this[this.tableStoreDetailTable.LABELTYPEColumn] = System.Convert.DBNull;
            }
            
            public bool IsALT_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.ALT_NUMBERColumn);
            }
            
            public void SetALT_NUMBERNull() {
                this[this.tableStoreDetailTable.ALT_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsALTROUTENull() {
                return this.IsNull(this.tableStoreDetailTable.ALTROUTEColumn);
            }
            
            public void SetALTROUTENull() {
                this[this.tableStoreDetailTable.ALTROUTEColumn] = System.Convert.DBNull;
            }
            
            public bool IsLOCAL_LANENull() {
                return this.IsNull(this.tableStoreDetailTable.LOCAL_LANEColumn);
            }
            
            public void SetLOCAL_LANENull() {
                this[this.tableStoreDetailTable.LOCAL_LANEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StoreDetailTableRowChangeEvent : EventArgs {
            
            private StoreDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public StoreDetailTableRowChangeEvent(StoreDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StoreDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
