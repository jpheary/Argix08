//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ClientVendorDS : DataSet {
        
        private ClientVendorViewTableDataTable tableClientVendorViewTable;
        
        public ClientVendorDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ClientVendorDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientVendorViewTable"] != null)) {
                    this.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientVendorViewTableDataTable ClientVendorViewTable {
            get {
                return this.tableClientVendorViewTable;
            }
        }
        
        public override DataSet Clone() {
            ClientVendorDS cln = ((ClientVendorDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientVendorViewTable"] != null)) {
                this.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(this.Tables["ClientVendorViewTable"]));
            if ((this.tableClientVendorViewTable != null)) {
                this.tableClientVendorViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ClientVendorDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ClientVendorDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientVendorViewTable = new ClientVendorViewTableDataTable();
            this.Tables.Add(this.tableClientVendorViewTable);
        }
        
        private bool ShouldSerializeClientVendorViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientVendorViewTableRowChangeEventHandler(object sender, ClientVendorViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientVendorViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCLIENT_NUMBER;
            
            private DataColumn columnCLIENT_DIV_NUM;
            
            private DataColumn columnVENDOR_NUMBER;
            
            private DataColumn columnZONE_CODE;
            
            private DataColumn columnZONE_TYPE;
            
            private DataColumn columnNON_SAN_LABEL;
            
            private DataColumn columnSAN_LABEL;
            
            private DataColumn columnNAME;
            
            private DataColumn columnADDRESS_LINE1;
            
            private DataColumn columnADDRESS_LINE2;
            
            private DataColumn columnCITY;
            
            private DataColumn columnSTATE;
            
            private DataColumn columnZIP;
            
            private DataColumn columnZIP4;
            
            private DataColumn columnSTATUS;
            
            private DataColumn columnUSERDATA;
            
            private DataColumn columnCLIENTS_VENDOR;
            
            private DataColumn columnLOCAL_LANE;
            
            internal ClientVendorViewTableDataTable() : 
                    base("ClientVendorViewTable") {
                this.InitClass();
            }
            
            internal ClientVendorViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            internal DataColumn CLIENT_DIV_NUMColumn {
                get {
                    return this.columnCLIENT_DIV_NUM;
                }
            }
            
            internal DataColumn VENDOR_NUMBERColumn {
                get {
                    return this.columnVENDOR_NUMBER;
                }
            }
            
            internal DataColumn ZONE_CODEColumn {
                get {
                    return this.columnZONE_CODE;
                }
            }
            
            internal DataColumn ZONE_TYPEColumn {
                get {
                    return this.columnZONE_TYPE;
                }
            }
            
            internal DataColumn NON_SAN_LABELColumn {
                get {
                    return this.columnNON_SAN_LABEL;
                }
            }
            
            internal DataColumn SAN_LABELColumn {
                get {
                    return this.columnSAN_LABEL;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            internal DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            internal DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            internal DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            internal DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            internal DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            internal DataColumn USERDATAColumn {
                get {
                    return this.columnUSERDATA;
                }
            }
            
            internal DataColumn CLIENTS_VENDORColumn {
                get {
                    return this.columnCLIENTS_VENDOR;
                }
            }
            
            internal DataColumn LOCAL_LANEColumn {
                get {
                    return this.columnLOCAL_LANE;
                }
            }
            
            public ClientVendorViewTableRow this[int index] {
                get {
                    return ((ClientVendorViewTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanged;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanging;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleted;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleting;
            
            public void AddClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientVendorViewTableRow AddClientVendorViewTableRow(
                        string CLIENT_NUMBER, 
                        string CLIENT_DIV_NUM, 
                        string VENDOR_NUMBER, 
                        string ZONE_CODE, 
                        string ZONE_TYPE, 
                        string NON_SAN_LABEL, 
                        string SAN_LABEL, 
                        string NAME, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string STATUS, 
                        string USERDATA, 
                        string CLIENTS_VENDOR, 
                        string LOCAL_LANE) {
                ClientVendorViewTableRow rowClientVendorViewTableRow = ((ClientVendorViewTableRow)(this.NewRow()));
                rowClientVendorViewTableRow.ItemArray = new object[] {
                        CLIENT_NUMBER,
                        CLIENT_DIV_NUM,
                        VENDOR_NUMBER,
                        ZONE_CODE,
                        ZONE_TYPE,
                        NON_SAN_LABEL,
                        SAN_LABEL,
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        STATUS,
                        USERDATA,
                        CLIENTS_VENDOR,
                        LOCAL_LANE};
                this.Rows.Add(rowClientVendorViewTableRow);
                return rowClientVendorViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientVendorViewTableDataTable cln = ((ClientVendorViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientVendorViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCLIENT_NUMBER = this.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIV_NUM = this.Columns["CLIENT_DIV_NUM"];
                this.columnVENDOR_NUMBER = this.Columns["VENDOR_NUMBER"];
                this.columnZONE_CODE = this.Columns["ZONE_CODE"];
                this.columnZONE_TYPE = this.Columns["ZONE_TYPE"];
                this.columnNON_SAN_LABEL = this.Columns["NON_SAN_LABEL"];
                this.columnSAN_LABEL = this.Columns["SAN_LABEL"];
                this.columnNAME = this.Columns["NAME"];
                this.columnADDRESS_LINE1 = this.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = this.Columns["ADDRESS_LINE2"];
                this.columnCITY = this.Columns["CITY"];
                this.columnSTATE = this.Columns["STATE"];
                this.columnZIP = this.Columns["ZIP"];
                this.columnZIP4 = this.Columns["ZIP4"];
                this.columnSTATUS = this.Columns["STATUS"];
                this.columnUSERDATA = this.Columns["USERDATA"];
                this.columnCLIENTS_VENDOR = this.Columns["CLIENTS_VENDOR"];
                this.columnLOCAL_LANE = this.Columns["LOCAL_LANE"];
            }
            
            private void InitClass() {
                this.columnCLIENT_NUMBER = new DataColumn("CLIENT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIV_NUM = new DataColumn("CLIENT_DIV_NUM", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENT_DIV_NUM);
                this.columnVENDOR_NUMBER = new DataColumn("VENDOR_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVENDOR_NUMBER);
                this.columnZONE_CODE = new DataColumn("ZONE_CODE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZONE_CODE);
                this.columnZONE_TYPE = new DataColumn("ZONE_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZONE_TYPE);
                this.columnNON_SAN_LABEL = new DataColumn("NON_SAN_LABEL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNON_SAN_LABEL);
                this.columnSAN_LABEL = new DataColumn("SAN_LABEL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSAN_LABEL);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new DataColumn("ADDRESS_LINE1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new DataColumn("ADDRESS_LINE2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new DataColumn("CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY);
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnZIP = new DataColumn("ZIP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP);
                this.columnZIP4 = new DataColumn("ZIP4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP4);
                this.columnSTATUS = new DataColumn("STATUS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATUS);
                this.columnUSERDATA = new DataColumn("USERDATA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSERDATA);
                this.columnCLIENTS_VENDOR = new DataColumn("CLIENTS_VENDOR", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCLIENTS_VENDOR);
                this.columnLOCAL_LANE = new DataColumn("LOCAL_LANE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLOCAL_LANE);
            }
            
            public ClientVendorViewTableRow NewClientVendorViewTableRow() {
                return ((ClientVendorViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientVendorViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientVendorViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientVendorViewTableRowChanged != null)) {
                    this.ClientVendorViewTableRowChanged(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientVendorViewTableRowChanging != null)) {
                    this.ClientVendorViewTableRowChanging(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientVendorViewTableRowDeleted != null)) {
                    this.ClientVendorViewTableRowDeleted(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientVendorViewTableRowDeleting != null)) {
                    this.ClientVendorViewTableRowDeleting(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientVendorViewTableRow : DataRow {
            
            private ClientVendorViewTableDataTable tableClientVendorViewTable;
            
            internal ClientVendorViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(this.Table));
            }
            
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            public string CLIENT_DIV_NUM {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = value;
                }
            }
            
            public string VENDOR_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = value;
                }
            }
            
            public string ZONE_CODE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_CODEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_CODEColumn] = value;
                }
            }
            
            public string ZONE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_TYPEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = value;
                }
            }
            
            public string NON_SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NON_SAN_LABELColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = value;
                }
            }
            
            public string SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.SAN_LABELColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.SAN_LABELColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NAMEColumn] = value;
                }
            }
            
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CITYColumn] = value;
                }
            }
            
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATEColumn] = value;
                }
            }
            
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIPColumn] = value;
                }
            }
            
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIP4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIP4Column] = value;
                }
            }
            
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATUSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATUSColumn] = value;
                }
            }
            
            public string USERDATA {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.USERDATAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.USERDATAColumn] = value;
                }
            }
            
            public string CLIENTS_VENDOR {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = value;
                }
            }
            
            public string LOCAL_LANE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.LOCAL_LANEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = value;
                }
            }
            
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_NUMBERColumn);
            }
            
            public void SetCLIENT_NUMBERNull() {
                this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsCLIENT_DIV_NUMNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn);
            }
            
            public void SetCLIENT_DIV_NUMNull() {
                this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = System.Convert.DBNull;
            }
            
            public bool IsVENDOR_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.VENDOR_NUMBERColumn);
            }
            
            public void SetVENDOR_NUMBERNull() {
                this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsZONE_CODENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_CODEColumn);
            }
            
            public void SetZONE_CODENull() {
                this[this.tableClientVendorViewTable.ZONE_CODEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZONE_TYPENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_TYPEColumn);
            }
            
            public void SetZONE_TYPENull() {
                this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = System.Convert.DBNull;
            }
            
            public bool IsNON_SAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.NON_SAN_LABELColumn);
            }
            
            public void SetNON_SAN_LABELNull() {
                this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = System.Convert.DBNull;
            }
            
            public bool IsSAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.SAN_LABELColumn);
            }
            
            public void SetSAN_LABELNull() {
                this[this.tableClientVendorViewTable.SAN_LABELColumn] = System.Convert.DBNull;
            }
            
            public bool IsNAMENull() {
                return this.IsNull(this.tableClientVendorViewTable.NAMEColumn);
            }
            
            public void SetNAMENull() {
                this[this.tableClientVendorViewTable.NAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE1Column);
            }
            
            public void SetADDRESS_LINE1Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE2Column);
            }
            
            public void SetADDRESS_LINE2Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = System.Convert.DBNull;
            }
            
            public bool IsCITYNull() {
                return this.IsNull(this.tableClientVendorViewTable.CITYColumn);
            }
            
            public void SetCITYNull() {
                this[this.tableClientVendorViewTable.CITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATENull() {
                return this.IsNull(this.tableClientVendorViewTable.STATEColumn);
            }
            
            public void SetSTATENull() {
                this[this.tableClientVendorViewTable.STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIPNull() {
                return this.IsNull(this.tableClientVendorViewTable.ZIPColumn);
            }
            
            public void SetZIPNull() {
                this[this.tableClientVendorViewTable.ZIPColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIP4Null() {
                return this.IsNull(this.tableClientVendorViewTable.ZIP4Column);
            }
            
            public void SetZIP4Null() {
                this[this.tableClientVendorViewTable.ZIP4Column] = System.Convert.DBNull;
            }
            
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableClientVendorViewTable.STATUSColumn);
            }
            
            public void SetSTATUSNull() {
                this[this.tableClientVendorViewTable.STATUSColumn] = System.Convert.DBNull;
            }
            
            public bool IsUSERDATANull() {
                return this.IsNull(this.tableClientVendorViewTable.USERDATAColumn);
            }
            
            public void SetUSERDATANull() {
                this[this.tableClientVendorViewTable.USERDATAColumn] = System.Convert.DBNull;
            }
            
            public bool IsCLIENTS_VENDORNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENTS_VENDORColumn);
            }
            
            public void SetCLIENTS_VENDORNull() {
                this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = System.Convert.DBNull;
            }
            
            public bool IsLOCAL_LANENull() {
                return this.IsNull(this.tableClientVendorViewTable.LOCAL_LANEColumn);
            }
            
            public void SetLOCAL_LANENull() {
                this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientVendorViewTableRowChangeEvent : EventArgs {
            
            private ClientVendorViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientVendorViewTableRowChangeEvent(ClientVendorViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientVendorViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
