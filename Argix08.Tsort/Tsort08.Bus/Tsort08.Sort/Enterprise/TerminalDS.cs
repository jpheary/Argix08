//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TerminalDS : DataSet {
        
        private LocalTerminalTableDataTable tableLocalTerminalTable;
        
        private TerminalDetailTableDataTable tableTerminalDetailTable;
        
        public TerminalDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TerminalDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["LocalTerminalTable"] != null)) {
                    this.Tables.Add(new LocalTerminalTableDataTable(ds.Tables["LocalTerminalTable"]));
                }
                if ((ds.Tables["TerminalDetailTable"] != null)) {
                    this.Tables.Add(new TerminalDetailTableDataTable(ds.Tables["TerminalDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalTerminalTableDataTable LocalTerminalTable {
            get {
                return this.tableLocalTerminalTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalDetailTableDataTable TerminalDetailTable {
            get {
                return this.tableTerminalDetailTable;
            }
        }
        
        public override DataSet Clone() {
            TerminalDS cln = ((TerminalDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["LocalTerminalTable"] != null)) {
                this.Tables.Add(new LocalTerminalTableDataTable(ds.Tables["LocalTerminalTable"]));
            }
            if ((ds.Tables["TerminalDetailTable"] != null)) {
                this.Tables.Add(new TerminalDetailTableDataTable(ds.Tables["TerminalDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableLocalTerminalTable = ((LocalTerminalTableDataTable)(this.Tables["LocalTerminalTable"]));
            if ((this.tableLocalTerminalTable != null)) {
                this.tableLocalTerminalTable.InitVars();
            }
            this.tableTerminalDetailTable = ((TerminalDetailTableDataTable)(this.Tables["TerminalDetailTable"]));
            if ((this.tableTerminalDetailTable != null)) {
                this.tableTerminalDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "TerminalDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TerminalDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableLocalTerminalTable = new LocalTerminalTableDataTable();
            this.Tables.Add(this.tableLocalTerminalTable);
            this.tableTerminalDetailTable = new TerminalDetailTableDataTable();
            this.Tables.Add(this.tableTerminalDetailTable);
        }
        
        private bool ShouldSerializeLocalTerminalTable() {
            return false;
        }
        
        private bool ShouldSerializeTerminalDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void LocalTerminalTableRowChangeEventHandler(object sender, LocalTerminalTableRowChangeEvent e);
        
        public delegate void TerminalDetailTableRowChangeEventHandler(object sender, TerminalDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnDBServerName;
            
            private DataColumn columnLinkedServerName;
            
            private DataColumn columnDBType;
            
            private DataColumn columnAgentID;
            
            private DataColumn columnAgentNumber;
            
            private DataColumn columnShipperID;
            
            private DataColumn columnIsActive;
            
            internal LocalTerminalTableDataTable() : 
                    base("LocalTerminalTable") {
                this.InitClass();
            }
            
            internal LocalTerminalTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn DBServerNameColumn {
                get {
                    return this.columnDBServerName;
                }
            }
            
            internal DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            internal DataColumn DBTypeColumn {
                get {
                    return this.columnDBType;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            internal DataColumn ShipperIDColumn {
                get {
                    return this.columnShipperID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            public LocalTerminalTableRow this[int index] {
                get {
                    return ((LocalTerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowChanged;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowChanging;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowDeleted;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowDeleting;
            
            public void AddLocalTerminalTableRow(LocalTerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            public LocalTerminalTableRow AddLocalTerminalTableRow(int TerminalID, string Number, string Description, string DBServerName, string LinkedServerName, string DBType, int AgentID, string AgentNumber, string ShipperID, System.Byte IsActive) {
                LocalTerminalTableRow rowLocalTerminalTableRow = ((LocalTerminalTableRow)(this.NewRow()));
                rowLocalTerminalTableRow.ItemArray = new object[] {
                        TerminalID,
                        Number,
                        Description,
                        DBServerName,
                        LinkedServerName,
                        DBType,
                        AgentID,
                        AgentNumber,
                        ShipperID,
                        IsActive};
                this.Rows.Add(rowLocalTerminalTableRow);
                return rowLocalTerminalTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LocalTerminalTableDataTable cln = ((LocalTerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LocalTerminalTableDataTable();
            }
            
            internal void InitVars() {
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnDBServerName = this.Columns["DBServerName"];
                this.columnLinkedServerName = this.Columns["LinkedServerName"];
                this.columnDBType = this.Columns["DBType"];
                this.columnAgentID = this.Columns["AgentID"];
                this.columnAgentNumber = this.Columns["AgentNumber"];
                this.columnShipperID = this.Columns["ShipperID"];
                this.columnIsActive = this.Columns["IsActive"];
            }
            
            private void InitClass() {
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnDBServerName = new DataColumn("DBServerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDBServerName);
                this.columnLinkedServerName = new DataColumn("LinkedServerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinkedServerName);
                this.columnDBType = new DataColumn("DBType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDBType);
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnAgentNumber = new DataColumn("AgentNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentNumber);
                this.columnShipperID = new DataColumn("ShipperID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipperID);
                this.columnIsActive = new DataColumn("IsActive", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnTerminalID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnDBServerName.AllowDBNull = false;
                this.columnLinkedServerName.AllowDBNull = false;
                this.columnDBType.AllowDBNull = false;
                this.columnAgentID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnShipperID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
            }
            
            public LocalTerminalTableRow NewLocalTerminalTableRow() {
                return ((LocalTerminalTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LocalTerminalTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LocalTerminalTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LocalTerminalTableRowChanged != null)) {
                    this.LocalTerminalTableRowChanged(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LocalTerminalTableRowChanging != null)) {
                    this.LocalTerminalTableRowChanging(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LocalTerminalTableRowDeleted != null)) {
                    this.LocalTerminalTableRowDeleted(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LocalTerminalTableRowDeleting != null)) {
                    this.LocalTerminalTableRowDeleting(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLocalTerminalTableRow(LocalTerminalTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableRow : DataRow {
            
            private LocalTerminalTableDataTable tableLocalTerminalTable;
            
            internal LocalTerminalTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocalTerminalTable = ((LocalTerminalTableDataTable)(this.Table));
            }
            
            public int TerminalID {
                get {
                    return ((int)(this[this.tableLocalTerminalTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.TerminalIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.NumberColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DescriptionColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DescriptionColumn] = value;
                }
            }
            
            public string DBServerName {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DBServerNameColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DBServerNameColumn] = value;
                }
            }
            
            public string LinkedServerName {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.LinkedServerNameColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.LinkedServerNameColumn] = value;
                }
            }
            
            public string DBType {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DBTypeColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DBTypeColumn] = value;
                }
            }
            
            public int AgentID {
                get {
                    return ((int)(this[this.tableLocalTerminalTable.AgentIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.AgentIDColumn] = value;
                }
            }
            
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.AgentNumberColumn] = value;
                }
            }
            
            public string ShipperID {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.ShipperIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.ShipperIDColumn] = value;
                }
            }
            
            public System.Byte IsActive {
                get {
                    return ((System.Byte)(this[this.tableLocalTerminalTable.IsActiveColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.IsActiveColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableRowChangeEvent : EventArgs {
            
            private LocalTerminalTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public LocalTerminalTableRowChangeEvent(LocalTerminalTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LocalTerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCODE;
            
            private DataColumn columnDESCRIPTION;
            
            private DataColumn columnCOMPANY_NAME;
            
            private DataColumn columnADDRESS_LINE1;
            
            private DataColumn columnADDRESS_LINE2;
            
            private DataColumn columnCITY;
            
            private DataColumn columnSTATE;
            
            private DataColumn columnZIP;
            
            private DataColumn columnZIP4;
            
            private DataColumn columnPHONE;
            
            private DataColumn columnTL_CHARACTER;
            
            private DataColumn columnTERMINALID;
            
            internal TerminalDetailTableDataTable() : 
                    base("TerminalDetailTable") {
                this.InitClass();
            }
            
            internal TerminalDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            internal DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            internal DataColumn COMPANY_NAMEColumn {
                get {
                    return this.columnCOMPANY_NAME;
                }
            }
            
            internal DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            internal DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            internal DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            internal DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            internal DataColumn PHONEColumn {
                get {
                    return this.columnPHONE;
                }
            }
            
            internal DataColumn TL_CHARACTERColumn {
                get {
                    return this.columnTL_CHARACTER;
                }
            }
            
            internal DataColumn TERMINALIDColumn {
                get {
                    return this.columnTERMINALID;
                }
            }
            
            public TerminalDetailTableRow this[int index] {
                get {
                    return ((TerminalDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowChanged;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowChanging;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowDeleted;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowDeleting;
            
            public void AddTerminalDetailTableRow(TerminalDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public TerminalDetailTableRow AddTerminalDetailTableRow(string CODE, string DESCRIPTION, string COMPANY_NAME, string ADDRESS_LINE1, string ADDRESS_LINE2, string CITY, string STATE, string ZIP, string ZIP4, string PHONE, string TL_CHARACTER, int TERMINALID) {
                TerminalDetailTableRow rowTerminalDetailTableRow = ((TerminalDetailTableRow)(this.NewRow()));
                rowTerminalDetailTableRow.ItemArray = new object[] {
                        CODE,
                        DESCRIPTION,
                        COMPANY_NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        PHONE,
                        TL_CHARACTER,
                        TERMINALID};
                this.Rows.Add(rowTerminalDetailTableRow);
                return rowTerminalDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerminalDetailTableDataTable cln = ((TerminalDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerminalDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCODE = this.Columns["CODE"];
                this.columnDESCRIPTION = this.Columns["DESCRIPTION"];
                this.columnCOMPANY_NAME = this.Columns["COMPANY_NAME"];
                this.columnADDRESS_LINE1 = this.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = this.Columns["ADDRESS_LINE2"];
                this.columnCITY = this.Columns["CITY"];
                this.columnSTATE = this.Columns["STATE"];
                this.columnZIP = this.Columns["ZIP"];
                this.columnZIP4 = this.Columns["ZIP4"];
                this.columnPHONE = this.Columns["PHONE"];
                this.columnTL_CHARACTER = this.Columns["TL_CHARACTER"];
                this.columnTERMINALID = this.Columns["TERMINALID"];
            }
            
            private void InitClass() {
                this.columnCODE = new DataColumn("CODE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCODE);
                this.columnDESCRIPTION = new DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDESCRIPTION);
                this.columnCOMPANY_NAME = new DataColumn("COMPANY_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCOMPANY_NAME);
                this.columnADDRESS_LINE1 = new DataColumn("ADDRESS_LINE1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new DataColumn("ADDRESS_LINE2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new DataColumn("CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY);
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnZIP = new DataColumn("ZIP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP);
                this.columnZIP4 = new DataColumn("ZIP4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP4);
                this.columnPHONE = new DataColumn("PHONE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPHONE);
                this.columnTL_CHARACTER = new DataColumn("TL_CHARACTER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTL_CHARACTER);
                this.columnTERMINALID = new DataColumn("TERMINALID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTERMINALID);
                this.columnCODE.AllowDBNull = false;
                this.columnDESCRIPTION.AllowDBNull = false;
                this.columnCOMPANY_NAME.AllowDBNull = false;
                this.columnADDRESS_LINE1.AllowDBNull = false;
                this.columnCITY.AllowDBNull = false;
                this.columnSTATE.AllowDBNull = false;
                this.columnZIP.AllowDBNull = false;
                this.columnTL_CHARACTER.AllowDBNull = false;
                this.columnTERMINALID.AllowDBNull = false;
            }
            
            public TerminalDetailTableRow NewTerminalDetailTableRow() {
                return ((TerminalDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerminalDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerminalDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalDetailTableRowChanged != null)) {
                    this.TerminalDetailTableRowChanged(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalDetailTableRowChanging != null)) {
                    this.TerminalDetailTableRowChanging(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalDetailTableRowDeleted != null)) {
                    this.TerminalDetailTableRowDeleted(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalDetailTableRowDeleting != null)) {
                    this.TerminalDetailTableRowDeleting(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerminalDetailTableRow(TerminalDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableRow : DataRow {
            
            private TerminalDetailTableDataTable tableTerminalDetailTable;
            
            internal TerminalDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalDetailTable = ((TerminalDetailTableDataTable)(this.Table));
            }
            
            public string CODE {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.CODEColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.CODEColumn] = value;
                }
            }
            
            public string DESCRIPTION {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.DESCRIPTIONColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.DESCRIPTIONColumn] = value;
                }
            }
            
            public string COMPANY_NAME {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.COMPANY_NAMEColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.COMPANY_NAMEColumn] = value;
                }
            }
            
            public string ADDRESS_LINE1 {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.ADDRESS_LINE1Column]));
                }
                set {
                    this[this.tableTerminalDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            public string CITY {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.CITYColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.CITYColumn] = value;
                }
            }
            
            public string STATE {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.STATEColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.STATEColumn] = value;
                }
            }
            
            public string ZIP {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.ZIPColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.ZIPColumn] = value;
                }
            }
            
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.ZIP4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.ZIP4Column] = value;
                }
            }
            
            public string PHONE {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.PHONEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.PHONEColumn] = value;
                }
            }
            
            public string TL_CHARACTER {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.TL_CHARACTERColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.TL_CHARACTERColumn] = value;
                }
            }
            
            public int TERMINALID {
                get {
                    return ((int)(this[this.tableTerminalDetailTable.TERMINALIDColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.TERMINALIDColumn] = value;
                }
            }
            
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableTerminalDetailTable.ADDRESS_LINE2Column);
            }
            
            public void SetADDRESS_LINE2Null() {
                this[this.tableTerminalDetailTable.ADDRESS_LINE2Column] = System.Convert.DBNull;
            }
            
            public bool IsZIP4Null() {
                return this.IsNull(this.tableTerminalDetailTable.ZIP4Column);
            }
            
            public void SetZIP4Null() {
                this[this.tableTerminalDetailTable.ZIP4Column] = System.Convert.DBNull;
            }
            
            public bool IsPHONENull() {
                return this.IsNull(this.tableTerminalDetailTable.PHONEColumn);
            }
            
            public void SetPHONENull() {
                this[this.tableTerminalDetailTable.PHONEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableRowChangeEvent : EventArgs {
            
            private TerminalDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerminalDetailTableRowChangeEvent(TerminalDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerminalDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
