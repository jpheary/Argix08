//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ClientDS : DataSet {
        
        private ClientDetailTableDataTable tableClientDetailTable;
        
        public ClientDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ClientDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientDetailTable"] != null)) {
                    this.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientDetailTableDataTable ClientDetailTable {
            get {
                return this.tableClientDetailTable;
            }
        }
        
        public override DataSet Clone() {
            ClientDS cln = ((ClientDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientDetailTable"] != null)) {
                this.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientDetailTable = ((ClientDetailTableDataTable)(this.Tables["ClientDetailTable"]));
            if ((this.tableClientDetailTable != null)) {
                this.tableClientDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ClientDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ClientDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientDetailTable = new ClientDetailTableDataTable();
            this.Tables.Add(this.tableClientDetailTable);
        }
        
        private bool ShouldSerializeClientDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientDetailTableRowChangeEventHandler(object sender, ClientDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientNumber;
            
            private DataColumn columnNUMBER;
            
            private DataColumn columnDIVISION;
            
            private DataColumn columnNAME;
            
            private DataColumn columnSTATUS;
            
            private DataColumn columnUPS_SHIPPER_NBR;
            
            private DataColumn columnABBREVIATION;
            
            private DataColumn columnADDRESS_LINE1;
            
            private DataColumn columnADDRESS_LINE2;
            
            private DataColumn columnCITY;
            
            private DataColumn columnSTATE;
            
            private DataColumn columnZIP;
            
            private DataColumn columnZIP4;
            
            private DataColumn columnDELIVERY_BILL_TYPE;
            
            private DataColumn columnCARTON_COMMODITY;
            
            private DataColumn columnDELIVERY_BILL;
            
            private DataColumn columnDBILL_COPIES;
            
            private DataColumn columnIsSan;
            
            private DataColumn columnInvoiceProgram;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnFax;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnBLNumberOnInvoice;
            
            private DataColumn columnARNumber;
            
            private DataColumn columnPickupZip;
            
            private DataColumn columnManifestPerTrailer;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            internal ClientDetailTableDataTable() : 
                    base("ClientDetailTable") {
                this.InitClass();
            }
            
            internal ClientDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            internal DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            internal DataColumn DIVISIONColumn {
                get {
                    return this.columnDIVISION;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            internal DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            internal DataColumn UPS_SHIPPER_NBRColumn {
                get {
                    return this.columnUPS_SHIPPER_NBR;
                }
            }
            
            internal DataColumn ABBREVIATIONColumn {
                get {
                    return this.columnABBREVIATION;
                }
            }
            
            internal DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            internal DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            internal DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            internal DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            internal DataColumn DELIVERY_BILL_TYPEColumn {
                get {
                    return this.columnDELIVERY_BILL_TYPE;
                }
            }
            
            internal DataColumn CARTON_COMMODITYColumn {
                get {
                    return this.columnCARTON_COMMODITY;
                }
            }
            
            internal DataColumn DELIVERY_BILLColumn {
                get {
                    return this.columnDELIVERY_BILL;
                }
            }
            
            internal DataColumn DBILL_COPIESColumn {
                get {
                    return this.columnDBILL_COPIES;
                }
            }
            
            internal DataColumn IsSanColumn {
                get {
                    return this.columnIsSan;
                }
            }
            
            internal DataColumn InvoiceProgramColumn {
                get {
                    return this.columnInvoiceProgram;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn BLNumberOnInvoiceColumn {
                get {
                    return this.columnBLNumberOnInvoice;
                }
            }
            
            internal DataColumn ARNumberColumn {
                get {
                    return this.columnARNumber;
                }
            }
            
            internal DataColumn PickupZipColumn {
                get {
                    return this.columnPickupZip;
                }
            }
            
            internal DataColumn ManifestPerTrailerColumn {
                get {
                    return this.columnManifestPerTrailer;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            public ClientDetailTableRow this[int index] {
                get {
                    return ((ClientDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanged;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanging;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleted;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleting;
            
            public void AddClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientDetailTableRow AddClientDetailTableRow(
                        int ClientID, 
                        string ClientNumber, 
                        string NUMBER, 
                        string DIVISION, 
                        string NAME, 
                        string STATUS, 
                        string UPS_SHIPPER_NBR, 
                        string ABBREVIATION, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string DELIVERY_BILL_TYPE, 
                        string CARTON_COMMODITY, 
                        string DELIVERY_BILL, 
                        short DBILL_COPIES, 
                        string IsSan, 
                        string InvoiceProgram, 
                        string ContactName, 
                        string Phone, 
                        string Fax, 
                        string Mnemonic, 
                        string BLNumberOnInvoice, 
                        string ARNumber, 
                        string PickupZip, 
                        string ManifestPerTrailer, 
                        System.DateTime LastUpdated, 
                        string UserID) {
                ClientDetailTableRow rowClientDetailTableRow = ((ClientDetailTableRow)(this.NewRow()));
                rowClientDetailTableRow.ItemArray = new object[] {
                        ClientID,
                        ClientNumber,
                        NUMBER,
                        DIVISION,
                        NAME,
                        STATUS,
                        UPS_SHIPPER_NBR,
                        ABBREVIATION,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        DELIVERY_BILL_TYPE,
                        CARTON_COMMODITY,
                        DELIVERY_BILL,
                        DBILL_COPIES,
                        IsSan,
                        InvoiceProgram,
                        ContactName,
                        Phone,
                        Fax,
                        Mnemonic,
                        BLNumberOnInvoice,
                        ARNumber,
                        PickupZip,
                        ManifestPerTrailer,
                        LastUpdated,
                        UserID};
                this.Rows.Add(rowClientDetailTableRow);
                return rowClientDetailTableRow;
            }
            
            public ClientDetailTableRow FindByNUMBERDIVISION(string NUMBER, string DIVISION) {
                return ((ClientDetailTableRow)(this.Rows.Find(new object[] {
                            NUMBER,
                            DIVISION})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientDetailTableDataTable cln = ((ClientDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientNumber = this.Columns["ClientNumber"];
                this.columnNUMBER = this.Columns["NUMBER"];
                this.columnDIVISION = this.Columns["DIVISION"];
                this.columnNAME = this.Columns["NAME"];
                this.columnSTATUS = this.Columns["STATUS"];
                this.columnUPS_SHIPPER_NBR = this.Columns["UPS_SHIPPER_NBR"];
                this.columnABBREVIATION = this.Columns["ABBREVIATION"];
                this.columnADDRESS_LINE1 = this.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = this.Columns["ADDRESS_LINE2"];
                this.columnCITY = this.Columns["CITY"];
                this.columnSTATE = this.Columns["STATE"];
                this.columnZIP = this.Columns["ZIP"];
                this.columnZIP4 = this.Columns["ZIP4"];
                this.columnDELIVERY_BILL_TYPE = this.Columns["DELIVERY_BILL_TYPE"];
                this.columnCARTON_COMMODITY = this.Columns["CARTON_COMMODITY"];
                this.columnDELIVERY_BILL = this.Columns["DELIVERY_BILL"];
                this.columnDBILL_COPIES = this.Columns["DBILL_COPIES"];
                this.columnIsSan = this.Columns["IsSan"];
                this.columnInvoiceProgram = this.Columns["InvoiceProgram"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnFax = this.Columns["Fax"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnBLNumberOnInvoice = this.Columns["BLNumberOnInvoice"];
                this.columnARNumber = this.Columns["ARNumber"];
                this.columnPickupZip = this.Columns["PickupZip"];
                this.columnManifestPerTrailer = this.Columns["ManifestPerTrailer"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientNumber = new DataColumn("ClientNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientNumber);
                this.columnNUMBER = new DataColumn("NUMBER", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER);
                this.columnDIVISION = new DataColumn("DIVISION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDIVISION);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.columnSTATUS = new DataColumn("STATUS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATUS);
                this.columnUPS_SHIPPER_NBR = new DataColumn("UPS_SHIPPER_NBR", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUPS_SHIPPER_NBR);
                this.columnABBREVIATION = new DataColumn("ABBREVIATION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnABBREVIATION);
                this.columnADDRESS_LINE1 = new DataColumn("ADDRESS_LINE1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new DataColumn("ADDRESS_LINE2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new DataColumn("CITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCITY);
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnZIP = new DataColumn("ZIP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP);
                this.columnZIP4 = new DataColumn("ZIP4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZIP4);
                this.columnDELIVERY_BILL_TYPE = new DataColumn("DELIVERY_BILL_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDELIVERY_BILL_TYPE);
                this.columnCARTON_COMMODITY = new DataColumn("CARTON_COMMODITY", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCARTON_COMMODITY);
                this.columnDELIVERY_BILL = new DataColumn("DELIVERY_BILL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDELIVERY_BILL);
                this.columnDBILL_COPIES = new DataColumn("DBILL_COPIES", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDBILL_COPIES);
                this.columnIsSan = new DataColumn("IsSan", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSan);
                this.columnInvoiceProgram = new DataColumn("InvoiceProgram", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceProgram);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnBLNumberOnInvoice = new DataColumn("BLNumberOnInvoice", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBLNumberOnInvoice);
                this.columnARNumber = new DataColumn("ARNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnARNumber);
                this.columnPickupZip = new DataColumn("PickupZip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPickupZip);
                this.columnManifestPerTrailer = new DataColumn("ManifestPerTrailer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnManifestPerTrailer);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.Constraints.Add(new UniqueConstraint("ClientDSKey1", new DataColumn[] {
                                this.columnNUMBER,
                                this.columnDIVISION}, true));
                this.columnNUMBER.AllowDBNull = false;
                this.columnDIVISION.AllowDBNull = false;
            }
            
            public ClientDetailTableRow NewClientDetailTableRow() {
                return ((ClientDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientDetailTableRowChanged != null)) {
                    this.ClientDetailTableRowChanged(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientDetailTableRowChanging != null)) {
                    this.ClientDetailTableRowChanging(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientDetailTableRowDeleted != null)) {
                    this.ClientDetailTableRowDeleted(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientDetailTableRowDeleting != null)) {
                    this.ClientDetailTableRowDeleting(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableRow : DataRow {
            
            private ClientDetailTableDataTable tableClientDetailTable;
            
            internal ClientDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientDetailTable = ((ClientDetailTableDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientDetailTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ClientIDColumn] = value;
                }
            }
            
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ClientNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ClientNumberColumn] = value;
                }
            }
            
            public string NUMBER {
                get {
                    return ((string)(this[this.tableClientDetailTable.NUMBERColumn]));
                }
                set {
                    this[this.tableClientDetailTable.NUMBERColumn] = value;
                }
            }
            
            public string DIVISION {
                get {
                    return ((string)(this[this.tableClientDetailTable.DIVISIONColumn]));
                }
                set {
                    this[this.tableClientDetailTable.DIVISIONColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.NAMEColumn] = value;
                }
            }
            
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.STATUSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.STATUSColumn] = value;
                }
            }
            
            public string UPS_SHIPPER_NBR {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn] = value;
                }
            }
            
            public string ABBREVIATION {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ABBREVIATIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ABBREVIATIONColumn] = value;
                }
            }
            
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ADDRESS_LINE1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.CITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.CITYColumn] = value;
                }
            }
            
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.STATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.STATEColumn] = value;
                }
            }
            
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ZIPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ZIPColumn] = value;
                }
            }
            
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ZIP4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ZIP4Column] = value;
                }
            }
            
            public string DELIVERY_BILL_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn] = value;
                }
            }
            
            public string CARTON_COMMODITY {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.CARTON_COMMODITYColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.CARTON_COMMODITYColumn] = value;
                }
            }
            
            public string DELIVERY_BILL {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.DELIVERY_BILLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DELIVERY_BILLColumn] = value;
                }
            }
            
            public short DBILL_COPIES {
                get {
                    try {
                        return ((short)(this[this.tableClientDetailTable.DBILL_COPIESColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DBILL_COPIESColumn] = value;
                }
            }
            
            public string IsSan {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.IsSanColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.IsSanColumn] = value;
                }
            }
            
            public string InvoiceProgram {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.InvoiceProgramColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.InvoiceProgramColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.FaxColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.MnemonicColumn] = value;
                }
            }
            
            public string BLNumberOnInvoice {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.BLNumberOnInvoiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.BLNumberOnInvoiceColumn] = value;
                }
            }
            
            public string ARNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ARNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ARNumberColumn] = value;
                }
            }
            
            public string PickupZip {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PickupZipColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PickupZipColumn] = value;
                }
            }
            
            public string ManifestPerTrailer {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ManifestPerTrailerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ManifestPerTrailerColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientDetailTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.UserIDColumn] = value;
                }
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientDetailTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableClientDetailTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableClientDetailTable.ClientNumberColumn);
            }
            
            public void SetClientNumberNull() {
                this[this.tableClientDetailTable.ClientNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsNAMENull() {
                return this.IsNull(this.tableClientDetailTable.NAMEColumn);
            }
            
            public void SetNAMENull() {
                this[this.tableClientDetailTable.NAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableClientDetailTable.STATUSColumn);
            }
            
            public void SetSTATUSNull() {
                this[this.tableClientDetailTable.STATUSColumn] = System.Convert.DBNull;
            }
            
            public bool IsUPS_SHIPPER_NBRNull() {
                return this.IsNull(this.tableClientDetailTable.UPS_SHIPPER_NBRColumn);
            }
            
            public void SetUPS_SHIPPER_NBRNull() {
                this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn] = System.Convert.DBNull;
            }
            
            public bool IsABBREVIATIONNull() {
                return this.IsNull(this.tableClientDetailTable.ABBREVIATIONColumn);
            }
            
            public void SetABBREVIATIONNull() {
                this[this.tableClientDetailTable.ABBREVIATIONColumn] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableClientDetailTable.ADDRESS_LINE1Column);
            }
            
            public void SetADDRESS_LINE1Null() {
                this[this.tableClientDetailTable.ADDRESS_LINE1Column] = System.Convert.DBNull;
            }
            
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableClientDetailTable.ADDRESS_LINE2Column);
            }
            
            public void SetADDRESS_LINE2Null() {
                this[this.tableClientDetailTable.ADDRESS_LINE2Column] = System.Convert.DBNull;
            }
            
            public bool IsCITYNull() {
                return this.IsNull(this.tableClientDetailTable.CITYColumn);
            }
            
            public void SetCITYNull() {
                this[this.tableClientDetailTable.CITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTATENull() {
                return this.IsNull(this.tableClientDetailTable.STATEColumn);
            }
            
            public void SetSTATENull() {
                this[this.tableClientDetailTable.STATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIPNull() {
                return this.IsNull(this.tableClientDetailTable.ZIPColumn);
            }
            
            public void SetZIPNull() {
                this[this.tableClientDetailTable.ZIPColumn] = System.Convert.DBNull;
            }
            
            public bool IsZIP4Null() {
                return this.IsNull(this.tableClientDetailTable.ZIP4Column);
            }
            
            public void SetZIP4Null() {
                this[this.tableClientDetailTable.ZIP4Column] = System.Convert.DBNull;
            }
            
            public bool IsDELIVERY_BILL_TYPENull() {
                return this.IsNull(this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn);
            }
            
            public void SetDELIVERY_BILL_TYPENull() {
                this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn] = System.Convert.DBNull;
            }
            
            public bool IsCARTON_COMMODITYNull() {
                return this.IsNull(this.tableClientDetailTable.CARTON_COMMODITYColumn);
            }
            
            public void SetCARTON_COMMODITYNull() {
                this[this.tableClientDetailTable.CARTON_COMMODITYColumn] = System.Convert.DBNull;
            }
            
            public bool IsDELIVERY_BILLNull() {
                return this.IsNull(this.tableClientDetailTable.DELIVERY_BILLColumn);
            }
            
            public void SetDELIVERY_BILLNull() {
                this[this.tableClientDetailTable.DELIVERY_BILLColumn] = System.Convert.DBNull;
            }
            
            public bool IsDBILL_COPIESNull() {
                return this.IsNull(this.tableClientDetailTable.DBILL_COPIESColumn);
            }
            
            public void SetDBILL_COPIESNull() {
                this[this.tableClientDetailTable.DBILL_COPIESColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsSanNull() {
                return this.IsNull(this.tableClientDetailTable.IsSanColumn);
            }
            
            public void SetIsSanNull() {
                this[this.tableClientDetailTable.IsSanColumn] = System.Convert.DBNull;
            }
            
            public bool IsInvoiceProgramNull() {
                return this.IsNull(this.tableClientDetailTable.InvoiceProgramColumn);
            }
            
            public void SetInvoiceProgramNull() {
                this[this.tableClientDetailTable.InvoiceProgramColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableClientDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableClientDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableClientDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableClientDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableClientDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableClientDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableClientDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableClientDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsBLNumberOnInvoiceNull() {
                return this.IsNull(this.tableClientDetailTable.BLNumberOnInvoiceColumn);
            }
            
            public void SetBLNumberOnInvoiceNull() {
                this[this.tableClientDetailTable.BLNumberOnInvoiceColumn] = System.Convert.DBNull;
            }
            
            public bool IsARNumberNull() {
                return this.IsNull(this.tableClientDetailTable.ARNumberColumn);
            }
            
            public void SetARNumberNull() {
                this[this.tableClientDetailTable.ARNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsPickupZipNull() {
                return this.IsNull(this.tableClientDetailTable.PickupZipColumn);
            }
            
            public void SetPickupZipNull() {
                this[this.tableClientDetailTable.PickupZipColumn] = System.Convert.DBNull;
            }
            
            public bool IsManifestPerTrailerNull() {
                return this.IsNull(this.tableClientDetailTable.ManifestPerTrailerColumn);
            }
            
            public void SetManifestPerTrailerNull() {
                this[this.tableClientDetailTable.ManifestPerTrailerColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableClientDetailTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableClientDetailTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableClientDetailTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableClientDetailTable.UserIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableRowChangeEvent : EventArgs {
            
            private ClientDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientDetailTableRowChangeEvent(ClientDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
