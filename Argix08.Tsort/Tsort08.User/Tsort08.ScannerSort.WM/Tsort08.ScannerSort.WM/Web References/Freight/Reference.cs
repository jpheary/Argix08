//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4963
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.4963.
// 
namespace Argix.Freight {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ScannerServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ScannerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ScannerService() {
            this.Url = "http://rgxvmweb/SortServices/ScannerService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHelloWorld(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HelloWorld", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndHelloWorld(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetScannerAssignment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ScannerAssignmentDS GetScannerAssignment(string scannerNumber) {
            object[] results = this.Invoke("GetScannerAssignment", new object[] {
                        scannerNumber});
            return ((ScannerAssignmentDS)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScannerAssignment(string scannerNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScannerAssignment", new object[] {
                        scannerNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public ScannerAssignmentDS EndGetScannerAssignment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ScannerAssignmentDS)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSortedItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateSortedItem(ScannedItemDS items) {
            object[] results = this.Invoke("CreateSortedItem", new object[] {
                        items});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSortedItem(ScannedItemDS items, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSortedItem", new object[] {
                        items}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCreateSortedItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ScannerAssignmentDS")]
    public partial class ScannerAssignmentDS : global::System.Data.DataSet {
        
        private ScannerAssignmentTableDataTable tableScannerAssignmentTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannerAssignmentDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannerAssignmentTableDataTable ScannerAssignmentTable {
            get {
                return this.tableScannerAssignmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ScannerAssignmentDS cln = ((ScannerAssignmentDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScannerAssignmentTable"] != null)) {
                    base.Tables.Add(new ScannerAssignmentTableDataTable(ds.Tables["ScannerAssignmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableScannerAssignmentTable = ((ScannerAssignmentTableDataTable)(base.Tables["ScannerAssignmentTable"]));
            if ((initTable == true)) {
                if ((this.tableScannerAssignmentTable != null)) {
                    this.tableScannerAssignmentTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ScannerAssignmentDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ScannerAssignmentDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScannerAssignmentTable = new ScannerAssignmentTableDataTable();
            base.Tables.Add(this.tableScannerAssignmentTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScannerAssignmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ScannerAssignmentDS ds = new ScannerAssignmentDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ScannerAssignmentTableRowChangeEventHandler(object sender, ScannerAssignmentTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScannerAssignmentTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnScannerID;
            
            private global::System.Data.DataColumn columnScannerNumber;
            
            private global::System.Data.DataColumn columnFreightID;
            
            private global::System.Data.DataColumn columnTerminalID;
            
            private global::System.Data.DataColumn columnClientNumber;
            
            private global::System.Data.DataColumn columnClientDivisionNumber;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnSortTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableDataTable() {
                this.TableName = "ScannerAssignmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannerAssignmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannerIDColumn {
                get {
                    return this.columnScannerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannerNumberColumn {
                get {
                    return this.columnScannerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FreightIDColumn {
                get {
                    return this.columnFreightID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientDivisionNumberColumn {
                get {
                    return this.columnClientDivisionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableRow this[int index] {
                get {
                    return ((ScannerAssignmentTableRow)(this.Rows[index]));
                }
            }
            
            public event ScannerAssignmentTableRowChangeEventHandler ScannerAssignmentTableRowChanging;
            
            public event ScannerAssignmentTableRowChangeEventHandler ScannerAssignmentTableRowChanged;
            
            public event ScannerAssignmentTableRowChangeEventHandler ScannerAssignmentTableRowDeleting;
            
            public event ScannerAssignmentTableRowChangeEventHandler ScannerAssignmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScannerAssignmentTableRow(ScannerAssignmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableRow AddScannerAssignmentTableRow(string ScannerID, string ScannerNumber, string FreightID, int TerminalID, string ClientNumber, string ClientDivisionNumber, int Cartons, int SortTypeID) {
                ScannerAssignmentTableRow rowScannerAssignmentTableRow = ((ScannerAssignmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ScannerID,
                        ScannerNumber,
                        FreightID,
                        TerminalID,
                        ClientNumber,
                        ClientDivisionNumber,
                        Cartons,
                        SortTypeID};
                rowScannerAssignmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScannerAssignmentTableRow);
                return rowScannerAssignmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScannerAssignmentTableDataTable cln = ((ScannerAssignmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScannerAssignmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScannerID = base.Columns["ScannerID"];
                this.columnScannerNumber = base.Columns["ScannerNumber"];
                this.columnFreightID = base.Columns["FreightID"];
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnClientDivisionNumber = base.Columns["ClientDivisionNumber"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnSortTypeID = base.Columns["SortTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScannerID = new global::System.Data.DataColumn("ScannerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannerID);
                this.columnScannerNumber = new global::System.Data.DataColumn("ScannerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannerNumber);
                this.columnFreightID = new global::System.Data.DataColumn("FreightID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightID);
                this.columnTerminalID = new global::System.Data.DataColumn("TerminalID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnClientNumber = new global::System.Data.DataColumn("ClientNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnClientDivisionNumber = new global::System.Data.DataColumn("ClientDivisionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientDivisionNumber);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnSortTypeID = new global::System.Data.DataColumn("SortTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortTypeID);
                this.columnScannerID.AllowDBNull = false;
                this.columnFreightID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableRow NewScannerAssignmentTableRow() {
                return ((ScannerAssignmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScannerAssignmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScannerAssignmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScannerAssignmentTableRowChanged != null)) {
                    this.ScannerAssignmentTableRowChanged(this, new ScannerAssignmentTableRowChangeEvent(((ScannerAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScannerAssignmentTableRowChanging != null)) {
                    this.ScannerAssignmentTableRowChanging(this, new ScannerAssignmentTableRowChangeEvent(((ScannerAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScannerAssignmentTableRowDeleted != null)) {
                    this.ScannerAssignmentTableRowDeleted(this, new ScannerAssignmentTableRowChangeEvent(((ScannerAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScannerAssignmentTableRowDeleting != null)) {
                    this.ScannerAssignmentTableRowDeleting(this, new ScannerAssignmentTableRowChangeEvent(((ScannerAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScannerAssignmentTableRow(ScannerAssignmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerAssignmentDS ds = new ScannerAssignmentDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScannerAssignmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ScannerAssignmentTableRow : global::System.Data.DataRow {
            
            private ScannerAssignmentTableDataTable tableScannerAssignmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannerAssignmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScannerAssignmentTable = ((ScannerAssignmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScannerID {
                get {
                    return ((string)(this[this.tableScannerAssignmentTable.ScannerIDColumn]));
                }
                set {
                    this[this.tableScannerAssignmentTable.ScannerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScannerNumber {
                get {
                    try {
                        return ((string)(this[this.tableScannerAssignmentTable.ScannerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScannerNumber\' in table \'ScannerAssignmentTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.ScannerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightID {
                get {
                    return ((string)(this[this.tableScannerAssignmentTable.FreightIDColumn]));
                }
                set {
                    this[this.tableScannerAssignmentTable.FreightIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableScannerAssignmentTable.TerminalIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalID\' in table \'ScannerAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.TerminalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableScannerAssignmentTable.ClientNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'ScannerAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.ClientNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientDivisionNumber {
                get {
                    try {
                        return ((string)(this[this.tableScannerAssignmentTable.ClientDivisionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientDivisionNumber\' in table \'ScannerAssignmentTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.ClientDivisionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableScannerAssignmentTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'ScannerAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortTypeID {
                get {
                    try {
                        return ((int)(this[this.tableScannerAssignmentTable.SortTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SortTypeID\' in table \'ScannerAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannerAssignmentTable.SortTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScannerNumberNull() {
                return this.IsNull(this.tableScannerAssignmentTable.ScannerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScannerNumberNull() {
                this[this.tableScannerAssignmentTable.ScannerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableScannerAssignmentTable.TerminalIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalIDNull() {
                this[this.tableScannerAssignmentTable.TerminalIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableScannerAssignmentTable.ClientNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableScannerAssignmentTable.ClientNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientDivisionNumberNull() {
                return this.IsNull(this.tableScannerAssignmentTable.ClientDivisionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientDivisionNumberNull() {
                this[this.tableScannerAssignmentTable.ClientDivisionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableScannerAssignmentTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableScannerAssignmentTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortTypeIDNull() {
                return this.IsNull(this.tableScannerAssignmentTable.SortTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortTypeIDNull() {
                this[this.tableScannerAssignmentTable.SortTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ScannerAssignmentTableRowChangeEvent : global::System.EventArgs {
            
            private ScannerAssignmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableRowChangeEvent(ScannerAssignmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerAssignmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ScannedItemDS")]
    public partial class ScannedItemDS : global::System.Data.DataSet {
        
        private ScannedItemTableDataTable tableScannedItemTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannedItemDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannedItemTableDataTable ScannedItemTable {
            get {
                return this.tableScannedItemTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ScannedItemDS cln = ((ScannedItemDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScannedItemTable"] != null)) {
                    base.Tables.Add(new ScannedItemTableDataTable(ds.Tables["ScannedItemTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableScannedItemTable = ((ScannedItemTableDataTable)(base.Tables["ScannedItemTable"]));
            if ((initTable == true)) {
                if ((this.tableScannedItemTable != null)) {
                    this.tableScannedItemTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ScannedItemDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ScannedItemDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScannedItemTable = new ScannedItemTableDataTable();
            base.Tables.Add(this.tableScannedItemTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScannedItemTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ScannedItemDS ds = new ScannedItemDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ScannedItemTableRowChangeEventHandler(object sender, ScannedItemTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScannedItemTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnItemNumber;
            
            private global::System.Data.DataColumn columnTerminalID;
            
            private global::System.Data.DataColumn columnScannerID;
            
            private global::System.Data.DataColumn columnFreightID;
            
            private global::System.Data.DataColumn columnSortDate;
            
            private global::System.Data.DataColumn columnScanString;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableDataTable() {
                this.TableName = "ScannedItemTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedItemTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNumberColumn {
                get {
                    return this.columnItemNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannerIDColumn {
                get {
                    return this.columnScannerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FreightIDColumn {
                get {
                    return this.columnFreightID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDateColumn {
                get {
                    return this.columnSortDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanStringColumn {
                get {
                    return this.columnScanString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableRow this[int index] {
                get {
                    return ((ScannedItemTableRow)(this.Rows[index]));
                }
            }
            
            public event ScannedItemTableRowChangeEventHandler ScannedItemTableRowChanging;
            
            public event ScannedItemTableRowChangeEventHandler ScannedItemTableRowChanged;
            
            public event ScannedItemTableRowChangeEventHandler ScannedItemTableRowDeleting;
            
            public event ScannedItemTableRowChangeEventHandler ScannedItemTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScannedItemTableRow(ScannedItemTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableRow AddScannedItemTableRow(string ItemNumber, int TerminalID, string ScannerID, string FreightID, System.DateTime SortDate, string ScanString, string UserID) {
                ScannedItemTableRow rowScannedItemTableRow = ((ScannedItemTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemNumber,
                        TerminalID,
                        ScannerID,
                        FreightID,
                        SortDate,
                        ScanString,
                        UserID};
                rowScannedItemTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScannedItemTableRow);
                return rowScannedItemTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScannedItemTableDataTable cln = ((ScannedItemTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScannedItemTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemNumber = base.Columns["ItemNumber"];
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnScannerID = base.Columns["ScannerID"];
                this.columnFreightID = base.Columns["FreightID"];
                this.columnSortDate = base.Columns["SortDate"];
                this.columnScanString = base.Columns["ScanString"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemNumber = new global::System.Data.DataColumn("ItemNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemNumber);
                this.columnTerminalID = new global::System.Data.DataColumn("TerminalID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnScannerID = new global::System.Data.DataColumn("ScannerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannerID);
                this.columnFreightID = new global::System.Data.DataColumn("FreightID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightID);
                this.columnSortDate = new global::System.Data.DataColumn("SortDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDate);
                this.columnScanString = new global::System.Data.DataColumn("ScanString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanString);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableRow NewScannedItemTableRow() {
                return ((ScannedItemTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScannedItemTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScannedItemTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScannedItemTableRowChanged != null)) {
                    this.ScannedItemTableRowChanged(this, new ScannedItemTableRowChangeEvent(((ScannedItemTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScannedItemTableRowChanging != null)) {
                    this.ScannedItemTableRowChanging(this, new ScannedItemTableRowChangeEvent(((ScannedItemTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScannedItemTableRowDeleted != null)) {
                    this.ScannedItemTableRowDeleted(this, new ScannedItemTableRowChangeEvent(((ScannedItemTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScannedItemTableRowDeleting != null)) {
                    this.ScannedItemTableRowDeleting(this, new ScannedItemTableRowChangeEvent(((ScannedItemTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScannedItemTableRow(ScannedItemTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannedItemDS ds = new ScannedItemDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScannedItemTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ScannedItemTableRow : global::System.Data.DataRow {
            
            private ScannedItemTableDataTable tableScannedItemTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedItemTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScannedItemTable = ((ScannedItemTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemNumber {
                get {
                    try {
                        return ((string)(this[this.tableScannedItemTable.ItemNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemNumber\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.ItemNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableScannedItemTable.TerminalIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalID\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.TerminalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScannerID {
                get {
                    try {
                        return ((string)(this[this.tableScannedItemTable.ScannerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScannerID\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.ScannerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightID {
                get {
                    try {
                        return ((string)(this[this.tableScannedItemTable.FreightIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FreightID\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.FreightIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SortDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScannedItemTable.SortDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SortDate\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.SortDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScanString {
                get {
                    try {
                        return ((string)(this[this.tableScannedItemTable.ScanStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanString\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.ScanStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableScannedItemTable.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'ScannedItemTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScannedItemTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNumberNull() {
                return this.IsNull(this.tableScannedItemTable.ItemNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNumberNull() {
                this[this.tableScannedItemTable.ItemNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableScannedItemTable.TerminalIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalIDNull() {
                this[this.tableScannedItemTable.TerminalIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScannerIDNull() {
                return this.IsNull(this.tableScannedItemTable.ScannerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScannerIDNull() {
                this[this.tableScannedItemTable.ScannerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightIDNull() {
                return this.IsNull(this.tableScannedItemTable.FreightIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightIDNull() {
                this[this.tableScannedItemTable.FreightIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDateNull() {
                return this.IsNull(this.tableScannedItemTable.SortDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDateNull() {
                this[this.tableScannedItemTable.SortDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanStringNull() {
                return this.IsNull(this.tableScannedItemTable.ScanStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanStringNull() {
                this[this.tableScannedItemTable.ScanStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableScannedItemTable.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableScannedItemTable.UserIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ScannedItemTableRowChangeEvent : global::System.EventArgs {
            
            private ScannedItemTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableRowChangeEvent(ScannedItemTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedItemTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
