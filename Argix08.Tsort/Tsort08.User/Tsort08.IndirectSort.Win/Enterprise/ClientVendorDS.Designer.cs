//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Enterprise {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ClientVendorDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ClientVendorDS : global::System.Data.DataSet {
        
        private ClientVendorViewTableDataTable tableClientVendorViewTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientVendorDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ClientVendorDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientVendorViewTable"] != null)) {
                    base.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientVendorViewTableDataTable ClientVendorViewTable {
            get {
                return this.tableClientVendorViewTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ClientVendorDS cln = ((ClientVendorDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientVendorViewTable"] != null)) {
                    base.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(base.Tables["ClientVendorViewTable"]));
            if ((initTable == true)) {
                if ((this.tableClientVendorViewTable != null)) {
                    this.tableClientVendorViewTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ClientVendorDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ClientVendorDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientVendorViewTable = new ClientVendorViewTableDataTable();
            base.Tables.Add(this.tableClientVendorViewTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientVendorViewTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ClientVendorDS ds = new ClientVendorDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientVendorViewTableRowChangeEventHandler(object sender, ClientVendorViewTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientVendorViewTableDataTable : global::System.Data.TypedTableBase<ClientVendorViewTableRow> {
            
            private global::System.Data.DataColumn columnCLIENT_NUMBER;
            
            private global::System.Data.DataColumn columnCLIENT_DIV_NUM;
            
            private global::System.Data.DataColumn columnVENDOR_NUMBER;
            
            private global::System.Data.DataColumn columnZONE_CODE;
            
            private global::System.Data.DataColumn columnZONE_TYPE;
            
            private global::System.Data.DataColumn columnNON_SAN_LABEL;
            
            private global::System.Data.DataColumn columnSAN_LABEL;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnZIP4;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnUSERDATA;
            
            private global::System.Data.DataColumn columnCLIENTS_VENDOR;
            
            private global::System.Data.DataColumn columnLOCAL_LANE;
            
            private global::System.Data.DataColumn columnROUTE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableDataTable() {
                this.TableName = "ClientVendorViewTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientVendorViewTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientVendorViewTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_DIV_NUMColumn {
                get {
                    return this.columnCLIENT_DIV_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENDOR_NUMBERColumn {
                get {
                    return this.columnVENDOR_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_CODEColumn {
                get {
                    return this.columnZONE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_TYPEColumn {
                get {
                    return this.columnZONE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NON_SAN_LABELColumn {
                get {
                    return this.columnNON_SAN_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAN_LABELColumn {
                get {
                    return this.columnSAN_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERDATAColumn {
                get {
                    return this.columnUSERDATA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENTS_VENDORColumn {
                get {
                    return this.columnCLIENTS_VENDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCAL_LANEColumn {
                get {
                    return this.columnLOCAL_LANE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTEColumn {
                get {
                    return this.columnROUTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow this[int index] {
                get {
                    return ((ClientVendorViewTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanging;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanged;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleting;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow AddClientVendorViewTableRow(
                        string CLIENT_NUMBER, 
                        string CLIENT_DIV_NUM, 
                        string VENDOR_NUMBER, 
                        string ZONE_CODE, 
                        string ZONE_TYPE, 
                        string NON_SAN_LABEL, 
                        string SAN_LABEL, 
                        string NAME, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string STATUS, 
                        string USERDATA, 
                        string CLIENTS_VENDOR, 
                        string LOCAL_LANE, 
                        string ROUTE) {
                ClientVendorViewTableRow rowClientVendorViewTableRow = ((ClientVendorViewTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CLIENT_NUMBER,
                        CLIENT_DIV_NUM,
                        VENDOR_NUMBER,
                        ZONE_CODE,
                        ZONE_TYPE,
                        NON_SAN_LABEL,
                        SAN_LABEL,
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        STATUS,
                        USERDATA,
                        CLIENTS_VENDOR,
                        LOCAL_LANE,
                        ROUTE};
                rowClientVendorViewTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientVendorViewTableRow);
                return rowClientVendorViewTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientVendorViewTableDataTable cln = ((ClientVendorViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientVendorViewTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCLIENT_NUMBER = base.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIV_NUM = base.Columns["CLIENT_DIV_NUM"];
                this.columnVENDOR_NUMBER = base.Columns["VENDOR_NUMBER"];
                this.columnZONE_CODE = base.Columns["ZONE_CODE"];
                this.columnZONE_TYPE = base.Columns["ZONE_TYPE"];
                this.columnNON_SAN_LABEL = base.Columns["NON_SAN_LABEL"];
                this.columnSAN_LABEL = base.Columns["SAN_LABEL"];
                this.columnNAME = base.Columns["NAME"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnZIP4 = base.Columns["ZIP4"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnUSERDATA = base.Columns["USERDATA"];
                this.columnCLIENTS_VENDOR = base.Columns["CLIENTS_VENDOR"];
                this.columnLOCAL_LANE = base.Columns["LOCAL_LANE"];
                this.columnROUTE = base.Columns["ROUTE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCLIENT_NUMBER = new global::System.Data.DataColumn("CLIENT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIV_NUM = new global::System.Data.DataColumn("CLIENT_DIV_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_DIV_NUM);
                this.columnVENDOR_NUMBER = new global::System.Data.DataColumn("VENDOR_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENDOR_NUMBER);
                this.columnZONE_CODE = new global::System.Data.DataColumn("ZONE_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_CODE);
                this.columnZONE_TYPE = new global::System.Data.DataColumn("ZONE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_TYPE);
                this.columnNON_SAN_LABEL = new global::System.Data.DataColumn("NON_SAN_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNON_SAN_LABEL);
                this.columnSAN_LABEL = new global::System.Data.DataColumn("SAN_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAN_LABEL);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnZIP4 = new global::System.Data.DataColumn("ZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP4);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnUSERDATA = new global::System.Data.DataColumn("USERDATA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERDATA);
                this.columnCLIENTS_VENDOR = new global::System.Data.DataColumn("CLIENTS_VENDOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENTS_VENDOR);
                this.columnLOCAL_LANE = new global::System.Data.DataColumn("LOCAL_LANE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCAL_LANE);
                this.columnROUTE = new global::System.Data.DataColumn("ROUTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow NewClientVendorViewTableRow() {
                return ((ClientVendorViewTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientVendorViewTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientVendorViewTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientVendorViewTableRowChanged != null)) {
                    this.ClientVendorViewTableRowChanged(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientVendorViewTableRowChanging != null)) {
                    this.ClientVendorViewTableRowChanging(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientVendorViewTableRowDeleted != null)) {
                    this.ClientVendorViewTableRowDeleted(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientVendorViewTableRowDeleting != null)) {
                    this.ClientVendorViewTableRowDeleting(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientVendorDS ds = new ClientVendorDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientVendorViewTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientVendorViewTableRow : global::System.Data.DataRow {
            
            private ClientVendorViewTableDataTable tableClientVendorViewTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientVendorViewTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_NUMBER\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_DIV_NUM {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_DIV_NUM\' in table \'ClientVendorViewTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VENDOR_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VENDOR_NUMBER\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_CODE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_CODE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_TYPE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NON_SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NON_SAN_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NON_SAN_LABEL\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.SAN_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAN_LABEL\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.SAN_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP4\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERDATA {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.USERDATAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USERDATA\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.USERDATAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENTS_VENDOR {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENTS_VENDOR\' in table \'ClientVendorViewTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCAL_LANE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.LOCAL_LANEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCAL_LANE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ROUTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROUTE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ROUTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_NUMBERNull() {
                this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_DIV_NUMNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_DIV_NUMNull() {
                this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENDOR_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.VENDOR_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENDOR_NUMBERNull() {
                this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_CODENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_CODENull() {
                this[this.tableClientVendorViewTable.ZONE_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_TYPENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_TYPENull() {
                this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNON_SAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.NON_SAN_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNON_SAN_LABELNull() {
                this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.SAN_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAN_LABELNull() {
                this[this.tableClientVendorViewTable.SAN_LABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableClientVendorViewTable.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableClientVendorViewTable.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableClientVendorViewTable.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableClientVendorViewTable.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableClientVendorViewTable.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableClientVendorViewTable.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tableClientVendorViewTable.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tableClientVendorViewTable.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP4Null() {
                return this.IsNull(this.tableClientVendorViewTable.ZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP4Null() {
                this[this.tableClientVendorViewTable.ZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableClientVendorViewTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableClientVendorViewTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERDATANull() {
                return this.IsNull(this.tableClientVendorViewTable.USERDATAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERDATANull() {
                this[this.tableClientVendorViewTable.USERDATAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENTS_VENDORNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENTS_VENDORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENTS_VENDORNull() {
                this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCAL_LANENull() {
                return this.IsNull(this.tableClientVendorViewTable.LOCAL_LANEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCAL_LANENull() {
                this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTENull() {
                return this.IsNull(this.tableClientVendorViewTable.ROUTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTENull() {
                this[this.tableClientVendorViewTable.ROUTEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientVendorViewTableRowChangeEvent : global::System.EventArgs {
            
            private ClientVendorViewTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRowChangeEvent(ClientVendorViewTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591