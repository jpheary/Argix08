//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Freight {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BearwareDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BearwareDS : global::System.Data.DataSet {
        
        private BwareClientTableDataTable tableBwareClientTable;
        
        private BwareTripTableDataTable tableBwareTripTable;
        
        private BwareStationTripTableDataTable tableBwareStationTripTable;
        
        private BwareScanTableDataTable tableBwareScanTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BearwareDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BearwareDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BwareClientTable"] != null)) {
                    base.Tables.Add(new BwareClientTableDataTable(ds.Tables["BwareClientTable"]));
                }
                if ((ds.Tables["BwareTripTable"] != null)) {
                    base.Tables.Add(new BwareTripTableDataTable(ds.Tables["BwareTripTable"]));
                }
                if ((ds.Tables["BwareStationTripTable"] != null)) {
                    base.Tables.Add(new BwareStationTripTableDataTable(ds.Tables["BwareStationTripTable"]));
                }
                if ((ds.Tables["BwareScanTable"] != null)) {
                    base.Tables.Add(new BwareScanTableDataTable(ds.Tables["BwareScanTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BwareClientTableDataTable BwareClientTable {
            get {
                return this.tableBwareClientTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BwareTripTableDataTable BwareTripTable {
            get {
                return this.tableBwareTripTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BwareStationTripTableDataTable BwareStationTripTable {
            get {
                return this.tableBwareStationTripTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BwareScanTableDataTable BwareScanTable {
            get {
                return this.tableBwareScanTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BearwareDS cln = ((BearwareDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BwareClientTable"] != null)) {
                    base.Tables.Add(new BwareClientTableDataTable(ds.Tables["BwareClientTable"]));
                }
                if ((ds.Tables["BwareTripTable"] != null)) {
                    base.Tables.Add(new BwareTripTableDataTable(ds.Tables["BwareTripTable"]));
                }
                if ((ds.Tables["BwareStationTripTable"] != null)) {
                    base.Tables.Add(new BwareStationTripTableDataTable(ds.Tables["BwareStationTripTable"]));
                }
                if ((ds.Tables["BwareScanTable"] != null)) {
                    base.Tables.Add(new BwareScanTableDataTable(ds.Tables["BwareScanTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBwareClientTable = ((BwareClientTableDataTable)(base.Tables["BwareClientTable"]));
            if ((initTable == true)) {
                if ((this.tableBwareClientTable != null)) {
                    this.tableBwareClientTable.InitVars();
                }
            }
            this.tableBwareTripTable = ((BwareTripTableDataTable)(base.Tables["BwareTripTable"]));
            if ((initTable == true)) {
                if ((this.tableBwareTripTable != null)) {
                    this.tableBwareTripTable.InitVars();
                }
            }
            this.tableBwareStationTripTable = ((BwareStationTripTableDataTable)(base.Tables["BwareStationTripTable"]));
            if ((initTable == true)) {
                if ((this.tableBwareStationTripTable != null)) {
                    this.tableBwareStationTripTable.InitVars();
                }
            }
            this.tableBwareScanTable = ((BwareScanTableDataTable)(base.Tables["BwareScanTable"]));
            if ((initTable == true)) {
                if ((this.tableBwareScanTable != null)) {
                    this.tableBwareScanTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BearwareDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BearwareDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBwareClientTable = new BwareClientTableDataTable();
            base.Tables.Add(this.tableBwareClientTable);
            this.tableBwareTripTable = new BwareTripTableDataTable();
            base.Tables.Add(this.tableBwareTripTable);
            this.tableBwareStationTripTable = new BwareStationTripTableDataTable();
            base.Tables.Add(this.tableBwareStationTripTable);
            this.tableBwareScanTable = new BwareScanTableDataTable();
            base.Tables.Add(this.tableBwareScanTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBwareClientTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBwareTripTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBwareStationTripTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBwareScanTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BearwareDS ds = new BearwareDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BwareClientTableRowChangeEventHandler(object sender, BwareClientTableRowChangeEvent e);
        
        public delegate void BwareTripTableRowChangeEventHandler(object sender, BwareTripTableRowChangeEvent e);
        
        public delegate void BwareStationTripTableRowChangeEventHandler(object sender, BwareStationTripTableRowChangeEvent e);
        
        public delegate void BwareScanTableRowChangeEventHandler(object sender, BwareScanTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BwareClientTableDataTable : global::System.Data.TypedTableBase<BwareClientTableRow> {
            
            private global::System.Data.DataColumn columnCLID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableDataTable() {
                this.TableName = "BwareClientTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareClientTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BwareClientTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIDColumn {
                get {
                    return this.columnCLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableRow this[int index] {
                get {
                    return ((BwareClientTableRow)(this.Rows[index]));
                }
            }
            
            public event BwareClientTableRowChangeEventHandler BwareClientTableRowChanging;
            
            public event BwareClientTableRowChangeEventHandler BwareClientTableRowChanged;
            
            public event BwareClientTableRowChangeEventHandler BwareClientTableRowDeleting;
            
            public event BwareClientTableRowChangeEventHandler BwareClientTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBwareClientTableRow(BwareClientTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableRow AddBwareClientTableRow(string CLID) {
                BwareClientTableRow rowBwareClientTableRow = ((BwareClientTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CLID};
                rowBwareClientTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBwareClientTableRow);
                return rowBwareClientTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BwareClientTableDataTable cln = ((BwareClientTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BwareClientTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCLID = base.Columns["CLID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCLID = new global::System.Data.DataColumn("CLID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableRow NewBwareClientTableRow() {
                return ((BwareClientTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BwareClientTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BwareClientTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BwareClientTableRowChanged != null)) {
                    this.BwareClientTableRowChanged(this, new BwareClientTableRowChangeEvent(((BwareClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BwareClientTableRowChanging != null)) {
                    this.BwareClientTableRowChanging(this, new BwareClientTableRowChangeEvent(((BwareClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BwareClientTableRowDeleted != null)) {
                    this.BwareClientTableRowDeleted(this, new BwareClientTableRowChangeEvent(((BwareClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BwareClientTableRowDeleting != null)) {
                    this.BwareClientTableRowDeleting(this, new BwareClientTableRowChangeEvent(((BwareClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBwareClientTableRow(BwareClientTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BearwareDS ds = new BearwareDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BwareClientTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BwareTripTableDataTable : global::System.Data.TypedTableBase<BwareTripTableRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnCartonCount;
            
            private global::System.Data.DataColumn columnCarrier;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnStarted;
            
            private global::System.Data.DataColumn columnStopped;
            
            private global::System.Data.DataColumn columnExported;
            
            private global::System.Data.DataColumn columnImported;
            
            private global::System.Data.DataColumn columnScanned;
            
            private global::System.Data.DataColumn columnOSDSend;
            
            private global::System.Data.DataColumn columnReceived;
            
            private global::System.Data.DataColumn columnCartonsExported;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableDataTable() {
                this.TableName = "BwareTripTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareTripTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BwareTripTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonCountColumn {
                get {
                    return this.columnCartonCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartedColumn {
                get {
                    return this.columnStarted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoppedColumn {
                get {
                    return this.columnStopped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExportedColumn {
                get {
                    return this.columnExported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedColumn {
                get {
                    return this.columnImported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannedColumn {
                get {
                    return this.columnScanned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OSDSendColumn {
                get {
                    return this.columnOSDSend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedColumn {
                get {
                    return this.columnReceived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsExportedColumn {
                get {
                    return this.columnCartonsExported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableRow this[int index] {
                get {
                    return ((BwareTripTableRow)(this.Rows[index]));
                }
            }
            
            public event BwareTripTableRowChangeEventHandler BwareTripTableRowChanging;
            
            public event BwareTripTableRowChangeEventHandler BwareTripTableRowChanged;
            
            public event BwareTripTableRowChangeEventHandler BwareTripTableRowDeleting;
            
            public event BwareTripTableRowChangeEventHandler BwareTripTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBwareTripTableRow(BwareTripTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableRow AddBwareTripTableRow(string Number, int CartonCount, string Carrier, string TrailerNumber, System.DateTime Started, System.DateTime Stopped, System.DateTime Exported, System.DateTime Imported, System.DateTime Scanned, System.DateTime OSDSend, System.DateTime Received, int CartonsExported) {
                BwareTripTableRow rowBwareTripTableRow = ((BwareTripTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        CartonCount,
                        Carrier,
                        TrailerNumber,
                        Started,
                        Stopped,
                        Exported,
                        Imported,
                        Scanned,
                        OSDSend,
                        Received,
                        CartonsExported};
                rowBwareTripTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBwareTripTableRow);
                return rowBwareTripTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BwareTripTableDataTable cln = ((BwareTripTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BwareTripTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnCartonCount = base.Columns["CartonCount"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnStarted = base.Columns["Started"];
                this.columnStopped = base.Columns["Stopped"];
                this.columnExported = base.Columns["Exported"];
                this.columnImported = base.Columns["Imported"];
                this.columnScanned = base.Columns["Scanned"];
                this.columnOSDSend = base.Columns["OSDSend"];
                this.columnReceived = base.Columns["Received"];
                this.columnCartonsExported = base.Columns["CartonsExported"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnCartonCount = new global::System.Data.DataColumn("CartonCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonCount);
                this.columnCarrier = new global::System.Data.DataColumn("Carrier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnStarted = new global::System.Data.DataColumn("Started", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStarted);
                this.columnStopped = new global::System.Data.DataColumn("Stopped", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopped);
                this.columnExported = new global::System.Data.DataColumn("Exported", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExported);
                this.columnImported = new global::System.Data.DataColumn("Imported", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImported);
                this.columnScanned = new global::System.Data.DataColumn("Scanned", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanned);
                this.columnOSDSend = new global::System.Data.DataColumn("OSDSend", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSDSend);
                this.columnReceived = new global::System.Data.DataColumn("Received", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceived);
                this.columnCartonsExported = new global::System.Data.DataColumn("CartonsExported", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsExported);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableRow NewBwareTripTableRow() {
                return ((BwareTripTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BwareTripTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BwareTripTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BwareTripTableRowChanged != null)) {
                    this.BwareTripTableRowChanged(this, new BwareTripTableRowChangeEvent(((BwareTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BwareTripTableRowChanging != null)) {
                    this.BwareTripTableRowChanging(this, new BwareTripTableRowChangeEvent(((BwareTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BwareTripTableRowDeleted != null)) {
                    this.BwareTripTableRowDeleted(this, new BwareTripTableRowChangeEvent(((BwareTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BwareTripTableRowDeleting != null)) {
                    this.BwareTripTableRowDeleting(this, new BwareTripTableRowChangeEvent(((BwareTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBwareTripTableRow(BwareTripTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BearwareDS ds = new BearwareDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BwareTripTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BwareStationTripTableDataTable : global::System.Data.TypedTableBase<BwareStationTripTableRow> {
            
            private global::System.Data.DataColumn columnStationNumber;
            
            private global::System.Data.DataColumn columnTripNumber;
            
            private global::System.Data.DataColumn columnCartonCount;
            
            private global::System.Data.DataColumn columnCarrier;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableDataTable() {
                this.TableName = "BwareStationTripTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareStationTripTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BwareStationTripTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationNumberColumn {
                get {
                    return this.columnStationNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNumberColumn {
                get {
                    return this.columnTripNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonCountColumn {
                get {
                    return this.columnCartonCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableRow this[int index] {
                get {
                    return ((BwareStationTripTableRow)(this.Rows[index]));
                }
            }
            
            public event BwareStationTripTableRowChangeEventHandler BwareStationTripTableRowChanging;
            
            public event BwareStationTripTableRowChangeEventHandler BwareStationTripTableRowChanged;
            
            public event BwareStationTripTableRowChangeEventHandler BwareStationTripTableRowDeleting;
            
            public event BwareStationTripTableRowChangeEventHandler BwareStationTripTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBwareStationTripTableRow(BwareStationTripTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableRow AddBwareStationTripTableRow(string StationNumber, string TripNumber, int CartonCount, string Carrier, string TrailerNumber) {
                BwareStationTripTableRow rowBwareStationTripTableRow = ((BwareStationTripTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StationNumber,
                        TripNumber,
                        CartonCount,
                        Carrier,
                        TrailerNumber};
                rowBwareStationTripTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBwareStationTripTableRow);
                return rowBwareStationTripTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BwareStationTripTableDataTable cln = ((BwareStationTripTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BwareStationTripTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStationNumber = base.Columns["StationNumber"];
                this.columnTripNumber = base.Columns["TripNumber"];
                this.columnCartonCount = base.Columns["CartonCount"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStationNumber = new global::System.Data.DataColumn("StationNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationNumber);
                this.columnTripNumber = new global::System.Data.DataColumn("TripNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNumber);
                this.columnCartonCount = new global::System.Data.DataColumn("CartonCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonCount);
                this.columnCarrier = new global::System.Data.DataColumn("Carrier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableRow NewBwareStationTripTableRow() {
                return ((BwareStationTripTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BwareStationTripTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BwareStationTripTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BwareStationTripTableRowChanged != null)) {
                    this.BwareStationTripTableRowChanged(this, new BwareStationTripTableRowChangeEvent(((BwareStationTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BwareStationTripTableRowChanging != null)) {
                    this.BwareStationTripTableRowChanging(this, new BwareStationTripTableRowChangeEvent(((BwareStationTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BwareStationTripTableRowDeleted != null)) {
                    this.BwareStationTripTableRowDeleted(this, new BwareStationTripTableRowChangeEvent(((BwareStationTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BwareStationTripTableRowDeleting != null)) {
                    this.BwareStationTripTableRowDeleting(this, new BwareStationTripTableRowChangeEvent(((BwareStationTripTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBwareStationTripTableRow(BwareStationTripTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BearwareDS ds = new BearwareDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BwareStationTripTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BwareScanTableDataTable : global::System.Data.TypedTableBase<BwareScanTableRow> {
            
            private global::System.Data.DataColumn columnScan;
            
            private global::System.Data.DataColumn columnTripNumber;
            
            private global::System.Data.DataColumn columnScanned;
            
            private global::System.Data.DataColumn columnStation;
            
            private global::System.Data.DataColumn columnCube;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableDataTable() {
                this.TableName = "BwareScanTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareScanTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BwareScanTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanColumn {
                get {
                    return this.columnScan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNumberColumn {
                get {
                    return this.columnTripNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannedColumn {
                get {
                    return this.columnScanned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationColumn {
                get {
                    return this.columnStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CubeColumn {
                get {
                    return this.columnCube;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableRow this[int index] {
                get {
                    return ((BwareScanTableRow)(this.Rows[index]));
                }
            }
            
            public event BwareScanTableRowChangeEventHandler BwareScanTableRowChanging;
            
            public event BwareScanTableRowChangeEventHandler BwareScanTableRowChanged;
            
            public event BwareScanTableRowChangeEventHandler BwareScanTableRowDeleting;
            
            public event BwareScanTableRowChangeEventHandler BwareScanTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBwareScanTableRow(BwareScanTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableRow AddBwareScanTableRow(string Scan, string TripNumber, System.DateTime Scanned, string Station, int Cube) {
                BwareScanTableRow rowBwareScanTableRow = ((BwareScanTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Scan,
                        TripNumber,
                        Scanned,
                        Station,
                        Cube};
                rowBwareScanTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBwareScanTableRow);
                return rowBwareScanTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BwareScanTableDataTable cln = ((BwareScanTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BwareScanTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScan = base.Columns["Scan"];
                this.columnTripNumber = base.Columns["TripNumber"];
                this.columnScanned = base.Columns["Scanned"];
                this.columnStation = base.Columns["Station"];
                this.columnCube = base.Columns["Cube"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScan = new global::System.Data.DataColumn("Scan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScan);
                this.columnTripNumber = new global::System.Data.DataColumn("TripNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNumber);
                this.columnScanned = new global::System.Data.DataColumn("Scanned", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanned);
                this.columnStation = new global::System.Data.DataColumn("Station", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStation);
                this.columnCube = new global::System.Data.DataColumn("Cube", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCube);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableRow NewBwareScanTableRow() {
                return ((BwareScanTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BwareScanTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BwareScanTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BwareScanTableRowChanged != null)) {
                    this.BwareScanTableRowChanged(this, new BwareScanTableRowChangeEvent(((BwareScanTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BwareScanTableRowChanging != null)) {
                    this.BwareScanTableRowChanging(this, new BwareScanTableRowChangeEvent(((BwareScanTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BwareScanTableRowDeleted != null)) {
                    this.BwareScanTableRowDeleted(this, new BwareScanTableRowChangeEvent(((BwareScanTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BwareScanTableRowDeleting != null)) {
                    this.BwareScanTableRowDeleting(this, new BwareScanTableRowChangeEvent(((BwareScanTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBwareScanTableRow(BwareScanTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BearwareDS ds = new BearwareDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BwareScanTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BwareClientTableRow : global::System.Data.DataRow {
            
            private BwareClientTableDataTable tableBwareClientTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareClientTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBwareClientTable = ((BwareClientTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLID {
                get {
                    try {
                        return ((string)(this[this.tableBwareClientTable.CLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLID\' in table \'BwareClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareClientTable.CLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIDNull() {
                return this.IsNull(this.tableBwareClientTable.CLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIDNull() {
                this[this.tableBwareClientTable.CLIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BwareTripTableRow : global::System.Data.DataRow {
            
            private BwareTripTableDataTable tableBwareTripTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareTripTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBwareTripTable = ((BwareTripTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableBwareTripTable.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonCount {
                get {
                    try {
                        return ((int)(this[this.tableBwareTripTable.CartonCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonCount\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.CartonCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Carrier {
                get {
                    try {
                        return ((string)(this[this.tableBwareTripTable.CarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Carrier\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.CarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableBwareTripTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Started {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.StartedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Started\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.StartedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Stopped {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.StoppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stopped\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.StoppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Exported {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.ExportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exported\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.ExportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Imported {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.ImportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Imported\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.ImportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Scanned {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.ScannedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scanned\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.ScannedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OSDSend {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.OSDSendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSDSend\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.OSDSendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Received {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareTripTable.ReceivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Received\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.ReceivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonsExported {
                get {
                    try {
                        return ((int)(this[this.tableBwareTripTable.CartonsExportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonsExported\' in table \'BwareTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareTripTable.CartonsExportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableBwareTripTable.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableBwareTripTable.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonCountNull() {
                return this.IsNull(this.tableBwareTripTable.CartonCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonCountNull() {
                this[this.tableBwareTripTable.CartonCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableBwareTripTable.CarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableBwareTripTable.CarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableBwareTripTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableBwareTripTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartedNull() {
                return this.IsNull(this.tableBwareTripTable.StartedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartedNull() {
                this[this.tableBwareTripTable.StartedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoppedNull() {
                return this.IsNull(this.tableBwareTripTable.StoppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoppedNull() {
                this[this.tableBwareTripTable.StoppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportedNull() {
                return this.IsNull(this.tableBwareTripTable.ExportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportedNull() {
                this[this.tableBwareTripTable.ExportedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedNull() {
                return this.IsNull(this.tableBwareTripTable.ImportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedNull() {
                this[this.tableBwareTripTable.ImportedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScannedNull() {
                return this.IsNull(this.tableBwareTripTable.ScannedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScannedNull() {
                this[this.tableBwareTripTable.ScannedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSDSendNull() {
                return this.IsNull(this.tableBwareTripTable.OSDSendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSDSendNull() {
                this[this.tableBwareTripTable.OSDSendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedNull() {
                return this.IsNull(this.tableBwareTripTable.ReceivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedNull() {
                this[this.tableBwareTripTable.ReceivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsExportedNull() {
                return this.IsNull(this.tableBwareTripTable.CartonsExportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsExportedNull() {
                this[this.tableBwareTripTable.CartonsExportedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BwareStationTripTableRow : global::System.Data.DataRow {
            
            private BwareStationTripTableDataTable tableBwareStationTripTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareStationTripTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBwareStationTripTable = ((BwareStationTripTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StationNumber {
                get {
                    try {
                        return ((string)(this[this.tableBwareStationTripTable.StationNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StationNumber\' in table \'BwareStationTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareStationTripTable.StationNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNumber {
                get {
                    try {
                        return ((string)(this[this.tableBwareStationTripTable.TripNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripNumber\' in table \'BwareStationTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareStationTripTable.TripNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonCount {
                get {
                    try {
                        return ((int)(this[this.tableBwareStationTripTable.CartonCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonCount\' in table \'BwareStationTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareStationTripTable.CartonCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Carrier {
                get {
                    try {
                        return ((string)(this[this.tableBwareStationTripTable.CarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Carrier\' in table \'BwareStationTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareStationTripTable.CarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableBwareStationTripTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'BwareStationTripTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareStationTripTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNumberNull() {
                return this.IsNull(this.tableBwareStationTripTable.StationNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNumberNull() {
                this[this.tableBwareStationTripTable.StationNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNumberNull() {
                return this.IsNull(this.tableBwareStationTripTable.TripNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNumberNull() {
                this[this.tableBwareStationTripTable.TripNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonCountNull() {
                return this.IsNull(this.tableBwareStationTripTable.CartonCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonCountNull() {
                this[this.tableBwareStationTripTable.CartonCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableBwareStationTripTable.CarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableBwareStationTripTable.CarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableBwareStationTripTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableBwareStationTripTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BwareScanTableRow : global::System.Data.DataRow {
            
            private BwareScanTableDataTable tableBwareScanTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BwareScanTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBwareScanTable = ((BwareScanTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scan {
                get {
                    try {
                        return ((string)(this[this.tableBwareScanTable.ScanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scan\' in table \'BwareScanTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareScanTable.ScanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNumber {
                get {
                    try {
                        return ((string)(this[this.tableBwareScanTable.TripNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripNumber\' in table \'BwareScanTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareScanTable.TripNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Scanned {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBwareScanTable.ScannedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scanned\' in table \'BwareScanTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareScanTable.ScannedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Station {
                get {
                    try {
                        return ((string)(this[this.tableBwareScanTable.StationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Station\' in table \'BwareScanTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareScanTable.StationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cube {
                get {
                    try {
                        return ((int)(this[this.tableBwareScanTable.CubeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cube\' in table \'BwareScanTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBwareScanTable.CubeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanNull() {
                return this.IsNull(this.tableBwareScanTable.ScanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanNull() {
                this[this.tableBwareScanTable.ScanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNumberNull() {
                return this.IsNull(this.tableBwareScanTable.TripNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNumberNull() {
                this[this.tableBwareScanTable.TripNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScannedNull() {
                return this.IsNull(this.tableBwareScanTable.ScannedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScannedNull() {
                this[this.tableBwareScanTable.ScannedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNull() {
                return this.IsNull(this.tableBwareScanTable.StationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNull() {
                this[this.tableBwareScanTable.StationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCubeNull() {
                return this.IsNull(this.tableBwareScanTable.CubeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCubeNull() {
                this[this.tableBwareScanTable.CubeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BwareClientTableRowChangeEvent : global::System.EventArgs {
            
            private BwareClientTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableRowChangeEvent(BwareClientTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareClientTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BwareTripTableRowChangeEvent : global::System.EventArgs {
            
            private BwareTripTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableRowChangeEvent(BwareTripTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareTripTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BwareStationTripTableRowChangeEvent : global::System.EventArgs {
            
            private BwareStationTripTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableRowChangeEvent(BwareStationTripTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareStationTripTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BwareScanTableRowChangeEvent : global::System.EventArgs {
            
            private BwareScanTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableRowChangeEvent(BwareScanTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BwareScanTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591