//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tsort.Labels {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ZplLabelDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ZplLabelDS : global::System.Data.DataSet {
        
        private LabelDetailTableDataTable tableLabelDetailTable;
        
        private CartonDetailTableDataTable tableCartonDetailTable;
        
        private ClientDetailTableDataTable tableClientDetailTable;
        
        private StoreDetailTableDataTable tableStoreDetailTable;
        
        private VendorDetailTableDataTable tableVendorDetailTable;
        
        private ClientVendorViewTableDataTable tableClientVendorViewTable;
        
        private ZoneDetailTableDataTable tableZoneDetailTable;
        
        private WorkstationDetailTableDataTable tableWorkstationDetailTable;
        
        private FreightDetailTableDataTable tableFreightDetailTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ZplLabelDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ZplLabelDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LabelDetailTable"] != null)) {
                    base.Tables.Add(new LabelDetailTableDataTable(ds.Tables["LabelDetailTable"]));
                }
                if ((ds.Tables["CartonDetailTable"] != null)) {
                    base.Tables.Add(new CartonDetailTableDataTable(ds.Tables["CartonDetailTable"]));
                }
                if ((ds.Tables["ClientDetailTable"] != null)) {
                    base.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
                }
                if ((ds.Tables["StoreDetailTable"] != null)) {
                    base.Tables.Add(new StoreDetailTableDataTable(ds.Tables["StoreDetailTable"]));
                }
                if ((ds.Tables["VendorDetailTable"] != null)) {
                    base.Tables.Add(new VendorDetailTableDataTable(ds.Tables["VendorDetailTable"]));
                }
                if ((ds.Tables["ClientVendorViewTable"] != null)) {
                    base.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
                }
                if ((ds.Tables["ZoneDetailTable"] != null)) {
                    base.Tables.Add(new ZoneDetailTableDataTable(ds.Tables["ZoneDetailTable"]));
                }
                if ((ds.Tables["WorkstationDetailTable"] != null)) {
                    base.Tables.Add(new WorkstationDetailTableDataTable(ds.Tables["WorkstationDetailTable"]));
                }
                if ((ds.Tables["FreightDetailTable"] != null)) {
                    base.Tables.Add(new FreightDetailTableDataTable(ds.Tables["FreightDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelDetailTableDataTable LabelDetailTable {
            get {
                return this.tableLabelDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CartonDetailTableDataTable CartonDetailTable {
            get {
                return this.tableCartonDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientDetailTableDataTable ClientDetailTable {
            get {
                return this.tableClientDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoreDetailTableDataTable StoreDetailTable {
            get {
                return this.tableStoreDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorDetailTableDataTable VendorDetailTable {
            get {
                return this.tableVendorDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientVendorViewTableDataTable ClientVendorViewTable {
            get {
                return this.tableClientVendorViewTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZoneDetailTableDataTable ZoneDetailTable {
            get {
                return this.tableZoneDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkstationDetailTableDataTable WorkstationDetailTable {
            get {
                return this.tableWorkstationDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FreightDetailTableDataTable FreightDetailTable {
            get {
                return this.tableFreightDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ZplLabelDS cln = ((ZplLabelDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LabelDetailTable"] != null)) {
                    base.Tables.Add(new LabelDetailTableDataTable(ds.Tables["LabelDetailTable"]));
                }
                if ((ds.Tables["CartonDetailTable"] != null)) {
                    base.Tables.Add(new CartonDetailTableDataTable(ds.Tables["CartonDetailTable"]));
                }
                if ((ds.Tables["ClientDetailTable"] != null)) {
                    base.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
                }
                if ((ds.Tables["StoreDetailTable"] != null)) {
                    base.Tables.Add(new StoreDetailTableDataTable(ds.Tables["StoreDetailTable"]));
                }
                if ((ds.Tables["VendorDetailTable"] != null)) {
                    base.Tables.Add(new VendorDetailTableDataTable(ds.Tables["VendorDetailTable"]));
                }
                if ((ds.Tables["ClientVendorViewTable"] != null)) {
                    base.Tables.Add(new ClientVendorViewTableDataTable(ds.Tables["ClientVendorViewTable"]));
                }
                if ((ds.Tables["ZoneDetailTable"] != null)) {
                    base.Tables.Add(new ZoneDetailTableDataTable(ds.Tables["ZoneDetailTable"]));
                }
                if ((ds.Tables["WorkstationDetailTable"] != null)) {
                    base.Tables.Add(new WorkstationDetailTableDataTable(ds.Tables["WorkstationDetailTable"]));
                }
                if ((ds.Tables["FreightDetailTable"] != null)) {
                    base.Tables.Add(new FreightDetailTableDataTable(ds.Tables["FreightDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLabelDetailTable = ((LabelDetailTableDataTable)(base.Tables["LabelDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableLabelDetailTable != null)) {
                    this.tableLabelDetailTable.InitVars();
                }
            }
            this.tableCartonDetailTable = ((CartonDetailTableDataTable)(base.Tables["CartonDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableCartonDetailTable != null)) {
                    this.tableCartonDetailTable.InitVars();
                }
            }
            this.tableClientDetailTable = ((ClientDetailTableDataTable)(base.Tables["ClientDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableClientDetailTable != null)) {
                    this.tableClientDetailTable.InitVars();
                }
            }
            this.tableStoreDetailTable = ((StoreDetailTableDataTable)(base.Tables["StoreDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableStoreDetailTable != null)) {
                    this.tableStoreDetailTable.InitVars();
                }
            }
            this.tableVendorDetailTable = ((VendorDetailTableDataTable)(base.Tables["VendorDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableVendorDetailTable != null)) {
                    this.tableVendorDetailTable.InitVars();
                }
            }
            this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(base.Tables["ClientVendorViewTable"]));
            if ((initTable == true)) {
                if ((this.tableClientVendorViewTable != null)) {
                    this.tableClientVendorViewTable.InitVars();
                }
            }
            this.tableZoneDetailTable = ((ZoneDetailTableDataTable)(base.Tables["ZoneDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableZoneDetailTable != null)) {
                    this.tableZoneDetailTable.InitVars();
                }
            }
            this.tableWorkstationDetailTable = ((WorkstationDetailTableDataTable)(base.Tables["WorkstationDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableWorkstationDetailTable != null)) {
                    this.tableWorkstationDetailTable.InitVars();
                }
            }
            this.tableFreightDetailTable = ((FreightDetailTableDataTable)(base.Tables["FreightDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableFreightDetailTable != null)) {
                    this.tableFreightDetailTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ZplLabelDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ZplLabelDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLabelDetailTable = new LabelDetailTableDataTable();
            base.Tables.Add(this.tableLabelDetailTable);
            this.tableCartonDetailTable = new CartonDetailTableDataTable();
            base.Tables.Add(this.tableCartonDetailTable);
            this.tableClientDetailTable = new ClientDetailTableDataTable();
            base.Tables.Add(this.tableClientDetailTable);
            this.tableStoreDetailTable = new StoreDetailTableDataTable();
            base.Tables.Add(this.tableStoreDetailTable);
            this.tableVendorDetailTable = new VendorDetailTableDataTable();
            base.Tables.Add(this.tableVendorDetailTable);
            this.tableClientVendorViewTable = new ClientVendorViewTableDataTable();
            base.Tables.Add(this.tableClientVendorViewTable);
            this.tableZoneDetailTable = new ZoneDetailTableDataTable();
            base.Tables.Add(this.tableZoneDetailTable);
            this.tableWorkstationDetailTable = new WorkstationDetailTableDataTable();
            base.Tables.Add(this.tableWorkstationDetailTable);
            this.tableFreightDetailTable = new FreightDetailTableDataTable();
            base.Tables.Add(this.tableFreightDetailTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabelDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCartonDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoreDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVendorDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientVendorViewTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZoneDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkstationDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFreightDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ZplLabelDS ds = new ZplLabelDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LabelDetailTableRowChangeEventHandler(object sender, LabelDetailTableRowChangeEvent e);
        
        public delegate void CartonDetailTableRowChangeEventHandler(object sender, CartonDetailTableRowChangeEvent e);
        
        public delegate void ClientDetailTableRowChangeEventHandler(object sender, ClientDetailTableRowChangeEvent e);
        
        public delegate void StoreDetailTableRowChangeEventHandler(object sender, StoreDetailTableRowChangeEvent e);
        
        public delegate void VendorDetailTableRowChangeEventHandler(object sender, VendorDetailTableRowChangeEvent e);
        
        public delegate void ClientVendorViewTableRowChangeEventHandler(object sender, ClientVendorViewTableRowChangeEvent e);
        
        public delegate void ZoneDetailTableRowChangeEventHandler(object sender, ZoneDetailTableRowChangeEvent e);
        
        public delegate void WorkstationDetailTableRowChangeEventHandler(object sender, WorkstationDetailTableRowChangeEvent e);
        
        public delegate void FreightDetailTableRowChangeEventHandler(object sender, FreightDetailTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabelDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLABEL_TYPE;
            
            private global::System.Data.DataColumn columnPrinterType;
            
            private global::System.Data.DataColumn columnLABEL_STRING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableDataTable() {
                this.TableName = "LabelDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabelDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABEL_TYPEColumn {
                get {
                    return this.columnLABEL_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterTypeColumn {
                get {
                    return this.columnPrinterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABEL_STRINGColumn {
                get {
                    return this.columnLABEL_STRING;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableRow this[int index] {
                get {
                    return ((LabelDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event LabelDetailTableRowChangeEventHandler LabelDetailTableRowChanging;
            
            public event LabelDetailTableRowChangeEventHandler LabelDetailTableRowChanged;
            
            public event LabelDetailTableRowChangeEventHandler LabelDetailTableRowDeleting;
            
            public event LabelDetailTableRowChangeEventHandler LabelDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabelDetailTableRow(LabelDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableRow AddLabelDetailTableRow(string LABEL_TYPE, string PrinterType, string LABEL_STRING) {
                LabelDetailTableRow rowLabelDetailTableRow = ((LabelDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LABEL_TYPE,
                        PrinterType,
                        LABEL_STRING};
                rowLabelDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabelDetailTableRow);
                return rowLabelDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabelDetailTableDataTable cln = ((LabelDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabelDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLABEL_TYPE = base.Columns["LABEL_TYPE"];
                this.columnPrinterType = base.Columns["PrinterType"];
                this.columnLABEL_STRING = base.Columns["LABEL_STRING"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLABEL_TYPE = new global::System.Data.DataColumn("LABEL_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABEL_TYPE);
                this.columnPrinterType = new global::System.Data.DataColumn("PrinterType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterType);
                this.columnLABEL_STRING = new global::System.Data.DataColumn("LABEL_STRING", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABEL_STRING);
                this.columnLABEL_TYPE.AllowDBNull = false;
                this.columnPrinterType.AllowDBNull = false;
                this.columnLABEL_STRING.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableRow NewLabelDetailTableRow() {
                return ((LabelDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabelDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabelDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelDetailTableRowChanged != null)) {
                    this.LabelDetailTableRowChanged(this, new LabelDetailTableRowChangeEvent(((LabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelDetailTableRowChanging != null)) {
                    this.LabelDetailTableRowChanging(this, new LabelDetailTableRowChangeEvent(((LabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelDetailTableRowDeleted != null)) {
                    this.LabelDetailTableRowDeleted(this, new LabelDetailTableRowChangeEvent(((LabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelDetailTableRowDeleting != null)) {
                    this.LabelDetailTableRowDeleting(this, new LabelDetailTableRowChangeEvent(((LabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabelDetailTableRow(LabelDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CartonDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCLIENT_NUMBER;
            
            private global::System.Data.DataColumn columnFREIGHT_STRING;
            
            private global::System.Data.DataColumn columnSTORE_NUMBER;
            
            private global::System.Data.DataColumn columnVENDOR_NUMBER;
            
            private global::System.Data.DataColumn columnLABEL_SEQUENCENUMBER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableDataTable() {
                this.TableName = "CartonDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CartonDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CartonDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FREIGHT_STRINGColumn {
                get {
                    return this.columnFREIGHT_STRING;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STORE_NUMBERColumn {
                get {
                    return this.columnSTORE_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENDOR_NUMBERColumn {
                get {
                    return this.columnVENDOR_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABEL_SEQUENCENUMBERColumn {
                get {
                    return this.columnLABEL_SEQUENCENUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableRow this[int index] {
                get {
                    return ((CartonDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event CartonDetailTableRowChangeEventHandler CartonDetailTableRowChanging;
            
            public event CartonDetailTableRowChangeEventHandler CartonDetailTableRowChanged;
            
            public event CartonDetailTableRowChangeEventHandler CartonDetailTableRowDeleting;
            
            public event CartonDetailTableRowChangeEventHandler CartonDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCartonDetailTableRow(CartonDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableRow AddCartonDetailTableRow(string CLIENT_NUMBER, string FREIGHT_STRING, string STORE_NUMBER, string VENDOR_NUMBER, string LABEL_SEQUENCENUMBER) {
                CartonDetailTableRow rowCartonDetailTableRow = ((CartonDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CLIENT_NUMBER,
                        FREIGHT_STRING,
                        STORE_NUMBER,
                        VENDOR_NUMBER,
                        LABEL_SEQUENCENUMBER};
                rowCartonDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCartonDetailTableRow);
                return rowCartonDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CartonDetailTableDataTable cln = ((CartonDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CartonDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCLIENT_NUMBER = base.Columns["CLIENT_NUMBER"];
                this.columnFREIGHT_STRING = base.Columns["FREIGHT_STRING"];
                this.columnSTORE_NUMBER = base.Columns["STORE_NUMBER"];
                this.columnVENDOR_NUMBER = base.Columns["VENDOR_NUMBER"];
                this.columnLABEL_SEQUENCENUMBER = base.Columns["LABEL_SEQUENCENUMBER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCLIENT_NUMBER = new global::System.Data.DataColumn("CLIENT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnFREIGHT_STRING = new global::System.Data.DataColumn("FREIGHT_STRING", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFREIGHT_STRING);
                this.columnSTORE_NUMBER = new global::System.Data.DataColumn("STORE_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTORE_NUMBER);
                this.columnVENDOR_NUMBER = new global::System.Data.DataColumn("VENDOR_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENDOR_NUMBER);
                this.columnLABEL_SEQUENCENUMBER = new global::System.Data.DataColumn("LABEL_SEQUENCENUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABEL_SEQUENCENUMBER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableRow NewCartonDetailTableRow() {
                return ((CartonDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CartonDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CartonDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CartonDetailTableRowChanged != null)) {
                    this.CartonDetailTableRowChanged(this, new CartonDetailTableRowChangeEvent(((CartonDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CartonDetailTableRowChanging != null)) {
                    this.CartonDetailTableRowChanging(this, new CartonDetailTableRowChangeEvent(((CartonDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CartonDetailTableRowDeleted != null)) {
                    this.CartonDetailTableRowDeleted(this, new CartonDetailTableRowChangeEvent(((CartonDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CartonDetailTableRowDeleting != null)) {
                    this.CartonDetailTableRowDeleting(this, new CartonDetailTableRowChangeEvent(((CartonDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCartonDetailTableRow(CartonDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CartonDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnClientNumber;
            
            private global::System.Data.DataColumn columnNUMBER;
            
            private global::System.Data.DataColumn columnDIVISION;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnUPS_SHIPPER_NBR;
            
            private global::System.Data.DataColumn columnABBREVIATION;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnZIP4;
            
            private global::System.Data.DataColumn columnDELIVERY_BILL_TYPE;
            
            private global::System.Data.DataColumn columnCARTON_COMMODITY;
            
            private global::System.Data.DataColumn columnDELIVERY_BILL;
            
            private global::System.Data.DataColumn columnDBILL_COPIES;
            
            private global::System.Data.DataColumn columnIsSan;
            
            private global::System.Data.DataColumn columnInvoiceProgram;
            
            private global::System.Data.DataColumn columnContactName;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnMnemonic;
            
            private global::System.Data.DataColumn columnBLNumberOnInvoice;
            
            private global::System.Data.DataColumn columnARNumber;
            
            private global::System.Data.DataColumn columnPickupZip;
            
            private global::System.Data.DataColumn columnManifestPerTrailer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableDataTable() {
                this.TableName = "ClientDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIVISIONColumn {
                get {
                    return this.columnDIVISION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPS_SHIPPER_NBRColumn {
                get {
                    return this.columnUPS_SHIPPER_NBR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABBREVIATIONColumn {
                get {
                    return this.columnABBREVIATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELIVERY_BILL_TYPEColumn {
                get {
                    return this.columnDELIVERY_BILL_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CARTON_COMMODITYColumn {
                get {
                    return this.columnCARTON_COMMODITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELIVERY_BILLColumn {
                get {
                    return this.columnDELIVERY_BILL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBILL_COPIESColumn {
                get {
                    return this.columnDBILL_COPIES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSanColumn {
                get {
                    return this.columnIsSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceProgramColumn {
                get {
                    return this.columnInvoiceProgram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLNumberOnInvoiceColumn {
                get {
                    return this.columnBLNumberOnInvoice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ARNumberColumn {
                get {
                    return this.columnARNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupZipColumn {
                get {
                    return this.columnPickupZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManifestPerTrailerColumn {
                get {
                    return this.columnManifestPerTrailer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableRow this[int index] {
                get {
                    return ((ClientDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanging;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanged;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleting;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableRow AddClientDetailTableRow(
                        int ClientID, 
                        string ClientNumber, 
                        string NUMBER, 
                        string DIVISION, 
                        string NAME, 
                        string STATUS, 
                        string UPS_SHIPPER_NBR, 
                        string ABBREVIATION, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string DELIVERY_BILL_TYPE, 
                        string CARTON_COMMODITY, 
                        string DELIVERY_BILL, 
                        short DBILL_COPIES, 
                        string IsSan, 
                        string InvoiceProgram, 
                        string ContactName, 
                        string Phone, 
                        string Fax, 
                        string Mnemonic, 
                        string BLNumberOnInvoice, 
                        string ARNumber, 
                        string PickupZip, 
                        string ManifestPerTrailer) {
                ClientDetailTableRow rowClientDetailTableRow = ((ClientDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientID,
                        ClientNumber,
                        NUMBER,
                        DIVISION,
                        NAME,
                        STATUS,
                        UPS_SHIPPER_NBR,
                        ABBREVIATION,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        DELIVERY_BILL_TYPE,
                        CARTON_COMMODITY,
                        DELIVERY_BILL,
                        DBILL_COPIES,
                        IsSan,
                        InvoiceProgram,
                        ContactName,
                        Phone,
                        Fax,
                        Mnemonic,
                        BLNumberOnInvoice,
                        ARNumber,
                        PickupZip,
                        ManifestPerTrailer};
                rowClientDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientDetailTableRow);
                return rowClientDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientDetailTableDataTable cln = ((ClientDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientID = base.Columns["ClientID"];
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnNUMBER = base.Columns["NUMBER"];
                this.columnDIVISION = base.Columns["DIVISION"];
                this.columnNAME = base.Columns["NAME"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnUPS_SHIPPER_NBR = base.Columns["UPS_SHIPPER_NBR"];
                this.columnABBREVIATION = base.Columns["ABBREVIATION"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnZIP4 = base.Columns["ZIP4"];
                this.columnDELIVERY_BILL_TYPE = base.Columns["DELIVERY_BILL_TYPE"];
                this.columnCARTON_COMMODITY = base.Columns["CARTON_COMMODITY"];
                this.columnDELIVERY_BILL = base.Columns["DELIVERY_BILL"];
                this.columnDBILL_COPIES = base.Columns["DBILL_COPIES"];
                this.columnIsSan = base.Columns["IsSan"];
                this.columnInvoiceProgram = base.Columns["InvoiceProgram"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnPhone = base.Columns["Phone"];
                this.columnFax = base.Columns["Fax"];
                this.columnMnemonic = base.Columns["Mnemonic"];
                this.columnBLNumberOnInvoice = base.Columns["BLNumberOnInvoice"];
                this.columnARNumber = base.Columns["ARNumber"];
                this.columnPickupZip = base.Columns["PickupZip"];
                this.columnManifestPerTrailer = base.Columns["ManifestPerTrailer"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnClientNumber = new global::System.Data.DataColumn("ClientNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnNUMBER = new global::System.Data.DataColumn("NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER);
                this.columnDIVISION = new global::System.Data.DataColumn("DIVISION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIVISION);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnUPS_SHIPPER_NBR = new global::System.Data.DataColumn("UPS_SHIPPER_NBR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPS_SHIPPER_NBR);
                this.columnABBREVIATION = new global::System.Data.DataColumn("ABBREVIATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABBREVIATION);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnZIP4 = new global::System.Data.DataColumn("ZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP4);
                this.columnDELIVERY_BILL_TYPE = new global::System.Data.DataColumn("DELIVERY_BILL_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELIVERY_BILL_TYPE);
                this.columnCARTON_COMMODITY = new global::System.Data.DataColumn("CARTON_COMMODITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARTON_COMMODITY);
                this.columnDELIVERY_BILL = new global::System.Data.DataColumn("DELIVERY_BILL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELIVERY_BILL);
                this.columnDBILL_COPIES = new global::System.Data.DataColumn("DBILL_COPIES", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBILL_COPIES);
                this.columnIsSan = new global::System.Data.DataColumn("IsSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSan);
                this.columnInvoiceProgram = new global::System.Data.DataColumn("InvoiceProgram", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceProgram);
                this.columnContactName = new global::System.Data.DataColumn("ContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactName);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMnemonic);
                this.columnBLNumberOnInvoice = new global::System.Data.DataColumn("BLNumberOnInvoice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLNumberOnInvoice);
                this.columnARNumber = new global::System.Data.DataColumn("ARNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARNumber);
                this.columnPickupZip = new global::System.Data.DataColumn("PickupZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupZip);
                this.columnManifestPerTrailer = new global::System.Data.DataColumn("ManifestPerTrailer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManifestPerTrailer);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableRow NewClientDetailTableRow() {
                return ((ClientDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientDetailTableRowChanged != null)) {
                    this.ClientDetailTableRowChanged(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientDetailTableRowChanging != null)) {
                    this.ClientDetailTableRowChanging(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientDetailTableRowDeleted != null)) {
                    this.ClientDetailTableRowDeleted(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientDetailTableRowDeleting != null)) {
                    this.ClientDetailTableRowDeleting(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoreDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCLIENT_NUMBER;
            
            private global::System.Data.DataColumn columnCLIENT_DIVISION;
            
            private global::System.Data.DataColumn columnNUMBER;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnZIP4;
            
            private global::System.Data.DataColumn columnZONE;
            
            private global::System.Data.DataColumn columnZONE_TYPE;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnOPEN_DATE;
            
            private global::System.Data.DataColumn columnROUTE;
            
            private global::System.Data.DataColumn columnLBL_USER_DATA;
            
            private global::System.Data.DataColumn columnSAN_NUMBER;
            
            private global::System.Data.DataColumn columnPHONE;
            
            private global::System.Data.DataColumn columnINSTRUCTIONS;
            
            private global::System.Data.DataColumn columnLABELTYPE;
            
            private global::System.Data.DataColumn columnALT_NUMBER;
            
            private global::System.Data.DataColumn columnALTROUTE;
            
            private global::System.Data.DataColumn columnLOCAL_LANE;
            
            private global::System.Data.DataColumn columnSAN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableDataTable() {
                this.TableName = "StoreDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoreDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_DIVISIONColumn {
                get {
                    return this.columnCLIENT_DIVISION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONEColumn {
                get {
                    return this.columnZONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_TYPEColumn {
                get {
                    return this.columnZONE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPEN_DATEColumn {
                get {
                    return this.columnOPEN_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTEColumn {
                get {
                    return this.columnROUTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LBL_USER_DATAColumn {
                get {
                    return this.columnLBL_USER_DATA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAN_NUMBERColumn {
                get {
                    return this.columnSAN_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONEColumn {
                get {
                    return this.columnPHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTRUCTIONSColumn {
                get {
                    return this.columnINSTRUCTIONS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABELTYPEColumn {
                get {
                    return this.columnLABELTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ALT_NUMBERColumn {
                get {
                    return this.columnALT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ALTROUTEColumn {
                get {
                    return this.columnALTROUTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCAL_LANEColumn {
                get {
                    return this.columnLOCAL_LANE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SANColumn {
                get {
                    return this.columnSAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableRow this[int index] {
                get {
                    return ((StoreDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowChanging;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowChanged;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowDeleting;
            
            public event StoreDetailTableRowChangeEventHandler StoreDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoreDetailTableRow(StoreDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableRow AddStoreDetailTableRow(
                        string CLIENT_NUMBER, 
                        string CLIENT_DIVISION, 
                        int NUMBER, 
                        string NAME, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string ZONE, 
                        string ZONE_TYPE, 
                        string STATUS, 
                        System.DateTime OPEN_DATE, 
                        string ROUTE, 
                        string LBL_USER_DATA, 
                        string SAN_NUMBER, 
                        string PHONE, 
                        string INSTRUCTIONS, 
                        string LABELTYPE, 
                        string ALT_NUMBER, 
                        string ALTROUTE, 
                        string LOCAL_LANE, 
                        string SAN) {
                StoreDetailTableRow rowStoreDetailTableRow = ((StoreDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CLIENT_NUMBER,
                        CLIENT_DIVISION,
                        NUMBER,
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        ZONE,
                        ZONE_TYPE,
                        STATUS,
                        OPEN_DATE,
                        ROUTE,
                        LBL_USER_DATA,
                        SAN_NUMBER,
                        PHONE,
                        INSTRUCTIONS,
                        LABELTYPE,
                        ALT_NUMBER,
                        ALTROUTE,
                        LOCAL_LANE,
                        SAN};
                rowStoreDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoreDetailTableRow);
                return rowStoreDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoreDetailTableDataTable cln = ((StoreDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoreDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCLIENT_NUMBER = base.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIVISION = base.Columns["CLIENT_DIVISION"];
                this.columnNUMBER = base.Columns["NUMBER"];
                this.columnNAME = base.Columns["NAME"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnZIP4 = base.Columns["ZIP4"];
                this.columnZONE = base.Columns["ZONE"];
                this.columnZONE_TYPE = base.Columns["ZONE_TYPE"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnOPEN_DATE = base.Columns["OPEN_DATE"];
                this.columnROUTE = base.Columns["ROUTE"];
                this.columnLBL_USER_DATA = base.Columns["LBL_USER_DATA"];
                this.columnSAN_NUMBER = base.Columns["SAN_NUMBER"];
                this.columnPHONE = base.Columns["PHONE"];
                this.columnINSTRUCTIONS = base.Columns["INSTRUCTIONS"];
                this.columnLABELTYPE = base.Columns["LABELTYPE"];
                this.columnALT_NUMBER = base.Columns["ALT_NUMBER"];
                this.columnALTROUTE = base.Columns["ALTROUTE"];
                this.columnLOCAL_LANE = base.Columns["LOCAL_LANE"];
                this.columnSAN = base.Columns["SAN"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCLIENT_NUMBER = new global::System.Data.DataColumn("CLIENT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIVISION = new global::System.Data.DataColumn("CLIENT_DIVISION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_DIVISION);
                this.columnNUMBER = new global::System.Data.DataColumn("NUMBER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnZIP4 = new global::System.Data.DataColumn("ZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP4);
                this.columnZONE = new global::System.Data.DataColumn("ZONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE);
                this.columnZONE_TYPE = new global::System.Data.DataColumn("ZONE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_TYPE);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnOPEN_DATE = new global::System.Data.DataColumn("OPEN_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPEN_DATE);
                this.columnROUTE = new global::System.Data.DataColumn("ROUTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTE);
                this.columnLBL_USER_DATA = new global::System.Data.DataColumn("LBL_USER_DATA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLBL_USER_DATA);
                this.columnSAN_NUMBER = new global::System.Data.DataColumn("SAN_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAN_NUMBER);
                this.columnPHONE = new global::System.Data.DataColumn("PHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE);
                this.columnINSTRUCTIONS = new global::System.Data.DataColumn("INSTRUCTIONS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTRUCTIONS);
                this.columnLABELTYPE = new global::System.Data.DataColumn("LABELTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABELTYPE);
                this.columnALT_NUMBER = new global::System.Data.DataColumn("ALT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnALT_NUMBER);
                this.columnALTROUTE = new global::System.Data.DataColumn("ALTROUTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnALTROUTE);
                this.columnLOCAL_LANE = new global::System.Data.DataColumn("LOCAL_LANE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCAL_LANE);
                this.columnSAN = new global::System.Data.DataColumn("SAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAN);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableRow NewStoreDetailTableRow() {
                return ((StoreDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoreDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoreDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoreDetailTableRowChanged != null)) {
                    this.StoreDetailTableRowChanged(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoreDetailTableRowChanging != null)) {
                    this.StoreDetailTableRowChanging(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoreDetailTableRowDeleted != null)) {
                    this.StoreDetailTableRowDeleted(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoreDetailTableRowDeleting != null)) {
                    this.StoreDetailTableRowDeleting(this, new StoreDetailTableRowChangeEvent(((StoreDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoreDetailTableRow(StoreDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoreDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VendorDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNUMBER;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnZIP4;
            
            private global::System.Data.DataColumn columnUSERDATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableDataTable() {
                this.TableName = "VendorDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendorDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VendorDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERDATAColumn {
                get {
                    return this.columnUSERDATA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableRow this[int index] {
                get {
                    return ((VendorDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowChanging;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowChanged;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowDeleting;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVendorDetailTableRow(VendorDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableRow AddVendorDetailTableRow(string NUMBER, string NAME, string STATUS, string ADDRESS_LINE1, string ADDRESS_LINE2, string CITY, string STATE, string ZIP, string ZIP4, string USERDATA) {
                VendorDetailTableRow rowVendorDetailTableRow = ((VendorDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NUMBER,
                        NAME,
                        STATUS,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        USERDATA};
                rowVendorDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVendorDetailTableRow);
                return rowVendorDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VendorDetailTableDataTable cln = ((VendorDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VendorDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNUMBER = base.Columns["NUMBER"];
                this.columnNAME = base.Columns["NAME"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnZIP4 = base.Columns["ZIP4"];
                this.columnUSERDATA = base.Columns["USERDATA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNUMBER = new global::System.Data.DataColumn("NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnZIP4 = new global::System.Data.DataColumn("ZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP4);
                this.columnUSERDATA = new global::System.Data.DataColumn("USERDATA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERDATA);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableRow NewVendorDetailTableRow() {
                return ((VendorDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VendorDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VendorDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorDetailTableRowChanged != null)) {
                    this.VendorDetailTableRowChanged(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorDetailTableRowChanging != null)) {
                    this.VendorDetailTableRowChanging(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorDetailTableRowDeleted != null)) {
                    this.VendorDetailTableRowDeleted(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorDetailTableRowDeleting != null)) {
                    this.VendorDetailTableRowDeleting(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVendorDetailTableRow(VendorDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VendorDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientVendorViewTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCLIENT_NUMBER;
            
            private global::System.Data.DataColumn columnCLIENT_DIV_NUM;
            
            private global::System.Data.DataColumn columnVENDOR_NUMBER;
            
            private global::System.Data.DataColumn columnZONE_CODE;
            
            private global::System.Data.DataColumn columnZONE_TYPE;
            
            private global::System.Data.DataColumn columnNON_SAN_LABEL;
            
            private global::System.Data.DataColumn columnSAN_LABEL;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnZIP4;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnUSERDATA;
            
            private global::System.Data.DataColumn columnCLIENTS_VENDOR;
            
            private global::System.Data.DataColumn columnLOCAL_LANE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableDataTable() {
                this.TableName = "ClientVendorViewTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientVendorViewTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientVendorViewTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_NUMBERColumn {
                get {
                    return this.columnCLIENT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_DIV_NUMColumn {
                get {
                    return this.columnCLIENT_DIV_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENDOR_NUMBERColumn {
                get {
                    return this.columnVENDOR_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_CODEColumn {
                get {
                    return this.columnZONE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_TYPEColumn {
                get {
                    return this.columnZONE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NON_SAN_LABELColumn {
                get {
                    return this.columnNON_SAN_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAN_LABELColumn {
                get {
                    return this.columnSAN_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP4Column {
                get {
                    return this.columnZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERDATAColumn {
                get {
                    return this.columnUSERDATA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENTS_VENDORColumn {
                get {
                    return this.columnCLIENTS_VENDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCAL_LANEColumn {
                get {
                    return this.columnLOCAL_LANE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow this[int index] {
                get {
                    return ((ClientVendorViewTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanging;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowChanged;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleting;
            
            public event ClientVendorViewTableRowChangeEventHandler ClientVendorViewTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow AddClientVendorViewTableRow(
                        string CLIENT_NUMBER, 
                        string CLIENT_DIV_NUM, 
                        string VENDOR_NUMBER, 
                        string ZONE_CODE, 
                        string ZONE_TYPE, 
                        string NON_SAN_LABEL, 
                        string SAN_LABEL, 
                        string NAME, 
                        string ADDRESS_LINE1, 
                        string ADDRESS_LINE2, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string ZIP4, 
                        string STATUS, 
                        string USERDATA, 
                        string CLIENTS_VENDOR, 
                        string LOCAL_LANE) {
                ClientVendorViewTableRow rowClientVendorViewTableRow = ((ClientVendorViewTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CLIENT_NUMBER,
                        CLIENT_DIV_NUM,
                        VENDOR_NUMBER,
                        ZONE_CODE,
                        ZONE_TYPE,
                        NON_SAN_LABEL,
                        SAN_LABEL,
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE,
                        ZIP,
                        ZIP4,
                        STATUS,
                        USERDATA,
                        CLIENTS_VENDOR,
                        LOCAL_LANE};
                rowClientVendorViewTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientVendorViewTableRow);
                return rowClientVendorViewTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientVendorViewTableDataTable cln = ((ClientVendorViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientVendorViewTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCLIENT_NUMBER = base.Columns["CLIENT_NUMBER"];
                this.columnCLIENT_DIV_NUM = base.Columns["CLIENT_DIV_NUM"];
                this.columnVENDOR_NUMBER = base.Columns["VENDOR_NUMBER"];
                this.columnZONE_CODE = base.Columns["ZONE_CODE"];
                this.columnZONE_TYPE = base.Columns["ZONE_TYPE"];
                this.columnNON_SAN_LABEL = base.Columns["NON_SAN_LABEL"];
                this.columnSAN_LABEL = base.Columns["SAN_LABEL"];
                this.columnNAME = base.Columns["NAME"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnZIP4 = base.Columns["ZIP4"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnUSERDATA = base.Columns["USERDATA"];
                this.columnCLIENTS_VENDOR = base.Columns["CLIENTS_VENDOR"];
                this.columnLOCAL_LANE = base.Columns["LOCAL_LANE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCLIENT_NUMBER = new global::System.Data.DataColumn("CLIENT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_NUMBER);
                this.columnCLIENT_DIV_NUM = new global::System.Data.DataColumn("CLIENT_DIV_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_DIV_NUM);
                this.columnVENDOR_NUMBER = new global::System.Data.DataColumn("VENDOR_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENDOR_NUMBER);
                this.columnZONE_CODE = new global::System.Data.DataColumn("ZONE_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_CODE);
                this.columnZONE_TYPE = new global::System.Data.DataColumn("ZONE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_TYPE);
                this.columnNON_SAN_LABEL = new global::System.Data.DataColumn("NON_SAN_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNON_SAN_LABEL);
                this.columnSAN_LABEL = new global::System.Data.DataColumn("SAN_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAN_LABEL);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnZIP4 = new global::System.Data.DataColumn("ZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP4);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnUSERDATA = new global::System.Data.DataColumn("USERDATA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERDATA);
                this.columnCLIENTS_VENDOR = new global::System.Data.DataColumn("CLIENTS_VENDOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENTS_VENDOR);
                this.columnLOCAL_LANE = new global::System.Data.DataColumn("LOCAL_LANE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCAL_LANE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow NewClientVendorViewTableRow() {
                return ((ClientVendorViewTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientVendorViewTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientVendorViewTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientVendorViewTableRowChanged != null)) {
                    this.ClientVendorViewTableRowChanged(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientVendorViewTableRowChanging != null)) {
                    this.ClientVendorViewTableRowChanging(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientVendorViewTableRowDeleted != null)) {
                    this.ClientVendorViewTableRowDeleted(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientVendorViewTableRowDeleting != null)) {
                    this.ClientVendorViewTableRowDeleting(this, new ClientVendorViewTableRowChangeEvent(((ClientVendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientVendorViewTableRow(ClientVendorViewTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientVendorViewTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZoneDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnTRAILER_LOAD_NUM;
            
            private global::System.Data.DataColumn columnLABEL_TYPE;
            
            private global::System.Data.DataColumn columnLANE;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnRB_TL_NUMBER;
            
            private global::System.Data.DataColumn columnAgentID;
            
            private global::System.Data.DataColumn columnAGENT_NUMBER;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnLOCATION;
            
            private global::System.Data.DataColumn columnSortCenterID;
            
            private global::System.Data.DataColumn columnSHIP_DATE;
            
            private global::System.Data.DataColumn columnCAN_BE_CLOSED;
            
            private global::System.Data.DataColumn columnOSDStatus;
            
            private global::System.Data.DataColumn columnLABELTYPE;
            
            private global::System.Data.DataColumn columnLANE_SMALL_SORT;
            
            private global::System.Data.DataColumn columnIsMain;
            
            private global::System.Data.DataColumn columnShipScdeToClose;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableDataTable() {
                this.TableName = "ZoneDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZoneDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRAILER_LOAD_NUMColumn {
                get {
                    return this.columnTRAILER_LOAD_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABEL_TYPEColumn {
                get {
                    return this.columnLABEL_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LANEColumn {
                get {
                    return this.columnLANE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RB_TL_NUMBERColumn {
                get {
                    return this.columnRB_TL_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGENT_NUMBERColumn {
                get {
                    return this.columnAGENT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONColumn {
                get {
                    return this.columnLOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortCenterIDColumn {
                get {
                    return this.columnSortCenterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_DATEColumn {
                get {
                    return this.columnSHIP_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAN_BE_CLOSEDColumn {
                get {
                    return this.columnCAN_BE_CLOSED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OSDStatusColumn {
                get {
                    return this.columnOSDStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LABELTYPEColumn {
                get {
                    return this.columnLABELTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LANE_SMALL_SORTColumn {
                get {
                    return this.columnLANE_SMALL_SORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMainColumn {
                get {
                    return this.columnIsMain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipScdeToCloseColumn {
                get {
                    return this.columnShipScdeToClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableRow this[int index] {
                get {
                    return ((ZoneDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event ZoneDetailTableRowChangeEventHandler ZoneDetailTableRowChanging;
            
            public event ZoneDetailTableRowChangeEventHandler ZoneDetailTableRowChanged;
            
            public event ZoneDetailTableRowChangeEventHandler ZoneDetailTableRowDeleting;
            
            public event ZoneDetailTableRowChangeEventHandler ZoneDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZoneDetailTableRow(ZoneDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableRow AddZoneDetailTableRow(
                        string CODE, 
                        string TYPE, 
                        string TRAILER_LOAD_NUM, 
                        string LABEL_TYPE, 
                        string LANE, 
                        string STATUS, 
                        string RB_TL_NUMBER, 
                        int AgentID, 
                        string AGENT_NUMBER, 
                        string DESCRIPTION, 
                        string LOCATION, 
                        int SortCenterID, 
                        System.DateTime SHIP_DATE, 
                        string CAN_BE_CLOSED, 
                        string OSDStatus, 
                        string LABELTYPE, 
                        string LANE_SMALL_SORT, 
                        short IsMain, 
                        short ShipScdeToClose) {
                ZoneDetailTableRow rowZoneDetailTableRow = ((ZoneDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE,
                        TYPE,
                        TRAILER_LOAD_NUM,
                        LABEL_TYPE,
                        LANE,
                        STATUS,
                        RB_TL_NUMBER,
                        AgentID,
                        AGENT_NUMBER,
                        DESCRIPTION,
                        LOCATION,
                        SortCenterID,
                        SHIP_DATE,
                        CAN_BE_CLOSED,
                        OSDStatus,
                        LABELTYPE,
                        LANE_SMALL_SORT,
                        IsMain,
                        ShipScdeToClose};
                rowZoneDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZoneDetailTableRow);
                return rowZoneDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ZoneDetailTableDataTable cln = ((ZoneDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZoneDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnTRAILER_LOAD_NUM = base.Columns["TRAILER_LOAD_NUM"];
                this.columnLABEL_TYPE = base.Columns["LABEL_TYPE"];
                this.columnLANE = base.Columns["LANE"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnRB_TL_NUMBER = base.Columns["RB_TL_NUMBER"];
                this.columnAgentID = base.Columns["AgentID"];
                this.columnAGENT_NUMBER = base.Columns["AGENT_NUMBER"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnLOCATION = base.Columns["LOCATION"];
                this.columnSortCenterID = base.Columns["SortCenterID"];
                this.columnSHIP_DATE = base.Columns["SHIP_DATE"];
                this.columnCAN_BE_CLOSED = base.Columns["CAN_BE_CLOSED"];
                this.columnOSDStatus = base.Columns["OSDStatus"];
                this.columnLABELTYPE = base.Columns["LABELTYPE"];
                this.columnLANE_SMALL_SORT = base.Columns["LANE_SMALL_SORT"];
                this.columnIsMain = base.Columns["IsMain"];
                this.columnShipScdeToClose = base.Columns["ShipScdeToClose"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnTRAILER_LOAD_NUM = new global::System.Data.DataColumn("TRAILER_LOAD_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRAILER_LOAD_NUM);
                this.columnLABEL_TYPE = new global::System.Data.DataColumn("LABEL_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABEL_TYPE);
                this.columnLANE = new global::System.Data.DataColumn("LANE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLANE);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnRB_TL_NUMBER = new global::System.Data.DataColumn("RB_TL_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRB_TL_NUMBER);
                this.columnAgentID = new global::System.Data.DataColumn("AgentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentID);
                this.columnAGENT_NUMBER = new global::System.Data.DataColumn("AGENT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGENT_NUMBER);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnLOCATION = new global::System.Data.DataColumn("LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCATION);
                this.columnSortCenterID = new global::System.Data.DataColumn("SortCenterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortCenterID);
                this.columnSHIP_DATE = new global::System.Data.DataColumn("SHIP_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_DATE);
                this.columnCAN_BE_CLOSED = new global::System.Data.DataColumn("CAN_BE_CLOSED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAN_BE_CLOSED);
                this.columnOSDStatus = new global::System.Data.DataColumn("OSDStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSDStatus);
                this.columnLABELTYPE = new global::System.Data.DataColumn("LABELTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABELTYPE);
                this.columnLANE_SMALL_SORT = new global::System.Data.DataColumn("LANE_SMALL_SORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLANE_SMALL_SORT);
                this.columnIsMain = new global::System.Data.DataColumn("IsMain", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMain);
                this.columnShipScdeToClose = new global::System.Data.DataColumn("ShipScdeToClose", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipScdeToClose);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableRow NewZoneDetailTableRow() {
                return ((ZoneDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZoneDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ZoneDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZoneDetailTableRowChanged != null)) {
                    this.ZoneDetailTableRowChanged(this, new ZoneDetailTableRowChangeEvent(((ZoneDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZoneDetailTableRowChanging != null)) {
                    this.ZoneDetailTableRowChanging(this, new ZoneDetailTableRowChangeEvent(((ZoneDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZoneDetailTableRowDeleted != null)) {
                    this.ZoneDetailTableRowDeleted(this, new ZoneDetailTableRowChangeEvent(((ZoneDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZoneDetailTableRowDeleting != null)) {
                    this.ZoneDetailTableRowDeleting(this, new ZoneDetailTableRowChangeEvent(((ZoneDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZoneDetailTableRow(ZoneDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZoneDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkstationDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkStationID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableDataTable() {
                this.TableName = "WorkstationDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkstationDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkstationDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkStationIDColumn {
                get {
                    return this.columnWorkStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableRow this[int index] {
                get {
                    return ((WorkstationDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowChanging;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowChanged;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowDeleting;
            
            public event WorkstationDetailTableRowChangeEventHandler WorkstationDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkstationDetailTableRow(WorkstationDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableRow AddWorkstationDetailTableRow(string WorkStationID, string Name, string Number, string Description) {
                WorkstationDetailTableRow rowWorkstationDetailTableRow = ((WorkstationDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkStationID,
                        Name,
                        Number,
                        Description};
                rowWorkstationDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkstationDetailTableRow);
                return rowWorkstationDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WorkstationDetailTableDataTable cln = ((WorkstationDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WorkstationDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkStationID = base.Columns["WorkStationID"];
                this.columnName = base.Columns["Name"];
                this.columnNumber = base.Columns["Number"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkStationID = new global::System.Data.DataColumn("WorkStationID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkStationID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableRow NewWorkstationDetailTableRow() {
                return ((WorkstationDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WorkstationDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WorkstationDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkstationDetailTableRowChanged != null)) {
                    this.WorkstationDetailTableRowChanged(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkstationDetailTableRowChanging != null)) {
                    this.WorkstationDetailTableRowChanging(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkstationDetailTableRowDeleted != null)) {
                    this.WorkstationDetailTableRowDeleted(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkstationDetailTableRowDeleting != null)) {
                    this.WorkstationDetailTableRowDeleting(this, new WorkstationDetailTableRowChangeEvent(((WorkstationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkstationDetailTableRow(WorkstationDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkstationDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FreightDetailTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLanePrefix;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableDataTable() {
                this.TableName = "FreightDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FreightDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FreightDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanePrefixColumn {
                get {
                    return this.columnLanePrefix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableRow this[int index] {
                get {
                    return ((FreightDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event FreightDetailTableRowChangeEventHandler FreightDetailTableRowChanging;
            
            public event FreightDetailTableRowChangeEventHandler FreightDetailTableRowChanged;
            
            public event FreightDetailTableRowChangeEventHandler FreightDetailTableRowDeleting;
            
            public event FreightDetailTableRowChangeEventHandler FreightDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFreightDetailTableRow(FreightDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableRow AddFreightDetailTableRow(string LanePrefix) {
                FreightDetailTableRow rowFreightDetailTableRow = ((FreightDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LanePrefix};
                rowFreightDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFreightDetailTableRow);
                return rowFreightDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FreightDetailTableDataTable cln = ((FreightDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FreightDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLanePrefix = base.Columns["LanePrefix"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLanePrefix = new global::System.Data.DataColumn("LanePrefix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLanePrefix);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableRow NewFreightDetailTableRow() {
                return ((FreightDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FreightDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FreightDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FreightDetailTableRowChanged != null)) {
                    this.FreightDetailTableRowChanged(this, new FreightDetailTableRowChangeEvent(((FreightDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FreightDetailTableRowChanging != null)) {
                    this.FreightDetailTableRowChanging(this, new FreightDetailTableRowChangeEvent(((FreightDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FreightDetailTableRowDeleted != null)) {
                    this.FreightDetailTableRowDeleted(this, new FreightDetailTableRowChangeEvent(((FreightDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FreightDetailTableRowDeleting != null)) {
                    this.FreightDetailTableRowDeleting(this, new FreightDetailTableRowChangeEvent(((FreightDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFreightDetailTableRow(FreightDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ZplLabelDS ds = new ZplLabelDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FreightDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabelDetailTableRow : global::System.Data.DataRow {
            
            private LabelDetailTableDataTable tableLabelDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabelDetailTable = ((LabelDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABEL_TYPE {
                get {
                    return ((string)(this[this.tableLabelDetailTable.LABEL_TYPEColumn]));
                }
                set {
                    this[this.tableLabelDetailTable.LABEL_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterType {
                get {
                    return ((string)(this[this.tableLabelDetailTable.PrinterTypeColumn]));
                }
                set {
                    this[this.tableLabelDetailTable.PrinterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABEL_STRING {
                get {
                    return ((string)(this[this.tableLabelDetailTable.LABEL_STRINGColumn]));
                }
                set {
                    this[this.tableLabelDetailTable.LABEL_STRINGColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CartonDetailTableRow : global::System.Data.DataRow {
            
            private CartonDetailTableDataTable tableCartonDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CartonDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCartonDetailTable = ((CartonDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCartonDetailTable.CLIENT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_NUMBER\' in table \'CartonDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCartonDetailTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FREIGHT_STRING {
                get {
                    try {
                        return ((string)(this[this.tableCartonDetailTable.FREIGHT_STRINGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FREIGHT_STRING\' in table \'CartonDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCartonDetailTable.FREIGHT_STRINGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STORE_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCartonDetailTable.STORE_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STORE_NUMBER\' in table \'CartonDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCartonDetailTable.STORE_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VENDOR_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCartonDetailTable.VENDOR_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VENDOR_NUMBER\' in table \'CartonDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCartonDetailTable.VENDOR_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABEL_SEQUENCENUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCartonDetailTable.LABEL_SEQUENCENUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LABEL_SEQUENCENUMBER\' in table \'CartonDetailTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCartonDetailTable.LABEL_SEQUENCENUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableCartonDetailTable.CLIENT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_NUMBERNull() {
                this[this.tableCartonDetailTable.CLIENT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFREIGHT_STRINGNull() {
                return this.IsNull(this.tableCartonDetailTable.FREIGHT_STRINGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFREIGHT_STRINGNull() {
                this[this.tableCartonDetailTable.FREIGHT_STRINGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTORE_NUMBERNull() {
                return this.IsNull(this.tableCartonDetailTable.STORE_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTORE_NUMBERNull() {
                this[this.tableCartonDetailTable.STORE_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENDOR_NUMBERNull() {
                return this.IsNull(this.tableCartonDetailTable.VENDOR_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENDOR_NUMBERNull() {
                this[this.tableCartonDetailTable.VENDOR_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLABEL_SEQUENCENUMBERNull() {
                return this.IsNull(this.tableCartonDetailTable.LABEL_SEQUENCENUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLABEL_SEQUENCENUMBERNull() {
                this[this.tableCartonDetailTable.LABEL_SEQUENCENUMBERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientDetailTableRow : global::System.Data.DataRow {
            
            private ClientDetailTableDataTable tableClientDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientDetailTable = ((ClientDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientDetailTable.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ClientNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ClientNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMBER\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIVISION {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.DIVISIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DIVISION\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DIVISIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPS_SHIPPER_NBR {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPS_SHIPPER_NBR\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABBREVIATION {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ABBREVIATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABBREVIATION\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ABBREVIATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP4\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELIVERY_BILL_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELIVERY_BILL_TYPE\' in table \'ClientDetailTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CARTON_COMMODITY {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.CARTON_COMMODITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CARTON_COMMODITY\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.CARTON_COMMODITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELIVERY_BILL {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.DELIVERY_BILLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELIVERY_BILL\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DELIVERY_BILLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DBILL_COPIES {
                get {
                    try {
                        return ((short)(this[this.tableClientDetailTable.DBILL_COPIESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DBILL_COPIES\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.DBILL_COPIESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsSan {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.IsSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSan\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.IsSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceProgram {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.InvoiceProgramColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceProgram\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.InvoiceProgramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactName\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.FaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fax\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.MnemonicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mnemonic\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.MnemonicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLNumberOnInvoice {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.BLNumberOnInvoiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLNumberOnInvoice\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.BLNumberOnInvoiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ARNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ARNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARNumber\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ARNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PickupZip {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PickupZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupZip\' in table \'ClientDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PickupZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManifestPerTrailer {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ManifestPerTrailerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManifestPerTrailer\' in table \'ClientDetailTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ManifestPerTrailerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientDetailTable.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableClientDetailTable.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableClientDetailTable.ClientNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableClientDetailTable.ClientNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBERNull() {
                return this.IsNull(this.tableClientDetailTable.NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBERNull() {
                this[this.tableClientDetailTable.NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIVISIONNull() {
                return this.IsNull(this.tableClientDetailTable.DIVISIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIVISIONNull() {
                this[this.tableClientDetailTable.DIVISIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableClientDetailTable.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableClientDetailTable.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableClientDetailTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableClientDetailTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPS_SHIPPER_NBRNull() {
                return this.IsNull(this.tableClientDetailTable.UPS_SHIPPER_NBRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPS_SHIPPER_NBRNull() {
                this[this.tableClientDetailTable.UPS_SHIPPER_NBRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABBREVIATIONNull() {
                return this.IsNull(this.tableClientDetailTable.ABBREVIATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABBREVIATIONNull() {
                this[this.tableClientDetailTable.ABBREVIATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableClientDetailTable.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableClientDetailTable.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableClientDetailTable.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableClientDetailTable.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableClientDetailTable.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableClientDetailTable.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableClientDetailTable.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableClientDetailTable.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tableClientDetailTable.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tableClientDetailTable.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP4Null() {
                return this.IsNull(this.tableClientDetailTable.ZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP4Null() {
                this[this.tableClientDetailTable.ZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELIVERY_BILL_TYPENull() {
                return this.IsNull(this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELIVERY_BILL_TYPENull() {
                this[this.tableClientDetailTable.DELIVERY_BILL_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCARTON_COMMODITYNull() {
                return this.IsNull(this.tableClientDetailTable.CARTON_COMMODITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCARTON_COMMODITYNull() {
                this[this.tableClientDetailTable.CARTON_COMMODITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELIVERY_BILLNull() {
                return this.IsNull(this.tableClientDetailTable.DELIVERY_BILLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELIVERY_BILLNull() {
                this[this.tableClientDetailTable.DELIVERY_BILLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBILL_COPIESNull() {
                return this.IsNull(this.tableClientDetailTable.DBILL_COPIESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBILL_COPIESNull() {
                this[this.tableClientDetailTable.DBILL_COPIESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSanNull() {
                return this.IsNull(this.tableClientDetailTable.IsSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSanNull() {
                this[this.tableClientDetailTable.IsSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceProgramNull() {
                return this.IsNull(this.tableClientDetailTable.InvoiceProgramColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceProgramNull() {
                this[this.tableClientDetailTable.InvoiceProgramColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNameNull() {
                return this.IsNull(this.tableClientDetailTable.ContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNameNull() {
                this[this.tableClientDetailTable.ContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableClientDetailTable.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableClientDetailTable.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNull() {
                return this.IsNull(this.tableClientDetailTable.FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNull() {
                this[this.tableClientDetailTable.FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableClientDetailTable.MnemonicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMnemonicNull() {
                this[this.tableClientDetailTable.MnemonicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNumberOnInvoiceNull() {
                return this.IsNull(this.tableClientDetailTable.BLNumberOnInvoiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNumberOnInvoiceNull() {
                this[this.tableClientDetailTable.BLNumberOnInvoiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsARNumberNull() {
                return this.IsNull(this.tableClientDetailTable.ARNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetARNumberNull() {
                this[this.tableClientDetailTable.ARNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupZipNull() {
                return this.IsNull(this.tableClientDetailTable.PickupZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupZipNull() {
                this[this.tableClientDetailTable.PickupZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManifestPerTrailerNull() {
                return this.IsNull(this.tableClientDetailTable.ManifestPerTrailerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManifestPerTrailerNull() {
                this[this.tableClientDetailTable.ManifestPerTrailerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoreDetailTableRow : global::System.Data.DataRow {
            
            private StoreDetailTableDataTable tableStoreDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoreDetailTable = ((StoreDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CLIENT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_NUMBER\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_DIVISION {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_DIVISION\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NUMBER {
                get {
                    try {
                        return ((int)(this[this.tableStoreDetailTable.NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMBER\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP4\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ZONE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_TYPE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ZONE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OPEN_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStoreDetailTable.OPEN_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPEN_DATE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.OPEN_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ROUTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROUTE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ROUTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LBL_USER_DATA {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LBL_USER_DATAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LBL_USER_DATA\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LBL_USER_DATAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAN_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.SAN_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAN_NUMBER\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.SAN_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.PHONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHONE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.PHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSTRUCTIONS {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.INSTRUCTIONSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSTRUCTIONS\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.INSTRUCTIONSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABELTYPE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LABELTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LABELTYPE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LABELTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ALT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ALT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ALT_NUMBER\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ALT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ALTROUTE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.ALTROUTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ALTROUTE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.ALTROUTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCAL_LANE {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.LOCAL_LANEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCAL_LANE\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.LOCAL_LANEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAN {
                get {
                    try {
                        return ((string)(this[this.tableStoreDetailTable.SANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAN\' in table \'StoreDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoreDetailTable.SANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.CLIENT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_NUMBERNull() {
                this[this.tableStoreDetailTable.CLIENT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_DIVISIONNull() {
                return this.IsNull(this.tableStoreDetailTable.CLIENT_DIVISIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_DIVISIONNull() {
                this[this.tableStoreDetailTable.CLIENT_DIVISIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBERNull() {
                this[this.tableStoreDetailTable.NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableStoreDetailTable.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableStoreDetailTable.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableStoreDetailTable.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableStoreDetailTable.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableStoreDetailTable.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableStoreDetailTable.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableStoreDetailTable.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableStoreDetailTable.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableStoreDetailTable.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableStoreDetailTable.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tableStoreDetailTable.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tableStoreDetailTable.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP4Null() {
                return this.IsNull(this.tableStoreDetailTable.ZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP4Null() {
                this[this.tableStoreDetailTable.ZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONENull() {
                return this.IsNull(this.tableStoreDetailTable.ZONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONENull() {
                this[this.tableStoreDetailTable.ZONEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_TYPENull() {
                return this.IsNull(this.tableStoreDetailTable.ZONE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_TYPENull() {
                this[this.tableStoreDetailTable.ZONE_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableStoreDetailTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableStoreDetailTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPEN_DATENull() {
                return this.IsNull(this.tableStoreDetailTable.OPEN_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPEN_DATENull() {
                this[this.tableStoreDetailTable.OPEN_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTENull() {
                return this.IsNull(this.tableStoreDetailTable.ROUTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTENull() {
                this[this.tableStoreDetailTable.ROUTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLBL_USER_DATANull() {
                return this.IsNull(this.tableStoreDetailTable.LBL_USER_DATAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLBL_USER_DATANull() {
                this[this.tableStoreDetailTable.LBL_USER_DATAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAN_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.SAN_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAN_NUMBERNull() {
                this[this.tableStoreDetailTable.SAN_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONENull() {
                return this.IsNull(this.tableStoreDetailTable.PHONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONENull() {
                this[this.tableStoreDetailTable.PHONEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSTRUCTIONSNull() {
                return this.IsNull(this.tableStoreDetailTable.INSTRUCTIONSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSTRUCTIONSNull() {
                this[this.tableStoreDetailTable.INSTRUCTIONSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLABELTYPENull() {
                return this.IsNull(this.tableStoreDetailTable.LABELTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLABELTYPENull() {
                this[this.tableStoreDetailTable.LABELTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsALT_NUMBERNull() {
                return this.IsNull(this.tableStoreDetailTable.ALT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetALT_NUMBERNull() {
                this[this.tableStoreDetailTable.ALT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsALTROUTENull() {
                return this.IsNull(this.tableStoreDetailTable.ALTROUTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetALTROUTENull() {
                this[this.tableStoreDetailTable.ALTROUTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCAL_LANENull() {
                return this.IsNull(this.tableStoreDetailTable.LOCAL_LANEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCAL_LANENull() {
                this[this.tableStoreDetailTable.LOCAL_LANEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSANNull() {
                return this.IsNull(this.tableStoreDetailTable.SANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSANNull() {
                this[this.tableStoreDetailTable.SANColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VendorDetailTableRow : global::System.Data.DataRow {
            
            private VendorDetailTableDataTable tableVendorDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendorDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendorDetailTable = ((VendorDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMBER\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP4\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERDATA {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.USERDATAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USERDATA\' in table \'VendorDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.USERDATAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBERNull() {
                return this.IsNull(this.tableVendorDetailTable.NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBERNull() {
                this[this.tableVendorDetailTable.NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableVendorDetailTable.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableVendorDetailTable.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableVendorDetailTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableVendorDetailTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableVendorDetailTable.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableVendorDetailTable.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableVendorDetailTable.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableVendorDetailTable.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableVendorDetailTable.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableVendorDetailTable.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableVendorDetailTable.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableVendorDetailTable.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tableVendorDetailTable.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tableVendorDetailTable.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP4Null() {
                return this.IsNull(this.tableVendorDetailTable.ZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP4Null() {
                this[this.tableVendorDetailTable.ZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERDATANull() {
                return this.IsNull(this.tableVendorDetailTable.USERDATAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERDATANull() {
                this[this.tableVendorDetailTable.USERDATAColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientVendorViewTableRow : global::System.Data.DataRow {
            
            private ClientVendorViewTableDataTable tableClientVendorViewTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientVendorViewTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientVendorViewTable = ((ClientVendorViewTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_NUMBER\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_DIV_NUM {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_DIV_NUM\' in table \'ClientVendorViewTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VENDOR_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VENDOR_NUMBER\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_CODE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_CODE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZONE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_TYPE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NON_SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NON_SAN_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NON_SAN_LABEL\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAN_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.SAN_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAN_LABEL\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.SAN_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.ZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP4\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.ZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERDATA {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.USERDATAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USERDATA\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.USERDATAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENTS_VENDOR {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENTS_VENDOR\' in table \'ClientVendorViewTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCAL_LANE {
                get {
                    try {
                        return ((string)(this[this.tableClientVendorViewTable.LOCAL_LANEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCAL_LANE\' in table \'ClientVendorViewTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_NUMBERNull() {
                this[this.tableClientVendorViewTable.CLIENT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_DIV_NUMNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_DIV_NUMNull() {
                this[this.tableClientVendorViewTable.CLIENT_DIV_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENDOR_NUMBERNull() {
                return this.IsNull(this.tableClientVendorViewTable.VENDOR_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENDOR_NUMBERNull() {
                this[this.tableClientVendorViewTable.VENDOR_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_CODENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_CODENull() {
                this[this.tableClientVendorViewTable.ZONE_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_TYPENull() {
                return this.IsNull(this.tableClientVendorViewTable.ZONE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_TYPENull() {
                this[this.tableClientVendorViewTable.ZONE_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNON_SAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.NON_SAN_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNON_SAN_LABELNull() {
                this[this.tableClientVendorViewTable.NON_SAN_LABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAN_LABELNull() {
                return this.IsNull(this.tableClientVendorViewTable.SAN_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAN_LABELNull() {
                this[this.tableClientVendorViewTable.SAN_LABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableClientVendorViewTable.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableClientVendorViewTable.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableClientVendorViewTable.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableClientVendorViewTable.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableClientVendorViewTable.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableClientVendorViewTable.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableClientVendorViewTable.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableClientVendorViewTable.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tableClientVendorViewTable.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tableClientVendorViewTable.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP4Null() {
                return this.IsNull(this.tableClientVendorViewTable.ZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP4Null() {
                this[this.tableClientVendorViewTable.ZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableClientVendorViewTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableClientVendorViewTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERDATANull() {
                return this.IsNull(this.tableClientVendorViewTable.USERDATAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERDATANull() {
                this[this.tableClientVendorViewTable.USERDATAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENTS_VENDORNull() {
                return this.IsNull(this.tableClientVendorViewTable.CLIENTS_VENDORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENTS_VENDORNull() {
                this[this.tableClientVendorViewTable.CLIENTS_VENDORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCAL_LANENull() {
                return this.IsNull(this.tableClientVendorViewTable.LOCAL_LANEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCAL_LANENull() {
                this[this.tableClientVendorViewTable.LOCAL_LANEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZoneDetailTableRow : global::System.Data.DataRow {
            
            private ZoneDetailTableDataTable tableZoneDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZoneDetailTable = ((ZoneDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRAILER_LOAD_NUM {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.TRAILER_LOAD_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRAILER_LOAD_NUM\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.TRAILER_LOAD_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABEL_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.LABEL_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LABEL_TYPE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.LABEL_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LANE {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.LANEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LANE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.LANEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RB_TL_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.RB_TL_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RB_TL_NUMBER\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.RB_TL_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgentID {
                get {
                    try {
                        return ((int)(this[this.tableZoneDetailTable.AgentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentID\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.AgentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AGENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.AGENT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AGENT_NUMBER\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.AGENT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCATION\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortCenterID {
                get {
                    try {
                        return ((int)(this[this.tableZoneDetailTable.SortCenterIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SortCenterID\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.SortCenterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SHIP_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableZoneDetailTable.SHIP_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHIP_DATE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.SHIP_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAN_BE_CLOSED {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.CAN_BE_CLOSEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAN_BE_CLOSED\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.CAN_BE_CLOSEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OSDStatus {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.OSDStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSDStatus\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.OSDStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABELTYPE {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.LABELTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LABELTYPE\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.LABELTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LANE_SMALL_SORT {
                get {
                    try {
                        return ((string)(this[this.tableZoneDetailTable.LANE_SMALL_SORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LANE_SMALL_SORT\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.LANE_SMALL_SORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsMain {
                get {
                    try {
                        return ((short)(this[this.tableZoneDetailTable.IsMainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMain\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.IsMainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ShipScdeToClose {
                get {
                    try {
                        return ((short)(this[this.tableZoneDetailTable.ShipScdeToCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipScdeToClose\' in table \'ZoneDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneDetailTable.ShipScdeToCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tableZoneDetailTable.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tableZoneDetailTable.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPENull() {
                return this.IsNull(this.tableZoneDetailTable.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPENull() {
                this[this.tableZoneDetailTable.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRAILER_LOAD_NUMNull() {
                return this.IsNull(this.tableZoneDetailTable.TRAILER_LOAD_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRAILER_LOAD_NUMNull() {
                this[this.tableZoneDetailTable.TRAILER_LOAD_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLABEL_TYPENull() {
                return this.IsNull(this.tableZoneDetailTable.LABEL_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLABEL_TYPENull() {
                this[this.tableZoneDetailTable.LABEL_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLANENull() {
                return this.IsNull(this.tableZoneDetailTable.LANEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLANENull() {
                this[this.tableZoneDetailTable.LANEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableZoneDetailTable.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tableZoneDetailTable.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRB_TL_NUMBERNull() {
                return this.IsNull(this.tableZoneDetailTable.RB_TL_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRB_TL_NUMBERNull() {
                this[this.tableZoneDetailTable.RB_TL_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentIDNull() {
                return this.IsNull(this.tableZoneDetailTable.AgentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentIDNull() {
                this[this.tableZoneDetailTable.AgentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGENT_NUMBERNull() {
                return this.IsNull(this.tableZoneDetailTable.AGENT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAGENT_NUMBERNull() {
                this[this.tableZoneDetailTable.AGENT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableZoneDetailTable.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableZoneDetailTable.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONNull() {
                return this.IsNull(this.tableZoneDetailTable.LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONNull() {
                this[this.tableZoneDetailTable.LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortCenterIDNull() {
                return this.IsNull(this.tableZoneDetailTable.SortCenterIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortCenterIDNull() {
                this[this.tableZoneDetailTable.SortCenterIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSHIP_DATENull() {
                return this.IsNull(this.tableZoneDetailTable.SHIP_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSHIP_DATENull() {
                this[this.tableZoneDetailTable.SHIP_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAN_BE_CLOSEDNull() {
                return this.IsNull(this.tableZoneDetailTable.CAN_BE_CLOSEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAN_BE_CLOSEDNull() {
                this[this.tableZoneDetailTable.CAN_BE_CLOSEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSDStatusNull() {
                return this.IsNull(this.tableZoneDetailTable.OSDStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSDStatusNull() {
                this[this.tableZoneDetailTable.OSDStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLABELTYPENull() {
                return this.IsNull(this.tableZoneDetailTable.LABELTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLABELTYPENull() {
                this[this.tableZoneDetailTable.LABELTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLANE_SMALL_SORTNull() {
                return this.IsNull(this.tableZoneDetailTable.LANE_SMALL_SORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLANE_SMALL_SORTNull() {
                this[this.tableZoneDetailTable.LANE_SMALL_SORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMainNull() {
                return this.IsNull(this.tableZoneDetailTable.IsMainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMainNull() {
                this[this.tableZoneDetailTable.IsMainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipScdeToCloseNull() {
                return this.IsNull(this.tableZoneDetailTable.ShipScdeToCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipScdeToCloseNull() {
                this[this.tableZoneDetailTable.ShipScdeToCloseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkstationDetailTableRow : global::System.Data.DataRow {
            
            private WorkstationDetailTableDataTable tableWorkstationDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkstationDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkstationDetailTable = ((WorkstationDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkStationID {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.WorkStationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkStationID\' in table \'WorkstationDetailTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.WorkStationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'WorkstationDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'WorkstationDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableWorkstationDetailTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'WorkstationDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkstationDetailTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkStationIDNull() {
                return this.IsNull(this.tableWorkstationDetailTable.WorkStationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkStationIDNull() {
                this[this.tableWorkstationDetailTable.WorkStationIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableWorkstationDetailTable.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableWorkstationDetailTable.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableWorkstationDetailTable.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableWorkstationDetailTable.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableWorkstationDetailTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableWorkstationDetailTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FreightDetailTableRow : global::System.Data.DataRow {
            
            private FreightDetailTableDataTable tableFreightDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FreightDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFreightDetailTable = ((FreightDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LanePrefix {
                get {
                    try {
                        return ((string)(this[this.tableFreightDetailTable.LanePrefixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LanePrefix\' in table \'FreightDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightDetailTable.LanePrefixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanePrefixNull() {
                return this.IsNull(this.tableFreightDetailTable.LanePrefixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanePrefixNull() {
                this[this.tableFreightDetailTable.LanePrefixColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabelDetailTableRowChangeEvent : global::System.EventArgs {
            
            private LabelDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableRowChangeEvent(LabelDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CartonDetailTableRowChangeEvent : global::System.EventArgs {
            
            private CartonDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableRowChangeEvent(CartonDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CartonDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientDetailTableRowChangeEvent : global::System.EventArgs {
            
            private ClientDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableRowChangeEvent(ClientDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoreDetailTableRowChangeEvent : global::System.EventArgs {
            
            private StoreDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableRowChangeEvent(StoreDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VendorDetailTableRowChangeEvent : global::System.EventArgs {
            
            private VendorDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableRowChangeEvent(VendorDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendorDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientVendorViewTableRowChangeEvent : global::System.EventArgs {
            
            private ClientVendorViewTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRowChangeEvent(ClientVendorViewTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientVendorViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZoneDetailTableRowChangeEvent : global::System.EventArgs {
            
            private ZoneDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableRowChangeEvent(ZoneDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkstationDetailTableRowChangeEvent : global::System.EventArgs {
            
            private WorkstationDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableRowChangeEvent(WorkstationDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkstationDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FreightDetailTableRowChangeEvent : global::System.EventArgs {
            
            private FreightDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableRowChangeEvent(FreightDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FreightDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591