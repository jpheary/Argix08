//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tsort.Freight {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("InboundFreightDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InboundFreightDS : System.Data.DataSet {
        
        private DirectInboundFreightTableDataTable tableDirectInboundFreightTable;
        
        private IndirectInboundFreightTableDataTable tableIndirectInboundFreightTable;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InboundFreightDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InboundFreightDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DirectInboundFreightTable"] != null)) {
                    base.Tables.Add(new DirectInboundFreightTableDataTable(ds.Tables["DirectInboundFreightTable"]));
                }
                if ((ds.Tables["IndirectInboundFreightTable"] != null)) {
                    base.Tables.Add(new IndirectInboundFreightTableDataTable(ds.Tables["IndirectInboundFreightTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DirectInboundFreightTableDataTable DirectInboundFreightTable {
            get {
                return this.tableDirectInboundFreightTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IndirectInboundFreightTableDataTable IndirectInboundFreightTable {
            get {
                return this.tableIndirectInboundFreightTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            InboundFreightDS cln = ((InboundFreightDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DirectInboundFreightTable"] != null)) {
                    base.Tables.Add(new DirectInboundFreightTableDataTable(ds.Tables["DirectInboundFreightTable"]));
                }
                if ((ds.Tables["IndirectInboundFreightTable"] != null)) {
                    base.Tables.Add(new IndirectInboundFreightTableDataTable(ds.Tables["IndirectInboundFreightTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDirectInboundFreightTable = ((DirectInboundFreightTableDataTable)(base.Tables["DirectInboundFreightTable"]));
            if ((initTable == true)) {
                if ((this.tableDirectInboundFreightTable != null)) {
                    this.tableDirectInboundFreightTable.InitVars();
                }
            }
            this.tableIndirectInboundFreightTable = ((IndirectInboundFreightTableDataTable)(base.Tables["IndirectInboundFreightTable"]));
            if ((initTable == true)) {
                if ((this.tableIndirectInboundFreightTable != null)) {
                    this.tableIndirectInboundFreightTable.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InboundFreightDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InboundFreightDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDirectInboundFreightTable = new DirectInboundFreightTableDataTable();
            base.Tables.Add(this.tableDirectInboundFreightTable);
            this.tableIndirectInboundFreightTable = new IndirectInboundFreightTableDataTable();
            base.Tables.Add(this.tableIndirectInboundFreightTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDirectInboundFreightTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIndirectInboundFreightTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            InboundFreightDS ds = new InboundFreightDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DirectInboundFreightTableRowChangeEventHandler(object sender, DirectInboundFreightTableRowChangeEvent e);
        
        public delegate void IndirectInboundFreightTableRowChangeEventHandler(object sender, IndirectInboundFreightTableRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DirectInboundFreightTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFreightID;
            
            private System.Data.DataColumn columnFreightType;
            
            private System.Data.DataColumn columnCurrentLocation;
            
            private System.Data.DataColumn columnTDSNumber;
            
            private System.Data.DataColumn columnTrailerNumber;
            
            private System.Data.DataColumn columnStorageTrailerNumber;
            
            private System.Data.DataColumn columnClientNumber;
            
            private System.Data.DataColumn columnClientName;
            
            private System.Data.DataColumn columnShipperNumber;
            
            private System.Data.DataColumn columnShipperName;
            
            private System.Data.DataColumn columnPickupID;
            
            private System.Data.DataColumn columnPickupDate;
            
            private System.Data.DataColumn columnPickupNumber;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnCartons;
            
            private System.Data.DataColumn columnPallets;
            
            private System.Data.DataColumn columnCarrierNumber;
            
            private System.Data.DataColumn columnDriverNumber;
            
            private System.Data.DataColumn columnFloorStatus;
            
            private System.Data.DataColumn columnSealNumber;
            
            private System.Data.DataColumn columnUnloadedStatus;
            
            private System.Data.DataColumn columnVendorKey;
            
            private System.Data.DataColumn columnReceiveDate;
            
            private System.Data.DataColumn columnTerminalID;
            
            private System.Data.DataColumn columnCubeRatio;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableDataTable() {
                this.TableName = "DirectInboundFreightTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectInboundFreightTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DirectInboundFreightTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FreightIDColumn {
                get {
                    return this.columnFreightID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CurrentLocationColumn {
                get {
                    return this.columnCurrentLocation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TDSNumberColumn {
                get {
                    return this.columnTDSNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageTrailerNumberColumn {
                get {
                    return this.columnStorageTrailerNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShipperNumberColumn {
                get {
                    return this.columnShipperNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShipperNameColumn {
                get {
                    return this.columnShipperName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PickupIDColumn {
                get {
                    return this.columnPickupID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PickupDateColumn {
                get {
                    return this.columnPickupDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PickupNumberColumn {
                get {
                    return this.columnPickupNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarrierNumberColumn {
                get {
                    return this.columnCarrierNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DriverNumberColumn {
                get {
                    return this.columnDriverNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FloorStatusColumn {
                get {
                    return this.columnFloorStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SealNumberColumn {
                get {
                    return this.columnSealNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnloadedStatusColumn {
                get {
                    return this.columnUnloadedStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VendorKeyColumn {
                get {
                    return this.columnVendorKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiveDateColumn {
                get {
                    return this.columnReceiveDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CubeRatioColumn {
                get {
                    return this.columnCubeRatio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableRow this[int index] {
                get {
                    return ((DirectInboundFreightTableRow)(this.Rows[index]));
                }
            }
            
            public event DirectInboundFreightTableRowChangeEventHandler DirectInboundFreightTableRowChanging;
            
            public event DirectInboundFreightTableRowChangeEventHandler DirectInboundFreightTableRowChanged;
            
            public event DirectInboundFreightTableRowChangeEventHandler DirectInboundFreightTableRowDeleting;
            
            public event DirectInboundFreightTableRowChangeEventHandler DirectInboundFreightTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDirectInboundFreightTableRow(DirectInboundFreightTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableRow AddDirectInboundFreightTableRow(
                        string FreightID, 
                        string FreightType, 
                        string CurrentLocation, 
                        int TDSNumber, 
                        string TrailerNumber, 
                        string StorageTrailerNumber, 
                        string ClientNumber, 
                        string ClientName, 
                        string ShipperNumber, 
                        string ShipperName, 
                        string PickupID, 
                        string PickupDate, 
                        string PickupNumber, 
                        string Status, 
                        int Cartons, 
                        int Pallets, 
                        int CarrierNumber, 
                        int DriverNumber, 
                        string FloorStatus, 
                        string SealNumber, 
                        string UnloadedStatus, 
                        string VendorKey, 
                        string ReceiveDate, 
                        int TerminalID, 
                        decimal CubeRatio) {
                DirectInboundFreightTableRow rowDirectInboundFreightTableRow = ((DirectInboundFreightTableRow)(this.NewRow()));
                rowDirectInboundFreightTableRow.ItemArray = new object[] {
                        FreightID,
                        FreightType,
                        CurrentLocation,
                        TDSNumber,
                        TrailerNumber,
                        StorageTrailerNumber,
                        ClientNumber,
                        ClientName,
                        ShipperNumber,
                        ShipperName,
                        PickupID,
                        PickupDate,
                        PickupNumber,
                        Status,
                        Cartons,
                        Pallets,
                        CarrierNumber,
                        DriverNumber,
                        FloorStatus,
                        SealNumber,
                        UnloadedStatus,
                        VendorKey,
                        ReceiveDate,
                        TerminalID,
                        CubeRatio};
                this.Rows.Add(rowDirectInboundFreightTableRow);
                return rowDirectInboundFreightTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DirectInboundFreightTableDataTable cln = ((DirectInboundFreightTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DirectInboundFreightTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFreightID = base.Columns["FreightID"];
                this.columnFreightType = base.Columns["FreightType"];
                this.columnCurrentLocation = base.Columns["CurrentLocation"];
                this.columnTDSNumber = base.Columns["TDSNumber"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnStorageTrailerNumber = base.Columns["StorageTrailerNumber"];
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnShipperNumber = base.Columns["ShipperNumber"];
                this.columnShipperName = base.Columns["ShipperName"];
                this.columnPickupID = base.Columns["PickupID"];
                this.columnPickupDate = base.Columns["PickupDate"];
                this.columnPickupNumber = base.Columns["PickupNumber"];
                this.columnStatus = base.Columns["Status"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnPallets = base.Columns["Pallets"];
                this.columnCarrierNumber = base.Columns["CarrierNumber"];
                this.columnDriverNumber = base.Columns["DriverNumber"];
                this.columnFloorStatus = base.Columns["FloorStatus"];
                this.columnSealNumber = base.Columns["SealNumber"];
                this.columnUnloadedStatus = base.Columns["UnloadedStatus"];
                this.columnVendorKey = base.Columns["VendorKey"];
                this.columnReceiveDate = base.Columns["ReceiveDate"];
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnCubeRatio = base.Columns["CubeRatio"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFreightID = new System.Data.DataColumn("FreightID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightID);
                this.columnFreightType = new System.Data.DataColumn("FreightType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightType);
                this.columnCurrentLocation = new System.Data.DataColumn("CurrentLocation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentLocation);
                this.columnTDSNumber = new System.Data.DataColumn("TDSNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDSNumber);
                this.columnTrailerNumber = new System.Data.DataColumn("TrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnStorageTrailerNumber = new System.Data.DataColumn("StorageTrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageTrailerNumber);
                this.columnClientNumber = new System.Data.DataColumn("ClientNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnClientName = new System.Data.DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnShipperNumber = new System.Data.DataColumn("ShipperNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperNumber);
                this.columnShipperName = new System.Data.DataColumn("ShipperName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperName);
                this.columnPickupID = new System.Data.DataColumn("PickupID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupID);
                this.columnPickupDate = new System.Data.DataColumn("PickupDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupDate);
                this.columnPickupNumber = new System.Data.DataColumn("PickupNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupNumber);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnCartons = new System.Data.DataColumn("Cartons", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnPallets = new System.Data.DataColumn("Pallets", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPallets);
                this.columnCarrierNumber = new System.Data.DataColumn("CarrierNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrierNumber);
                this.columnDriverNumber = new System.Data.DataColumn("DriverNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverNumber);
                this.columnFloorStatus = new System.Data.DataColumn("FloorStatus", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloorStatus);
                this.columnSealNumber = new System.Data.DataColumn("SealNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealNumber);
                this.columnUnloadedStatus = new System.Data.DataColumn("UnloadedStatus", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnloadedStatus);
                this.columnVendorKey = new System.Data.DataColumn("VendorKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorKey);
                this.columnReceiveDate = new System.Data.DataColumn("ReceiveDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiveDate);
                this.columnTerminalID = new System.Data.DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnCubeRatio = new System.Data.DataColumn("CubeRatio", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCubeRatio);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableRow NewDirectInboundFreightTableRow() {
                return ((DirectInboundFreightTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DirectInboundFreightTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DirectInboundFreightTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DirectInboundFreightTableRowChanged != null)) {
                    this.DirectInboundFreightTableRowChanged(this, new DirectInboundFreightTableRowChangeEvent(((DirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DirectInboundFreightTableRowChanging != null)) {
                    this.DirectInboundFreightTableRowChanging(this, new DirectInboundFreightTableRowChangeEvent(((DirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DirectInboundFreightTableRowDeleted != null)) {
                    this.DirectInboundFreightTableRowDeleted(this, new DirectInboundFreightTableRowChangeEvent(((DirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DirectInboundFreightTableRowDeleting != null)) {
                    this.DirectInboundFreightTableRowDeleting(this, new DirectInboundFreightTableRowChangeEvent(((DirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDirectInboundFreightTableRow(DirectInboundFreightTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                InboundFreightDS ds = new InboundFreightDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DirectInboundFreightTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IndirectInboundFreightTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnCartonCount;
            
            private System.Data.DataColumn columnCarrier;
            
            private System.Data.DataColumn columnTrailerNumber;
            
            private System.Data.DataColumn columnStarted;
            
            private System.Data.DataColumn columnStopped;
            
            private System.Data.DataColumn columnExported;
            
            private System.Data.DataColumn columnImported;
            
            private System.Data.DataColumn columnScanned;
            
            private System.Data.DataColumn columnOSDSend;
            
            private System.Data.DataColumn columnReceived;
            
            private System.Data.DataColumn columnCartonsExported;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableDataTable() {
                this.TableName = "IndirectInboundFreightTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndirectInboundFreightTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IndirectInboundFreightTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CartonCountColumn {
                get {
                    return this.columnCartonCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartedColumn {
                get {
                    return this.columnStarted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StoppedColumn {
                get {
                    return this.columnStopped;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExportedColumn {
                get {
                    return this.columnExported;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImportedColumn {
                get {
                    return this.columnImported;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScannedColumn {
                get {
                    return this.columnScanned;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSDSendColumn {
                get {
                    return this.columnOSDSend;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceivedColumn {
                get {
                    return this.columnReceived;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CartonsExportedColumn {
                get {
                    return this.columnCartonsExported;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableRow this[int index] {
                get {
                    return ((IndirectInboundFreightTableRow)(this.Rows[index]));
                }
            }
            
            public event IndirectInboundFreightTableRowChangeEventHandler IndirectInboundFreightTableRowChanging;
            
            public event IndirectInboundFreightTableRowChangeEventHandler IndirectInboundFreightTableRowChanged;
            
            public event IndirectInboundFreightTableRowChangeEventHandler IndirectInboundFreightTableRowDeleting;
            
            public event IndirectInboundFreightTableRowChangeEventHandler IndirectInboundFreightTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIndirectInboundFreightTableRow(IndirectInboundFreightTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableRow AddIndirectInboundFreightTableRow(string Number, int CartonCount, string Carrier, string TrailerNumber, System.DateTime Started, System.DateTime Stopped, System.DateTime Exported, System.DateTime Imported, System.DateTime Scanned, System.DateTime OSDSend, System.DateTime Received, int CartonsExported) {
                IndirectInboundFreightTableRow rowIndirectInboundFreightTableRow = ((IndirectInboundFreightTableRow)(this.NewRow()));
                rowIndirectInboundFreightTableRow.ItemArray = new object[] {
                        Number,
                        CartonCount,
                        Carrier,
                        TrailerNumber,
                        Started,
                        Stopped,
                        Exported,
                        Imported,
                        Scanned,
                        OSDSend,
                        Received,
                        CartonsExported};
                this.Rows.Add(rowIndirectInboundFreightTableRow);
                return rowIndirectInboundFreightTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IndirectInboundFreightTableDataTable cln = ((IndirectInboundFreightTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IndirectInboundFreightTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnCartonCount = base.Columns["CartonCount"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnStarted = base.Columns["Started"];
                this.columnStopped = base.Columns["Stopped"];
                this.columnExported = base.Columns["Exported"];
                this.columnImported = base.Columns["Imported"];
                this.columnScanned = base.Columns["Scanned"];
                this.columnOSDSend = base.Columns["OSDSend"];
                this.columnReceived = base.Columns["Received"];
                this.columnCartonsExported = base.Columns["CartonsExported"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnCartonCount = new System.Data.DataColumn("CartonCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonCount);
                this.columnCarrier = new System.Data.DataColumn("Carrier", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnTrailerNumber = new System.Data.DataColumn("TrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnStarted = new System.Data.DataColumn("Started", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStarted);
                this.columnStopped = new System.Data.DataColumn("Stopped", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopped);
                this.columnExported = new System.Data.DataColumn("Exported", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExported);
                this.columnImported = new System.Data.DataColumn("Imported", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnImported);
                this.columnScanned = new System.Data.DataColumn("Scanned", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanned);
                this.columnOSDSend = new System.Data.DataColumn("OSDSend", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSDSend);
                this.columnReceived = new System.Data.DataColumn("Received", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceived);
                this.columnCartonsExported = new System.Data.DataColumn("CartonsExported", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsExported);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableRow NewIndirectInboundFreightTableRow() {
                return ((IndirectInboundFreightTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IndirectInboundFreightTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IndirectInboundFreightTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IndirectInboundFreightTableRowChanged != null)) {
                    this.IndirectInboundFreightTableRowChanged(this, new IndirectInboundFreightTableRowChangeEvent(((IndirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IndirectInboundFreightTableRowChanging != null)) {
                    this.IndirectInboundFreightTableRowChanging(this, new IndirectInboundFreightTableRowChangeEvent(((IndirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IndirectInboundFreightTableRowDeleted != null)) {
                    this.IndirectInboundFreightTableRowDeleted(this, new IndirectInboundFreightTableRowChangeEvent(((IndirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IndirectInboundFreightTableRowDeleting != null)) {
                    this.IndirectInboundFreightTableRowDeleting(this, new IndirectInboundFreightTableRowChangeEvent(((IndirectInboundFreightTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIndirectInboundFreightTableRow(IndirectInboundFreightTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                InboundFreightDS ds = new InboundFreightDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IndirectInboundFreightTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DirectInboundFreightTableRow : System.Data.DataRow {
            
            private DirectInboundFreightTableDataTable tableDirectInboundFreightTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectInboundFreightTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDirectInboundFreightTable = ((DirectInboundFreightTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightID {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.FreightIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FreightID\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.FreightIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightType {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.FreightTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FreightType\' in table \'DirectInboundFreightTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.FreightTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentLocation {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.CurrentLocationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CurrentLocation\' in table \'DirectInboundFreightTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.CurrentLocationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TDSNumber {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.TDSNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TDSNumber\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.TDSNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.TrailerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'DirectInboundFreightTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.TrailerNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorageTrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.StorageTrailerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StorageTrailerNumber\' in table \'DirectInboundFreightTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.StorageTrailerNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.ClientNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'DirectInboundFreightTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.ClientNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.ClientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientName\' in table \'DirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.ClientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.ShipperNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShipperNumber\' in table \'DirectInboundFreightTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.ShipperNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperName {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.ShipperNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShipperName\' in table \'DirectInboundFreightTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.ShipperNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PickupID {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.PickupIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PickupID\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.PickupIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PickupDate {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.PickupDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PickupDate\' in table \'DirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.PickupDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PickupNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.PickupNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PickupNumber\' in table \'DirectInboundFreightTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.PickupNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.CartonsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cartons\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.CartonsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.PalletsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Pallets\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.PalletsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CarrierNumber {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.CarrierNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CarrierNumber\' in table \'DirectInboundFreightTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.CarrierNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DriverNumber {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.DriverNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DriverNumber\' in table \'DirectInboundFreightTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.DriverNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FloorStatus {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.FloorStatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FloorStatus\' in table \'DirectInboundFreightTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.FloorStatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SealNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.SealNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SealNumber\' in table \'DirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.SealNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnloadedStatus {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.UnloadedStatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UnloadedStatus\' in table \'DirectInboundFreightTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.UnloadedStatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorKey {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.VendorKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VendorKey\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.VendorKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiveDate {
                get {
                    try {
                        return ((string)(this[this.tableDirectInboundFreightTable.ReceiveDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReceiveDate\' in table \'DirectInboundFreightTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.ReceiveDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableDirectInboundFreightTable.TerminalIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TerminalID\' in table \'DirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.TerminalIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CubeRatio {
                get {
                    try {
                        return ((decimal)(this[this.tableDirectInboundFreightTable.CubeRatioColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CubeRatio\' in table \'DirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectInboundFreightTable.CubeRatioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightIDNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.FreightIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightIDNull() {
                this[this.tableDirectInboundFreightTable.FreightIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightTypeNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.FreightTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightTypeNull() {
                this[this.tableDirectInboundFreightTable.FreightTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentLocationNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.CurrentLocationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentLocationNull() {
                this[this.tableDirectInboundFreightTable.CurrentLocationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTDSNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.TDSNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTDSNumberNull() {
                this[this.tableDirectInboundFreightTable.TDSNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.TrailerNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableDirectInboundFreightTable.TrailerNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStorageTrailerNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.StorageTrailerNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStorageTrailerNumberNull() {
                this[this.tableDirectInboundFreightTable.StorageTrailerNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.ClientNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableDirectInboundFreightTable.ClientNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.ClientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableDirectInboundFreightTable.ClientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.ShipperNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNumberNull() {
                this[this.tableDirectInboundFreightTable.ShipperNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNameNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.ShipperNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNameNull() {
                this[this.tableDirectInboundFreightTable.ShipperNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupIDNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.PickupIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupIDNull() {
                this[this.tableDirectInboundFreightTable.PickupIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupDateNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.PickupDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupDateNull() {
                this[this.tableDirectInboundFreightTable.PickupDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.PickupNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupNumberNull() {
                this[this.tableDirectInboundFreightTable.PickupNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableDirectInboundFreightTable.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.CartonsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableDirectInboundFreightTable.CartonsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.PalletsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsNull() {
                this[this.tableDirectInboundFreightTable.PalletsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.CarrierNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNumberNull() {
                this[this.tableDirectInboundFreightTable.CarrierNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.DriverNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNumberNull() {
                this[this.tableDirectInboundFreightTable.DriverNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloorStatusNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.FloorStatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloorStatusNull() {
                this[this.tableDirectInboundFreightTable.FloorStatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSealNumberNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.SealNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSealNumberNull() {
                this[this.tableDirectInboundFreightTable.SealNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnloadedStatusNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.UnloadedStatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnloadedStatusNull() {
                this[this.tableDirectInboundFreightTable.UnloadedStatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorKeyNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.VendorKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorKeyNull() {
                this[this.tableDirectInboundFreightTable.VendorKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiveDateNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.ReceiveDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiveDateNull() {
                this[this.tableDirectInboundFreightTable.ReceiveDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.TerminalIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalIDNull() {
                this[this.tableDirectInboundFreightTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCubeRatioNull() {
                return this.IsNull(this.tableDirectInboundFreightTable.CubeRatioColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCubeRatioNull() {
                this[this.tableDirectInboundFreightTable.CubeRatioColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IndirectInboundFreightTableRow : System.Data.DataRow {
            
            private IndirectInboundFreightTableDataTable tableIndirectInboundFreightTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndirectInboundFreightTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIndirectInboundFreightTable = ((IndirectInboundFreightTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableIndirectInboundFreightTable.NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Number\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonCount {
                get {
                    try {
                        return ((int)(this[this.tableIndirectInboundFreightTable.CartonCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CartonCount\' in table \'IndirectInboundFreightTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.CartonCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Carrier {
                get {
                    try {
                        return ((string)(this[this.tableIndirectInboundFreightTable.CarrierColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Carrier\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.CarrierColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableIndirectInboundFreightTable.TrailerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'IndirectInboundFreightTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.TrailerNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Started {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.StartedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Started\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.StartedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Stopped {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.StoppedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Stopped\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.StoppedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Exported {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.ExportedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Exported\' in table \'IndirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.ExportedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Imported {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.ImportedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Imported\' in table \'IndirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.ImportedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Scanned {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.ScannedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Scanned\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.ScannedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OSDSend {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.OSDSendColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSDSend\' in table \'IndirectInboundFreightTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.OSDSendColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Received {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIndirectInboundFreightTable.ReceivedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Received\' in table \'IndirectInboundFreightTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.ReceivedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonsExported {
                get {
                    try {
                        return ((int)(this[this.tableIndirectInboundFreightTable.CartonsExportedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CartonsExported\' in table \'IndirectInboundFreightTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectInboundFreightTable.CartonsExportedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableIndirectInboundFreightTable.NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonCountNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.CartonCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonCountNull() {
                this[this.tableIndirectInboundFreightTable.CartonCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.CarrierColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableIndirectInboundFreightTable.CarrierColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.TrailerNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableIndirectInboundFreightTable.TrailerNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.StartedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartedNull() {
                this[this.tableIndirectInboundFreightTable.StartedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoppedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.StoppedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoppedNull() {
                this[this.tableIndirectInboundFreightTable.StoppedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.ExportedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportedNull() {
                this[this.tableIndirectInboundFreightTable.ExportedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.ImportedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedNull() {
                this[this.tableIndirectInboundFreightTable.ImportedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScannedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.ScannedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScannedNull() {
                this[this.tableIndirectInboundFreightTable.ScannedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSDSendNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.OSDSendColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSDSendNull() {
                this[this.tableIndirectInboundFreightTable.OSDSendColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.ReceivedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedNull() {
                this[this.tableIndirectInboundFreightTable.ReceivedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsExportedNull() {
                return this.IsNull(this.tableIndirectInboundFreightTable.CartonsExportedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsExportedNull() {
                this[this.tableIndirectInboundFreightTable.CartonsExportedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DirectInboundFreightTableRowChangeEvent : System.EventArgs {
            
            private DirectInboundFreightTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableRowChangeEvent(DirectInboundFreightTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectInboundFreightTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IndirectInboundFreightTableRowChangeEvent : System.EventArgs {
            
            private IndirectInboundFreightTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableRowChangeEvent(IndirectInboundFreightTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectInboundFreightTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591