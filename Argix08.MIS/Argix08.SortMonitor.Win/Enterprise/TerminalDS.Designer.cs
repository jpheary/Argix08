//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tsort.Enterprise {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("TerminalDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TerminalDS : System.Data.DataSet {
        
        private DBATerminalTableDataTable tableDBATerminalTable;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TerminalDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TerminalDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DBATerminalTable"] != null)) {
                    base.Tables.Add(new DBATerminalTableDataTable(ds.Tables["DBATerminalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DBATerminalTableDataTable DBATerminalTable {
            get {
                return this.tableDBATerminalTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            TerminalDS cln = ((TerminalDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DBATerminalTable"] != null)) {
                    base.Tables.Add(new DBATerminalTableDataTable(ds.Tables["DBATerminalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDBATerminalTable = ((DBATerminalTableDataTable)(base.Tables["DBATerminalTable"]));
            if ((initTable == true)) {
                if ((this.tableDBATerminalTable != null)) {
                    this.tableDBATerminalTable.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TerminalDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TerminalDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDBATerminalTable = new DBATerminalTableDataTable();
            base.Tables.Add(this.tableDBATerminalTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDBATerminalTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            TerminalDS ds = new TerminalDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DBATerminalTableRowChangeEventHandler(object sender, DBATerminalTableRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DBATerminalTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTerminalID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDBServerName;
            
            private System.Data.DataColumn columnLinkedServerName;
            
            private System.Data.DataColumn columnDBType;
            
            private System.Data.DataColumn columnAgentID;
            
            private System.Data.DataColumn columnAgentNumber;
            
            private System.Data.DataColumn columnShipperID;
            
            private System.Data.DataColumn columnClientDivision;
            
            private System.Data.DataColumn columnLocationID;
            
            private System.Data.DataColumn columnMnemonic;
            
            private System.Data.DataColumn columnIsActive;
            
            private System.Data.DataColumn columnSQLConnection;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableDataTable() {
                this.TableName = "DBATerminalTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DBATerminalTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DBATerminalTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBServerNameColumn {
                get {
                    return this.columnDBServerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBTypeColumn {
                get {
                    return this.columnDBType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShipperIDColumn {
                get {
                    return this.columnShipperID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientDivisionColumn {
                get {
                    return this.columnClientDivision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SQLConnectionColumn {
                get {
                    return this.columnSQLConnection;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRow this[int index] {
                get {
                    return ((DBATerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event DBATerminalTableRowChangeEventHandler DBATerminalTableRowChanging;
            
            public event DBATerminalTableRowChangeEventHandler DBATerminalTableRowChanged;
            
            public event DBATerminalTableRowChangeEventHandler DBATerminalTableRowDeleting;
            
            public event DBATerminalTableRowChangeEventHandler DBATerminalTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDBATerminalTableRow(DBATerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRow AddDBATerminalTableRow(int TerminalID, string Number, string Description, string DBServerName, string LinkedServerName, string DBType, int AgentID, string AgentNumber, string ShipperID, string ClientDivision, long LocationID, string Mnemonic, byte IsActive, string SQLConnection) {
                DBATerminalTableRow rowDBATerminalTableRow = ((DBATerminalTableRow)(this.NewRow()));
                rowDBATerminalTableRow.ItemArray = new object[] {
                        TerminalID,
                        Number,
                        Description,
                        DBServerName,
                        LinkedServerName,
                        DBType,
                        AgentID,
                        AgentNumber,
                        ShipperID,
                        ClientDivision,
                        LocationID,
                        Mnemonic,
                        IsActive,
                        SQLConnection};
                this.Rows.Add(rowDBATerminalTableRow);
                return rowDBATerminalTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRow FindByTerminalID(int TerminalID) {
                return ((DBATerminalTableRow)(this.Rows.Find(new object[] {
                            TerminalID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DBATerminalTableDataTable cln = ((DBATerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DBATerminalTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDescription = base.Columns["Description"];
                this.columnDBServerName = base.Columns["DBServerName"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDBType = base.Columns["DBType"];
                this.columnAgentID = base.Columns["AgentID"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnShipperID = base.Columns["ShipperID"];
                this.columnClientDivision = base.Columns["ClientDivision"];
                this.columnLocationID = base.Columns["LocationID"];
                this.columnMnemonic = base.Columns["Mnemonic"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnSQLConnection = base.Columns["SQLConnection"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTerminalID = new System.Data.DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDBServerName = new System.Data.DataColumn("DBServerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBServerName);
                this.columnLinkedServerName = new System.Data.DataColumn("LinkedServerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDBType = new System.Data.DataColumn("DBType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBType);
                this.columnAgentID = new System.Data.DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentID);
                this.columnAgentNumber = new System.Data.DataColumn("AgentNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnShipperID = new System.Data.DataColumn("ShipperID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperID);
                this.columnClientDivision = new System.Data.DataColumn("ClientDivision", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientDivision);
                this.columnLocationID = new System.Data.DataColumn("LocationID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationID);
                this.columnMnemonic = new System.Data.DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMnemonic);
                this.columnIsActive = new System.Data.DataColumn("IsActive", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnSQLConnection = new System.Data.DataColumn("SQLConnection", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSQLConnection);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTerminalID}, true));
                this.columnTerminalID.AllowDBNull = false;
                this.columnTerminalID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.MaxLength = 10;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 40;
                this.columnDBServerName.AllowDBNull = false;
                this.columnDBServerName.MaxLength = 40;
                this.columnLinkedServerName.AllowDBNull = false;
                this.columnLinkedServerName.MaxLength = 40;
                this.columnDBType.AllowDBNull = false;
                this.columnDBType.MaxLength = 20;
                this.columnAgentID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnAgentNumber.MaxLength = 4;
                this.columnShipperID.AllowDBNull = false;
                this.columnShipperID.MaxLength = 9;
                this.columnClientDivision.MaxLength = 2;
                this.columnLocationID.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnMnemonic.MaxLength = 2;
                this.columnIsActive.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRow NewDBATerminalTableRow() {
                return ((DBATerminalTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DBATerminalTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DBATerminalTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DBATerminalTableRowChanged != null)) {
                    this.DBATerminalTableRowChanged(this, new DBATerminalTableRowChangeEvent(((DBATerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DBATerminalTableRowChanging != null)) {
                    this.DBATerminalTableRowChanging(this, new DBATerminalTableRowChangeEvent(((DBATerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DBATerminalTableRowDeleted != null)) {
                    this.DBATerminalTableRowDeleted(this, new DBATerminalTableRowChangeEvent(((DBATerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DBATerminalTableRowDeleting != null)) {
                    this.DBATerminalTableRowDeleting(this, new DBATerminalTableRowChangeEvent(((DBATerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDBATerminalTableRow(DBATerminalTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TerminalDS ds = new TerminalDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DBATerminalTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DBATerminalTableRow : System.Data.DataRow {
            
            private DBATerminalTableDataTable tableDBATerminalTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DBATerminalTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDBATerminalTable = ((DBATerminalTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    return ((int)(this[this.tableDBATerminalTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.TerminalIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableDBATerminalTable.NumberColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableDBATerminalTable.DescriptionColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBServerName {
                get {
                    return ((string)(this[this.tableDBATerminalTable.DBServerNameColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.DBServerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkedServerName {
                get {
                    return ((string)(this[this.tableDBATerminalTable.LinkedServerNameColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.LinkedServerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBType {
                get {
                    return ((string)(this[this.tableDBATerminalTable.DBTypeColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.DBTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgentID {
                get {
                    return ((int)(this[this.tableDBATerminalTable.AgentIDColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.AgentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableDBATerminalTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.AgentNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperID {
                get {
                    return ((string)(this[this.tableDBATerminalTable.ShipperIDColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.ShipperIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientDivision {
                get {
                    try {
                        return ((string)(this[this.tableDBATerminalTable.ClientDivisionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientDivision\' in table \'DBATerminalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDBATerminalTable.ClientDivisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LocationID {
                get {
                    return ((long)(this[this.tableDBATerminalTable.LocationIDColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.LocationIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mnemonic {
                get {
                    return ((string)(this[this.tableDBATerminalTable.MnemonicColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.MnemonicColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsActive {
                get {
                    return ((byte)(this[this.tableDBATerminalTable.IsActiveColumn]));
                }
                set {
                    this[this.tableDBATerminalTable.IsActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SQLConnection {
                get {
                    try {
                        return ((string)(this[this.tableDBATerminalTable.SQLConnectionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SQLConnection\' in table \'DBATerminalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDBATerminalTable.SQLConnectionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientDivisionNull() {
                return this.IsNull(this.tableDBATerminalTable.ClientDivisionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientDivisionNull() {
                this[this.tableDBATerminalTable.ClientDivisionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSQLConnectionNull() {
                return this.IsNull(this.tableDBATerminalTable.SQLConnectionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSQLConnectionNull() {
                this[this.tableDBATerminalTable.SQLConnectionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DBATerminalTableRowChangeEvent : System.EventArgs {
            
            private DBATerminalTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRowChangeEvent(DBATerminalTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBATerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591