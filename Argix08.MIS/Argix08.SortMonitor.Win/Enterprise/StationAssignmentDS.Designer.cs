//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tsort.Enterprise {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("StationAssignmentDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StationAssignmentDS : System.Data.DataSet {
        
        private IndirectAssignmentTableDataTable tableIndirectAssignmentTable;
        
        private DirectAssignmentTableDataTable tableDirectAssignmentTable;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StationAssignmentDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StationAssignmentDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["IndirectAssignmentTable"] != null)) {
                    base.Tables.Add(new IndirectAssignmentTableDataTable(ds.Tables["IndirectAssignmentTable"]));
                }
                if ((ds.Tables["DirectAssignmentTable"] != null)) {
                    base.Tables.Add(new DirectAssignmentTableDataTable(ds.Tables["DirectAssignmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IndirectAssignmentTableDataTable IndirectAssignmentTable {
            get {
                return this.tableIndirectAssignmentTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DirectAssignmentTableDataTable DirectAssignmentTable {
            get {
                return this.tableDirectAssignmentTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            StationAssignmentDS cln = ((StationAssignmentDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["IndirectAssignmentTable"] != null)) {
                    base.Tables.Add(new IndirectAssignmentTableDataTable(ds.Tables["IndirectAssignmentTable"]));
                }
                if ((ds.Tables["DirectAssignmentTable"] != null)) {
                    base.Tables.Add(new DirectAssignmentTableDataTable(ds.Tables["DirectAssignmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableIndirectAssignmentTable = ((IndirectAssignmentTableDataTable)(base.Tables["IndirectAssignmentTable"]));
            if ((initTable == true)) {
                if ((this.tableIndirectAssignmentTable != null)) {
                    this.tableIndirectAssignmentTable.InitVars();
                }
            }
            this.tableDirectAssignmentTable = ((DirectAssignmentTableDataTable)(base.Tables["DirectAssignmentTable"]));
            if ((initTable == true)) {
                if ((this.tableDirectAssignmentTable != null)) {
                    this.tableDirectAssignmentTable.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StationAssignmentDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StationAssignmentDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableIndirectAssignmentTable = new IndirectAssignmentTableDataTable();
            base.Tables.Add(this.tableIndirectAssignmentTable);
            this.tableDirectAssignmentTable = new DirectAssignmentTableDataTable();
            base.Tables.Add(this.tableDirectAssignmentTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIndirectAssignmentTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDirectAssignmentTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            StationAssignmentDS ds = new StationAssignmentDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void IndirectAssignmentTableRowChangeEventHandler(object sender, IndirectAssignmentTableRowChangeEvent e);
        
        public delegate void DirectAssignmentTableRowChangeEventHandler(object sender, DirectAssignmentTableRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IndirectAssignmentTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStationNumber;
            
            private System.Data.DataColumn columnTripNumber;
            
            private System.Data.DataColumn columnCartonCount;
            
            private System.Data.DataColumn columnCarrier;
            
            private System.Data.DataColumn columnTrailerNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableDataTable() {
                this.TableName = "IndirectAssignmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndirectAssignmentTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IndirectAssignmentTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StationNumberColumn {
                get {
                    return this.columnStationNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TripNumberColumn {
                get {
                    return this.columnTripNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CartonCountColumn {
                get {
                    return this.columnCartonCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableRow this[int index] {
                get {
                    return ((IndirectAssignmentTableRow)(this.Rows[index]));
                }
            }
            
            public event IndirectAssignmentTableRowChangeEventHandler IndirectAssignmentTableRowChanging;
            
            public event IndirectAssignmentTableRowChangeEventHandler IndirectAssignmentTableRowChanged;
            
            public event IndirectAssignmentTableRowChangeEventHandler IndirectAssignmentTableRowDeleting;
            
            public event IndirectAssignmentTableRowChangeEventHandler IndirectAssignmentTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIndirectAssignmentTableRow(IndirectAssignmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableRow AddIndirectAssignmentTableRow(string StationNumber, string TripNumber, int CartonCount, string Carrier, string TrailerNumber) {
                IndirectAssignmentTableRow rowIndirectAssignmentTableRow = ((IndirectAssignmentTableRow)(this.NewRow()));
                rowIndirectAssignmentTableRow.ItemArray = new object[] {
                        StationNumber,
                        TripNumber,
                        CartonCount,
                        Carrier,
                        TrailerNumber};
                this.Rows.Add(rowIndirectAssignmentTableRow);
                return rowIndirectAssignmentTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IndirectAssignmentTableDataTable cln = ((IndirectAssignmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IndirectAssignmentTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStationNumber = base.Columns["StationNumber"];
                this.columnTripNumber = base.Columns["TripNumber"];
                this.columnCartonCount = base.Columns["CartonCount"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStationNumber = new System.Data.DataColumn("StationNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationNumber);
                this.columnTripNumber = new System.Data.DataColumn("TripNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNumber);
                this.columnCartonCount = new System.Data.DataColumn("CartonCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonCount);
                this.columnCarrier = new System.Data.DataColumn("Carrier", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnTrailerNumber = new System.Data.DataColumn("TrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableRow NewIndirectAssignmentTableRow() {
                return ((IndirectAssignmentTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IndirectAssignmentTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IndirectAssignmentTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IndirectAssignmentTableRowChanged != null)) {
                    this.IndirectAssignmentTableRowChanged(this, new IndirectAssignmentTableRowChangeEvent(((IndirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IndirectAssignmentTableRowChanging != null)) {
                    this.IndirectAssignmentTableRowChanging(this, new IndirectAssignmentTableRowChangeEvent(((IndirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IndirectAssignmentTableRowDeleted != null)) {
                    this.IndirectAssignmentTableRowDeleted(this, new IndirectAssignmentTableRowChangeEvent(((IndirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IndirectAssignmentTableRowDeleting != null)) {
                    this.IndirectAssignmentTableRowDeleting(this, new IndirectAssignmentTableRowChangeEvent(((IndirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIndirectAssignmentTableRow(IndirectAssignmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StationAssignmentDS ds = new StationAssignmentDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IndirectAssignmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DirectAssignmentTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAssignmentID;
            
            private System.Data.DataColumn columnTerminalID;
            
            private System.Data.DataColumn columnStationID;
            
            private System.Data.DataColumn columnStationNumber;
            
            private System.Data.DataColumn columnSortTypeID;
            
            private System.Data.DataColumn columnSortType;
            
            private System.Data.DataColumn columnFreightID;
            
            private System.Data.DataColumn columnFreightType;
            
            private System.Data.DataColumn columnTDSNumber;
            
            private System.Data.DataColumn columnTrailerNumber;
            
            private System.Data.DataColumn columnClientNumber;
            
            private System.Data.DataColumn columnClientDivision;
            
            private System.Data.DataColumn columnClient;
            
            private System.Data.DataColumn columnShipperNumber;
            
            private System.Data.DataColumn columnShipper;
            
            private System.Data.DataColumn columnPickup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableDataTable() {
                this.TableName = "DirectAssignmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectAssignmentTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DirectAssignmentTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssignmentIDColumn {
                get {
                    return this.columnAssignmentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StationNumberColumn {
                get {
                    return this.columnStationNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SortTypeColumn {
                get {
                    return this.columnSortType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FreightIDColumn {
                get {
                    return this.columnFreightID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TDSNumberColumn {
                get {
                    return this.columnTDSNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientDivisionColumn {
                get {
                    return this.columnClientDivision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientColumn {
                get {
                    return this.columnClient;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShipperNumberColumn {
                get {
                    return this.columnShipperNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShipperColumn {
                get {
                    return this.columnShipper;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PickupColumn {
                get {
                    return this.columnPickup;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableRow this[int index] {
                get {
                    return ((DirectAssignmentTableRow)(this.Rows[index]));
                }
            }
            
            public event DirectAssignmentTableRowChangeEventHandler DirectAssignmentTableRowChanging;
            
            public event DirectAssignmentTableRowChangeEventHandler DirectAssignmentTableRowChanged;
            
            public event DirectAssignmentTableRowChangeEventHandler DirectAssignmentTableRowDeleting;
            
            public event DirectAssignmentTableRowChangeEventHandler DirectAssignmentTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDirectAssignmentTableRow(DirectAssignmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableRow AddDirectAssignmentTableRow(
                        string AssignmentID, 
                        int TerminalID, 
                        string StationID, 
                        string StationNumber, 
                        int SortTypeID, 
                        string SortType, 
                        string FreightID, 
                        string FreightType, 
                        int TDSNumber, 
                        string TrailerNumber, 
                        string ClientNumber, 
                        string ClientDivision, 
                        string Client, 
                        string ShipperNumber, 
                        string Shipper, 
                        string Pickup) {
                DirectAssignmentTableRow rowDirectAssignmentTableRow = ((DirectAssignmentTableRow)(this.NewRow()));
                rowDirectAssignmentTableRow.ItemArray = new object[] {
                        AssignmentID,
                        TerminalID,
                        StationID,
                        StationNumber,
                        SortTypeID,
                        SortType,
                        FreightID,
                        FreightType,
                        TDSNumber,
                        TrailerNumber,
                        ClientNumber,
                        ClientDivision,
                        Client,
                        ShipperNumber,
                        Shipper,
                        Pickup};
                this.Rows.Add(rowDirectAssignmentTableRow);
                return rowDirectAssignmentTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DirectAssignmentTableDataTable cln = ((DirectAssignmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DirectAssignmentTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssignmentID = base.Columns["AssignmentID"];
                this.columnTerminalID = base.Columns["TerminalID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnStationNumber = base.Columns["StationNumber"];
                this.columnSortTypeID = base.Columns["SortTypeID"];
                this.columnSortType = base.Columns["SortType"];
                this.columnFreightID = base.Columns["FreightID"];
                this.columnFreightType = base.Columns["FreightType"];
                this.columnTDSNumber = base.Columns["TDSNumber"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnClientDivision = base.Columns["ClientDivision"];
                this.columnClient = base.Columns["Client"];
                this.columnShipperNumber = base.Columns["ShipperNumber"];
                this.columnShipper = base.Columns["Shipper"];
                this.columnPickup = base.Columns["Pickup"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssignmentID = new System.Data.DataColumn("AssignmentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignmentID);
                this.columnTerminalID = new System.Data.DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalID);
                this.columnStationID = new System.Data.DataColumn("StationID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnStationNumber = new System.Data.DataColumn("StationNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationNumber);
                this.columnSortTypeID = new System.Data.DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortTypeID);
                this.columnSortType = new System.Data.DataColumn("SortType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortType);
                this.columnFreightID = new System.Data.DataColumn("FreightID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightID);
                this.columnFreightType = new System.Data.DataColumn("FreightType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightType);
                this.columnTDSNumber = new System.Data.DataColumn("TDSNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTDSNumber);
                this.columnTrailerNumber = new System.Data.DataColumn("TrailerNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnClientNumber = new System.Data.DataColumn("ClientNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnClientDivision = new System.Data.DataColumn("ClientDivision", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientDivision);
                this.columnClient = new System.Data.DataColumn("Client", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnShipperNumber = new System.Data.DataColumn("ShipperNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperNumber);
                this.columnShipper = new System.Data.DataColumn("Shipper", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipper);
                this.columnPickup = new System.Data.DataColumn("Pickup", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickup);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableRow NewDirectAssignmentTableRow() {
                return ((DirectAssignmentTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DirectAssignmentTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DirectAssignmentTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DirectAssignmentTableRowChanged != null)) {
                    this.DirectAssignmentTableRowChanged(this, new DirectAssignmentTableRowChangeEvent(((DirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DirectAssignmentTableRowChanging != null)) {
                    this.DirectAssignmentTableRowChanging(this, new DirectAssignmentTableRowChangeEvent(((DirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DirectAssignmentTableRowDeleted != null)) {
                    this.DirectAssignmentTableRowDeleted(this, new DirectAssignmentTableRowChangeEvent(((DirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DirectAssignmentTableRowDeleting != null)) {
                    this.DirectAssignmentTableRowDeleting(this, new DirectAssignmentTableRowChangeEvent(((DirectAssignmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDirectAssignmentTableRow(DirectAssignmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                StationAssignmentDS ds = new StationAssignmentDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DirectAssignmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IndirectAssignmentTableRow : System.Data.DataRow {
            
            private IndirectAssignmentTableDataTable tableIndirectAssignmentTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndirectAssignmentTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIndirectAssignmentTable = ((IndirectAssignmentTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StationNumber {
                get {
                    try {
                        return ((string)(this[this.tableIndirectAssignmentTable.StationNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StationNumber\' in table \'IndirectAssignmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableIndirectAssignmentTable.StationNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNumber {
                get {
                    try {
                        return ((string)(this[this.tableIndirectAssignmentTable.TripNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TripNumber\' in table \'IndirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectAssignmentTable.TripNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CartonCount {
                get {
                    try {
                        return ((int)(this[this.tableIndirectAssignmentTable.CartonCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CartonCount\' in table \'IndirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectAssignmentTable.CartonCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Carrier {
                get {
                    try {
                        return ((string)(this[this.tableIndirectAssignmentTable.CarrierColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Carrier\' in table \'IndirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndirectAssignmentTable.CarrierColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableIndirectAssignmentTable.TrailerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'IndirectAssignmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableIndirectAssignmentTable.TrailerNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNumberNull() {
                return this.IsNull(this.tableIndirectAssignmentTable.StationNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNumberNull() {
                this[this.tableIndirectAssignmentTable.StationNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNumberNull() {
                return this.IsNull(this.tableIndirectAssignmentTable.TripNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNumberNull() {
                this[this.tableIndirectAssignmentTable.TripNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonCountNull() {
                return this.IsNull(this.tableIndirectAssignmentTable.CartonCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonCountNull() {
                this[this.tableIndirectAssignmentTable.CartonCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableIndirectAssignmentTable.CarrierColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableIndirectAssignmentTable.CarrierColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableIndirectAssignmentTable.TrailerNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableIndirectAssignmentTable.TrailerNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DirectAssignmentTableRow : System.Data.DataRow {
            
            private DirectAssignmentTableDataTable tableDirectAssignmentTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DirectAssignmentTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDirectAssignmentTable = ((DirectAssignmentTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignmentID {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.AssignmentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AssignmentID\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.AssignmentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableDirectAssignmentTable.TerminalIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TerminalID\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.TerminalIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StationID {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.StationIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StationID\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.StationIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StationNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.StationNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StationNumber\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.StationNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortTypeID {
                get {
                    try {
                        return ((int)(this[this.tableDirectAssignmentTable.SortTypeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SortTypeID\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.SortTypeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortType {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.SortTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SortType\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.SortTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightID {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.FreightIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FreightID\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.FreightIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightType {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.FreightTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FreightType\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.FreightTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TDSNumber {
                get {
                    try {
                        return ((int)(this[this.tableDirectAssignmentTable.TDSNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TDSNumber\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.TDSNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.TrailerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.TrailerNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.ClientNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.ClientNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientDivision {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.ClientDivisionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClientDivision\' in table \'DirectAssignmentTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.ClientDivisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Client {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.ClientColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Client\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.ClientColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperNumber {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.ShipperNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShipperNumber\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.ShipperNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shipper {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.ShipperColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Shipper\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.ShipperColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pickup {
                get {
                    try {
                        return ((string)(this[this.tableDirectAssignmentTable.PickupColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Pickup\' in table \'DirectAssignmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDirectAssignmentTable.PickupColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentIDNull() {
                return this.IsNull(this.tableDirectAssignmentTable.AssignmentIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentIDNull() {
                this[this.tableDirectAssignmentTable.AssignmentIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableDirectAssignmentTable.TerminalIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalIDNull() {
                this[this.tableDirectAssignmentTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationIDNull() {
                return this.IsNull(this.tableDirectAssignmentTable.StationIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationIDNull() {
                this[this.tableDirectAssignmentTable.StationIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNumberNull() {
                return this.IsNull(this.tableDirectAssignmentTable.StationNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNumberNull() {
                this[this.tableDirectAssignmentTable.StationNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortTypeIDNull() {
                return this.IsNull(this.tableDirectAssignmentTable.SortTypeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortTypeIDNull() {
                this[this.tableDirectAssignmentTable.SortTypeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortTypeNull() {
                return this.IsNull(this.tableDirectAssignmentTable.SortTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortTypeNull() {
                this[this.tableDirectAssignmentTable.SortTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightIDNull() {
                return this.IsNull(this.tableDirectAssignmentTable.FreightIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightIDNull() {
                this[this.tableDirectAssignmentTable.FreightIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightTypeNull() {
                return this.IsNull(this.tableDirectAssignmentTable.FreightTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightTypeNull() {
                this[this.tableDirectAssignmentTable.FreightTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTDSNumberNull() {
                return this.IsNull(this.tableDirectAssignmentTable.TDSNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTDSNumberNull() {
                this[this.tableDirectAssignmentTable.TDSNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableDirectAssignmentTable.TrailerNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableDirectAssignmentTable.TrailerNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableDirectAssignmentTable.ClientNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableDirectAssignmentTable.ClientNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientDivisionNull() {
                return this.IsNull(this.tableDirectAssignmentTable.ClientDivisionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientDivisionNull() {
                this[this.tableDirectAssignmentTable.ClientDivisionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNull() {
                return this.IsNull(this.tableDirectAssignmentTable.ClientColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNull() {
                this[this.tableDirectAssignmentTable.ClientColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNumberNull() {
                return this.IsNull(this.tableDirectAssignmentTable.ShipperNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNumberNull() {
                this[this.tableDirectAssignmentTable.ShipperNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNull() {
                return this.IsNull(this.tableDirectAssignmentTable.ShipperColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNull() {
                this[this.tableDirectAssignmentTable.ShipperColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupNull() {
                return this.IsNull(this.tableDirectAssignmentTable.PickupColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupNull() {
                this[this.tableDirectAssignmentTable.PickupColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IndirectAssignmentTableRowChangeEvent : System.EventArgs {
            
            private IndirectAssignmentTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableRowChangeEvent(IndirectAssignmentTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndirectAssignmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DirectAssignmentTableRowChangeEvent : System.EventArgs {
            
            private DirectAssignmentTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableRowChangeEvent(DirectAssignmentTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DirectAssignmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591