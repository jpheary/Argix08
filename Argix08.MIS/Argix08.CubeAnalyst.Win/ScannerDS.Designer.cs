//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4963
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.MIS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ScannerDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ScannerDS : global::System.Data.DataSet {
        
        private ScannerTableDataTable tableScannerTable;
        
        private ArgixLogTableDataTable tableArgixLogTable;
        
        private CubeStatisticsTableDataTable tableCubeStatisticsTable;
        
        private CubeStatisticsSummaryTableDataTable tableCubeStatisticsSummaryTable;
        
        private CubeDetailsTableDataTable tableCubeDetailsTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannerDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ScannerDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ScannerTable"] != null)) {
                    base.Tables.Add(new ScannerTableDataTable(ds.Tables["ScannerTable"]));
                }
                if ((ds.Tables["ArgixLogTable"] != null)) {
                    base.Tables.Add(new ArgixLogTableDataTable(ds.Tables["ArgixLogTable"]));
                }
                if ((ds.Tables["CubeStatisticsTable"] != null)) {
                    base.Tables.Add(new CubeStatisticsTableDataTable(ds.Tables["CubeStatisticsTable"]));
                }
                if ((ds.Tables["CubeStatisticsSummaryTable"] != null)) {
                    base.Tables.Add(new CubeStatisticsSummaryTableDataTable(ds.Tables["CubeStatisticsSummaryTable"]));
                }
                if ((ds.Tables["CubeDetailsTable"] != null)) {
                    base.Tables.Add(new CubeDetailsTableDataTable(ds.Tables["CubeDetailsTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScannerTableDataTable ScannerTable {
            get {
                return this.tableScannerTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArgixLogTableDataTable ArgixLogTable {
            get {
                return this.tableArgixLogTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CubeStatisticsTableDataTable CubeStatisticsTable {
            get {
                return this.tableCubeStatisticsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CubeStatisticsSummaryTableDataTable CubeStatisticsSummaryTable {
            get {
                return this.tableCubeStatisticsSummaryTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CubeDetailsTableDataTable CubeDetailsTable {
            get {
                return this.tableCubeDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ScannerDS cln = ((ScannerDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScannerTable"] != null)) {
                    base.Tables.Add(new ScannerTableDataTable(ds.Tables["ScannerTable"]));
                }
                if ((ds.Tables["ArgixLogTable"] != null)) {
                    base.Tables.Add(new ArgixLogTableDataTable(ds.Tables["ArgixLogTable"]));
                }
                if ((ds.Tables["CubeStatisticsTable"] != null)) {
                    base.Tables.Add(new CubeStatisticsTableDataTable(ds.Tables["CubeStatisticsTable"]));
                }
                if ((ds.Tables["CubeStatisticsSummaryTable"] != null)) {
                    base.Tables.Add(new CubeStatisticsSummaryTableDataTable(ds.Tables["CubeStatisticsSummaryTable"]));
                }
                if ((ds.Tables["CubeDetailsTable"] != null)) {
                    base.Tables.Add(new CubeDetailsTableDataTable(ds.Tables["CubeDetailsTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableScannerTable = ((ScannerTableDataTable)(base.Tables["ScannerTable"]));
            if ((initTable == true)) {
                if ((this.tableScannerTable != null)) {
                    this.tableScannerTable.InitVars();
                }
            }
            this.tableArgixLogTable = ((ArgixLogTableDataTable)(base.Tables["ArgixLogTable"]));
            if ((initTable == true)) {
                if ((this.tableArgixLogTable != null)) {
                    this.tableArgixLogTable.InitVars();
                }
            }
            this.tableCubeStatisticsTable = ((CubeStatisticsTableDataTable)(base.Tables["CubeStatisticsTable"]));
            if ((initTable == true)) {
                if ((this.tableCubeStatisticsTable != null)) {
                    this.tableCubeStatisticsTable.InitVars();
                }
            }
            this.tableCubeStatisticsSummaryTable = ((CubeStatisticsSummaryTableDataTable)(base.Tables["CubeStatisticsSummaryTable"]));
            if ((initTable == true)) {
                if ((this.tableCubeStatisticsSummaryTable != null)) {
                    this.tableCubeStatisticsSummaryTable.InitVars();
                }
            }
            this.tableCubeDetailsTable = ((CubeDetailsTableDataTable)(base.Tables["CubeDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableCubeDetailsTable != null)) {
                    this.tableCubeDetailsTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ScannerDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ScannerDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScannerTable = new ScannerTableDataTable();
            base.Tables.Add(this.tableScannerTable);
            this.tableArgixLogTable = new ArgixLogTableDataTable();
            base.Tables.Add(this.tableArgixLogTable);
            this.tableCubeStatisticsTable = new CubeStatisticsTableDataTable();
            base.Tables.Add(this.tableCubeStatisticsTable);
            this.tableCubeStatisticsSummaryTable = new CubeStatisticsSummaryTableDataTable();
            base.Tables.Add(this.tableCubeStatisticsSummaryTable);
            this.tableCubeDetailsTable = new CubeDetailsTableDataTable();
            base.Tables.Add(this.tableCubeDetailsTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScannerTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArgixLogTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCubeStatisticsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCubeStatisticsSummaryTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCubeDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ScannerDS ds = new ScannerDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ScannerTableRowChangeEventHandler(object sender, ScannerTableRowChangeEvent e);
        
        public delegate void ArgixLogTableRowChangeEventHandler(object sender, ArgixLogTableRowChangeEvent e);
        
        public delegate void CubeStatisticsTableRowChangeEventHandler(object sender, CubeStatisticsTableRowChangeEvent e);
        
        public delegate void CubeStatisticsSummaryTableRowChangeEventHandler(object sender, CubeStatisticsSummaryTableRowChangeEvent e);
        
        public delegate void CubeDetailsTableRowChangeEventHandler(object sender, CubeDetailsTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScannerTableDataTable : global::System.Data.TypedTableBase<ScannerTableRow> {
            
            private global::System.Data.DataColumn columnTerminalName;
            
            private global::System.Data.DataColumn columnSourceName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableDataTable() {
                this.TableName = "ScannerTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannerTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScannerTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceNameColumn {
                get {
                    return this.columnSourceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableRow this[int index] {
                get {
                    return ((ScannerTableRow)(this.Rows[index]));
                }
            }
            
            public event ScannerTableRowChangeEventHandler ScannerTableRowChanging;
            
            public event ScannerTableRowChangeEventHandler ScannerTableRowChanged;
            
            public event ScannerTableRowChangeEventHandler ScannerTableRowDeleting;
            
            public event ScannerTableRowChangeEventHandler ScannerTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScannerTableRow(ScannerTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableRow AddScannerTableRow(string TerminalName, string SourceName) {
                ScannerTableRow rowScannerTableRow = ((ScannerTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TerminalName,
                        SourceName};
                rowScannerTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScannerTableRow);
                return rowScannerTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScannerTableDataTable cln = ((ScannerTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScannerTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTerminalName = base.Columns["TerminalName"];
                this.columnSourceName = base.Columns["SourceName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTerminalName = new global::System.Data.DataColumn("TerminalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalName);
                this.columnSourceName = new global::System.Data.DataColumn("SourceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceName);
                this.columnTerminalName.AllowDBNull = false;
                this.columnSourceName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableRow NewScannerTableRow() {
                return ((ScannerTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScannerTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScannerTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScannerTableRowChanged != null)) {
                    this.ScannerTableRowChanged(this, new ScannerTableRowChangeEvent(((ScannerTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScannerTableRowChanging != null)) {
                    this.ScannerTableRowChanging(this, new ScannerTableRowChangeEvent(((ScannerTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScannerTableRowDeleted != null)) {
                    this.ScannerTableRowDeleted(this, new ScannerTableRowChangeEvent(((ScannerTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScannerTableRowDeleting != null)) {
                    this.ScannerTableRowDeleting(this, new ScannerTableRowChangeEvent(((ScannerTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScannerTableRow(ScannerTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerDS ds = new ScannerDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScannerTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArgixLogTableDataTable : global::System.Data.TypedTableBase<ArgixLogTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnLevel;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnEvent;
            
            private global::System.Data.DataColumn columnUser;
            
            private global::System.Data.DataColumn columnComputer;
            
            private global::System.Data.DataColumn columnKeyword1;
            
            private global::System.Data.DataColumn columnKeyword2;
            
            private global::System.Data.DataColumn columnKeyword3;
            
            private global::System.Data.DataColumn columnMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableDataTable() {
                this.TableName = "ArgixLogTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArgixLogTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArgixLogTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserColumn {
                get {
                    return this.columnUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComputerColumn {
                get {
                    return this.columnComputer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Keyword1Column {
                get {
                    return this.columnKeyword1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Keyword2Column {
                get {
                    return this.columnKeyword2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Keyword3Column {
                get {
                    return this.columnKeyword3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableRow this[int index] {
                get {
                    return ((ArgixLogTableRow)(this.Rows[index]));
                }
            }
            
            public event ArgixLogTableRowChangeEventHandler ArgixLogTableRowChanging;
            
            public event ArgixLogTableRowChangeEventHandler ArgixLogTableRowChanged;
            
            public event ArgixLogTableRowChangeEventHandler ArgixLogTableRowDeleting;
            
            public event ArgixLogTableRowChangeEventHandler ArgixLogTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArgixLogTableRow(ArgixLogTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableRow AddArgixLogTableRow(long ID, string Name, int Level, System.DateTime Date, string Source, string Category, string Event, string User, string Computer, string Keyword1, string Keyword2, string Keyword3, string Message) {
                ArgixLogTableRow rowArgixLogTableRow = ((ArgixLogTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Name,
                        Level,
                        Date,
                        Source,
                        Category,
                        Event,
                        User,
                        Computer,
                        Keyword1,
                        Keyword2,
                        Keyword3,
                        Message};
                rowArgixLogTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArgixLogTableRow);
                return rowArgixLogTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArgixLogTableDataTable cln = ((ArgixLogTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArgixLogTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnLevel = base.Columns["Level"];
                this.columnDate = base.Columns["Date"];
                this.columnSource = base.Columns["Source"];
                this.columnCategory = base.Columns["Category"];
                this.columnEvent = base.Columns["Event"];
                this.columnUser = base.Columns["User"];
                this.columnComputer = base.Columns["Computer"];
                this.columnKeyword1 = base.Columns["Keyword1"];
                this.columnKeyword2 = base.Columns["Keyword2"];
                this.columnKeyword3 = base.Columns["Keyword3"];
                this.columnMessage = base.Columns["Message"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLevel = new global::System.Data.DataColumn("Level", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevel);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnEvent = new global::System.Data.DataColumn("Event", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent);
                this.columnUser = new global::System.Data.DataColumn("User", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser);
                this.columnComputer = new global::System.Data.DataColumn("Computer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComputer);
                this.columnKeyword1 = new global::System.Data.DataColumn("Keyword1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyword1);
                this.columnKeyword2 = new global::System.Data.DataColumn("Keyword2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyword2);
                this.columnKeyword3 = new global::System.Data.DataColumn("Keyword3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyword3);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableRow NewArgixLogTableRow() {
                return ((ArgixLogTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArgixLogTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArgixLogTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArgixLogTableRowChanged != null)) {
                    this.ArgixLogTableRowChanged(this, new ArgixLogTableRowChangeEvent(((ArgixLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArgixLogTableRowChanging != null)) {
                    this.ArgixLogTableRowChanging(this, new ArgixLogTableRowChangeEvent(((ArgixLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArgixLogTableRowDeleted != null)) {
                    this.ArgixLogTableRowDeleted(this, new ArgixLogTableRowChangeEvent(((ArgixLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArgixLogTableRowDeleting != null)) {
                    this.ArgixLogTableRowDeleting(this, new ArgixLogTableRowChangeEvent(((ArgixLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArgixLogTableRow(ArgixLogTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerDS ds = new ScannerDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArgixLogTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CubeStatisticsTableDataTable : global::System.Data.TypedTableBase<CubeStatisticsTableRow> {
            
            private global::System.Data.DataColumn columnDATE;
            
            private global::System.Data.DataColumn columnHOUR;
            
            private global::System.Data.DataColumn columnSOURCE;
            
            private global::System.Data.DataColumn columnGOOD;
            
            private global::System.Data.DataColumn columnNOTFOUND;
            
            private global::System.Data.DataColumn columnBADREAD;
            
            private global::System.Data.DataColumn columnBADCUBE;
            
            private global::System.Data.DataColumn columnOTHER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableDataTable() {
                this.TableName = "CubeStatisticsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeStatisticsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CubeStatisticsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HOURColumn {
                get {
                    return this.columnHOUR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCEColumn {
                get {
                    return this.columnSOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GOODColumn {
                get {
                    return this.columnGOOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOTFOUNDColumn {
                get {
                    return this.columnNOTFOUND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BADREADColumn {
                get {
                    return this.columnBADREAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BADCUBEColumn {
                get {
                    return this.columnBADCUBE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTHERColumn {
                get {
                    return this.columnOTHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableRow this[int index] {
                get {
                    return ((CubeStatisticsTableRow)(this.Rows[index]));
                }
            }
            
            public event CubeStatisticsTableRowChangeEventHandler CubeStatisticsTableRowChanging;
            
            public event CubeStatisticsTableRowChangeEventHandler CubeStatisticsTableRowChanged;
            
            public event CubeStatisticsTableRowChangeEventHandler CubeStatisticsTableRowDeleting;
            
            public event CubeStatisticsTableRowChangeEventHandler CubeStatisticsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCubeStatisticsTableRow(CubeStatisticsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableRow AddCubeStatisticsTableRow(System.DateTime DATE, int HOUR, string SOURCE, int GOOD, int NOTFOUND, int BADREAD, int BADCUBE, int OTHER) {
                CubeStatisticsTableRow rowCubeStatisticsTableRow = ((CubeStatisticsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DATE,
                        HOUR,
                        SOURCE,
                        GOOD,
                        NOTFOUND,
                        BADREAD,
                        BADCUBE,
                        OTHER};
                rowCubeStatisticsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCubeStatisticsTableRow);
                return rowCubeStatisticsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CubeStatisticsTableDataTable cln = ((CubeStatisticsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CubeStatisticsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDATE = base.Columns["DATE"];
                this.columnHOUR = base.Columns["HOUR"];
                this.columnSOURCE = base.Columns["SOURCE"];
                this.columnGOOD = base.Columns["GOOD"];
                this.columnNOTFOUND = base.Columns["NOTFOUND"];
                this.columnBADREAD = base.Columns["BADREAD"];
                this.columnBADCUBE = base.Columns["BADCUBE"];
                this.columnOTHER = base.Columns["OTHER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDATE = new global::System.Data.DataColumn("DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnHOUR = new global::System.Data.DataColumn("HOUR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOUR);
                this.columnSOURCE = new global::System.Data.DataColumn("SOURCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCE);
                this.columnGOOD = new global::System.Data.DataColumn("GOOD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOOD);
                this.columnNOTFOUND = new global::System.Data.DataColumn("NOTFOUND", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTFOUND);
                this.columnBADREAD = new global::System.Data.DataColumn("BADREAD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBADREAD);
                this.columnBADCUBE = new global::System.Data.DataColumn("BADCUBE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBADCUBE);
                this.columnOTHER = new global::System.Data.DataColumn("OTHER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableRow NewCubeStatisticsTableRow() {
                return ((CubeStatisticsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CubeStatisticsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CubeStatisticsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CubeStatisticsTableRowChanged != null)) {
                    this.CubeStatisticsTableRowChanged(this, new CubeStatisticsTableRowChangeEvent(((CubeStatisticsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CubeStatisticsTableRowChanging != null)) {
                    this.CubeStatisticsTableRowChanging(this, new CubeStatisticsTableRowChangeEvent(((CubeStatisticsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CubeStatisticsTableRowDeleted != null)) {
                    this.CubeStatisticsTableRowDeleted(this, new CubeStatisticsTableRowChangeEvent(((CubeStatisticsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CubeStatisticsTableRowDeleting != null)) {
                    this.CubeStatisticsTableRowDeleting(this, new CubeStatisticsTableRowChangeEvent(((CubeStatisticsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCubeStatisticsTableRow(CubeStatisticsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerDS ds = new ScannerDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CubeStatisticsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CubeStatisticsSummaryTableDataTable : global::System.Data.TypedTableBase<CubeStatisticsSummaryTableRow> {
            
            private global::System.Data.DataColumn columnDATE;
            
            private global::System.Data.DataColumn columnGOOD;
            
            private global::System.Data.DataColumn columnNOTFOUND;
            
            private global::System.Data.DataColumn columnBADREAD;
            
            private global::System.Data.DataColumn columnBADCUBE;
            
            private global::System.Data.DataColumn columnOTHER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableDataTable() {
                this.TableName = "CubeStatisticsSummaryTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeStatisticsSummaryTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CubeStatisticsSummaryTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GOODColumn {
                get {
                    return this.columnGOOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOTFOUNDColumn {
                get {
                    return this.columnNOTFOUND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BADREADColumn {
                get {
                    return this.columnBADREAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BADCUBEColumn {
                get {
                    return this.columnBADCUBE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTHERColumn {
                get {
                    return this.columnOTHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableRow this[int index] {
                get {
                    return ((CubeStatisticsSummaryTableRow)(this.Rows[index]));
                }
            }
            
            public event CubeStatisticsSummaryTableRowChangeEventHandler CubeStatisticsSummaryTableRowChanging;
            
            public event CubeStatisticsSummaryTableRowChangeEventHandler CubeStatisticsSummaryTableRowChanged;
            
            public event CubeStatisticsSummaryTableRowChangeEventHandler CubeStatisticsSummaryTableRowDeleting;
            
            public event CubeStatisticsSummaryTableRowChangeEventHandler CubeStatisticsSummaryTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCubeStatisticsSummaryTableRow(CubeStatisticsSummaryTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableRow AddCubeStatisticsSummaryTableRow(System.DateTime DATE, int GOOD, int NOTFOUND, int BADREAD, int BADCUBE, int OTHER) {
                CubeStatisticsSummaryTableRow rowCubeStatisticsSummaryTableRow = ((CubeStatisticsSummaryTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DATE,
                        GOOD,
                        NOTFOUND,
                        BADREAD,
                        BADCUBE,
                        OTHER};
                rowCubeStatisticsSummaryTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCubeStatisticsSummaryTableRow);
                return rowCubeStatisticsSummaryTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CubeStatisticsSummaryTableDataTable cln = ((CubeStatisticsSummaryTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CubeStatisticsSummaryTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDATE = base.Columns["DATE"];
                this.columnGOOD = base.Columns["GOOD"];
                this.columnNOTFOUND = base.Columns["NOTFOUND"];
                this.columnBADREAD = base.Columns["BADREAD"];
                this.columnBADCUBE = base.Columns["BADCUBE"];
                this.columnOTHER = base.Columns["OTHER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDATE = new global::System.Data.DataColumn("DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnGOOD = new global::System.Data.DataColumn("GOOD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOOD);
                this.columnNOTFOUND = new global::System.Data.DataColumn("NOTFOUND", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTFOUND);
                this.columnBADREAD = new global::System.Data.DataColumn("BADREAD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBADREAD);
                this.columnBADCUBE = new global::System.Data.DataColumn("BADCUBE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBADCUBE);
                this.columnOTHER = new global::System.Data.DataColumn("OTHER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableRow NewCubeStatisticsSummaryTableRow() {
                return ((CubeStatisticsSummaryTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CubeStatisticsSummaryTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CubeStatisticsSummaryTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CubeStatisticsSummaryTableRowChanged != null)) {
                    this.CubeStatisticsSummaryTableRowChanged(this, new CubeStatisticsSummaryTableRowChangeEvent(((CubeStatisticsSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CubeStatisticsSummaryTableRowChanging != null)) {
                    this.CubeStatisticsSummaryTableRowChanging(this, new CubeStatisticsSummaryTableRowChangeEvent(((CubeStatisticsSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CubeStatisticsSummaryTableRowDeleted != null)) {
                    this.CubeStatisticsSummaryTableRowDeleted(this, new CubeStatisticsSummaryTableRowChangeEvent(((CubeStatisticsSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CubeStatisticsSummaryTableRowDeleting != null)) {
                    this.CubeStatisticsSummaryTableRowDeleting(this, new CubeStatisticsSummaryTableRowChangeEvent(((CubeStatisticsSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCubeStatisticsSummaryTableRow(CubeStatisticsSummaryTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerDS ds = new ScannerDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CubeStatisticsSummaryTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CubeDetailsTableDataTable : global::System.Data.TypedTableBase<CubeDetailsTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCubeDate;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnScan;
            
            private global::System.Data.DataColumn columnLabelSeqNumber;
            
            private global::System.Data.DataColumn columnCube;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableDataTable() {
                this.TableName = "CubeDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CubeDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CubeDateColumn {
                get {
                    return this.columnCubeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanColumn {
                get {
                    return this.columnScan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelSeqNumberColumn {
                get {
                    return this.columnLabelSeqNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CubeColumn {
                get {
                    return this.columnCube;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableRow this[int index] {
                get {
                    return ((CubeDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event CubeDetailsTableRowChangeEventHandler CubeDetailsTableRowChanging;
            
            public event CubeDetailsTableRowChangeEventHandler CubeDetailsTableRowChanged;
            
            public event CubeDetailsTableRowChangeEventHandler CubeDetailsTableRowDeleting;
            
            public event CubeDetailsTableRowChangeEventHandler CubeDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCubeDetailsTableRow(CubeDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableRow AddCubeDetailsTableRow(long ID, System.DateTime CubeDate, string Source, string Scan, string LabelSeqNumber, int Cube, string Result, string Message) {
                CubeDetailsTableRow rowCubeDetailsTableRow = ((CubeDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        CubeDate,
                        Source,
                        Scan,
                        LabelSeqNumber,
                        Cube,
                        Result,
                        Message};
                rowCubeDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCubeDetailsTableRow);
                return rowCubeDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CubeDetailsTableDataTable cln = ((CubeDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CubeDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCubeDate = base.Columns["CubeDate"];
                this.columnSource = base.Columns["Source"];
                this.columnScan = base.Columns["Scan"];
                this.columnLabelSeqNumber = base.Columns["LabelSeqNumber"];
                this.columnCube = base.Columns["Cube"];
                this.columnResult = base.Columns["Result"];
                this.columnMessage = base.Columns["Message"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCubeDate = new global::System.Data.DataColumn("CubeDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCubeDate);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnScan = new global::System.Data.DataColumn("Scan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScan);
                this.columnLabelSeqNumber = new global::System.Data.DataColumn("LabelSeqNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelSeqNumber);
                this.columnCube = new global::System.Data.DataColumn("Cube", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCube);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableRow NewCubeDetailsTableRow() {
                return ((CubeDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CubeDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CubeDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CubeDetailsTableRowChanged != null)) {
                    this.CubeDetailsTableRowChanged(this, new CubeDetailsTableRowChangeEvent(((CubeDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CubeDetailsTableRowChanging != null)) {
                    this.CubeDetailsTableRowChanging(this, new CubeDetailsTableRowChangeEvent(((CubeDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CubeDetailsTableRowDeleted != null)) {
                    this.CubeDetailsTableRowDeleted(this, new CubeDetailsTableRowChangeEvent(((CubeDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CubeDetailsTableRowDeleting != null)) {
                    this.CubeDetailsTableRowDeleting(this, new CubeDetailsTableRowChangeEvent(((CubeDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCubeDetailsTableRow(CubeDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScannerDS ds = new ScannerDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CubeDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScannerTableRow : global::System.Data.DataRow {
            
            private ScannerTableDataTable tableScannerTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannerTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScannerTable = ((ScannerTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalName {
                get {
                    return ((string)(this[this.tableScannerTable.TerminalNameColumn]));
                }
                set {
                    this[this.tableScannerTable.TerminalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceName {
                get {
                    return ((string)(this[this.tableScannerTable.SourceNameColumn]));
                }
                set {
                    this[this.tableScannerTable.SourceNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ArgixLogTableRow : global::System.Data.DataRow {
            
            private ArgixLogTableDataTable tableArgixLogTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArgixLogTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArgixLogTable = ((ArgixLogTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableArgixLogTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Level {
                get {
                    try {
                        return ((int)(this[this.tableArgixLogTable.LevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Level\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.LevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableArgixLogTable.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.EventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.EventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.UserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'User\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.UserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Computer {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.ComputerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Computer\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.ComputerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyword1 {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.Keyword1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyword1\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.Keyword1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyword2 {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.Keyword2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyword2\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.Keyword2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyword3 {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.Keyword3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyword3\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.Keyword3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    try {
                        return ((string)(this[this.tableArgixLogTable.MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Message\' in table \'ArgixLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgixLogTable.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableArgixLogTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableArgixLogTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableArgixLogTable.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableArgixLogTable.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelNull() {
                return this.IsNull(this.tableArgixLogTable.LevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelNull() {
                this[this.tableArgixLogTable.LevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableArgixLogTable.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableArgixLogTable.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableArgixLogTable.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableArgixLogTable.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableArgixLogTable.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableArgixLogTable.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNull() {
                return this.IsNull(this.tableArgixLogTable.EventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNull() {
                this[this.tableArgixLogTable.EventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNull() {
                return this.IsNull(this.tableArgixLogTable.UserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNull() {
                this[this.tableArgixLogTable.UserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComputerNull() {
                return this.IsNull(this.tableArgixLogTable.ComputerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComputerNull() {
                this[this.tableArgixLogTable.ComputerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyword1Null() {
                return this.IsNull(this.tableArgixLogTable.Keyword1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyword1Null() {
                this[this.tableArgixLogTable.Keyword1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyword2Null() {
                return this.IsNull(this.tableArgixLogTable.Keyword2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyword2Null() {
                this[this.tableArgixLogTable.Keyword2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyword3Null() {
                return this.IsNull(this.tableArgixLogTable.Keyword3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyword3Null() {
                this[this.tableArgixLogTable.Keyword3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableArgixLogTable.MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableArgixLogTable.MessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CubeStatisticsTableRow : global::System.Data.DataRow {
            
            private CubeStatisticsTableDataTable tableCubeStatisticsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeStatisticsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCubeStatisticsTable = ((CubeStatisticsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCubeStatisticsTable.DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HOUR {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.HOURColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HOUR\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.HOURColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOURCE {
                get {
                    try {
                        return ((string)(this[this.tableCubeStatisticsTable.SOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SOURCE\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.SOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GOOD {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.GOODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GOOD\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.GOODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NOTFOUND {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.NOTFOUNDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTFOUND\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.NOTFOUNDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BADREAD {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.BADREADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BADREAD\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.BADREADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BADCUBE {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.BADCUBEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BADCUBE\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.BADCUBEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OTHER {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsTable.OTHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTHER\' in table \'CubeStatisticsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsTable.OTHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableCubeStatisticsTable.DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableCubeStatisticsTable.DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHOURNull() {
                return this.IsNull(this.tableCubeStatisticsTable.HOURColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHOURNull() {
                this[this.tableCubeStatisticsTable.HOURColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOURCENull() {
                return this.IsNull(this.tableCubeStatisticsTable.SOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOURCENull() {
                this[this.tableCubeStatisticsTable.SOURCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGOODNull() {
                return this.IsNull(this.tableCubeStatisticsTable.GOODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGOODNull() {
                this[this.tableCubeStatisticsTable.GOODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOTFOUNDNull() {
                return this.IsNull(this.tableCubeStatisticsTable.NOTFOUNDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOTFOUNDNull() {
                this[this.tableCubeStatisticsTable.NOTFOUNDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBADREADNull() {
                return this.IsNull(this.tableCubeStatisticsTable.BADREADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBADREADNull() {
                this[this.tableCubeStatisticsTable.BADREADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBADCUBENull() {
                return this.IsNull(this.tableCubeStatisticsTable.BADCUBEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBADCUBENull() {
                this[this.tableCubeStatisticsTable.BADCUBEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTHERNull() {
                return this.IsNull(this.tableCubeStatisticsTable.OTHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTHERNull() {
                this[this.tableCubeStatisticsTable.OTHERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CubeStatisticsSummaryTableRow : global::System.Data.DataRow {
            
            private CubeStatisticsSummaryTableDataTable tableCubeStatisticsSummaryTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeStatisticsSummaryTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCubeStatisticsSummaryTable = ((CubeStatisticsSummaryTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCubeStatisticsSummaryTable.DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GOOD {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsSummaryTable.GOODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GOOD\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.GOODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NOTFOUND {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsSummaryTable.NOTFOUNDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTFOUND\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.NOTFOUNDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BADREAD {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsSummaryTable.BADREADColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BADREAD\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.BADREADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BADCUBE {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsSummaryTable.BADCUBEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BADCUBE\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.BADCUBEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OTHER {
                get {
                    try {
                        return ((int)(this[this.tableCubeStatisticsSummaryTable.OTHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTHER\' in table \'CubeStatisticsSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeStatisticsSummaryTable.OTHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableCubeStatisticsSummaryTable.DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGOODNull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.GOODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGOODNull() {
                this[this.tableCubeStatisticsSummaryTable.GOODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOTFOUNDNull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.NOTFOUNDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOTFOUNDNull() {
                this[this.tableCubeStatisticsSummaryTable.NOTFOUNDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBADREADNull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.BADREADColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBADREADNull() {
                this[this.tableCubeStatisticsSummaryTable.BADREADColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBADCUBENull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.BADCUBEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBADCUBENull() {
                this[this.tableCubeStatisticsSummaryTable.BADCUBEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTHERNull() {
                return this.IsNull(this.tableCubeStatisticsSummaryTable.OTHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTHERNull() {
                this[this.tableCubeStatisticsSummaryTable.OTHERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CubeDetailsTableRow : global::System.Data.DataRow {
            
            private CubeDetailsTableDataTable tableCubeDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CubeDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCubeDetailsTable = ((CubeDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableCubeDetailsTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CubeDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCubeDetailsTable.CubeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CubeDate\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.CubeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableCubeDetailsTable.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scan {
                get {
                    try {
                        return ((string)(this[this.tableCubeDetailsTable.ScanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scan\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.ScanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LabelSeqNumber {
                get {
                    try {
                        return ((string)(this[this.tableCubeDetailsTable.LabelSeqNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabelSeqNumber\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.LabelSeqNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cube {
                get {
                    try {
                        return ((int)(this[this.tableCubeDetailsTable.CubeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cube\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.CubeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableCubeDetailsTable.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    try {
                        return ((string)(this[this.tableCubeDetailsTable.MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Message\' in table \'CubeDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCubeDetailsTable.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableCubeDetailsTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableCubeDetailsTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCubeDateNull() {
                return this.IsNull(this.tableCubeDetailsTable.CubeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCubeDateNull() {
                this[this.tableCubeDetailsTable.CubeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableCubeDetailsTable.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableCubeDetailsTable.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanNull() {
                return this.IsNull(this.tableCubeDetailsTable.ScanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanNull() {
                this[this.tableCubeDetailsTable.ScanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelSeqNumberNull() {
                return this.IsNull(this.tableCubeDetailsTable.LabelSeqNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelSeqNumberNull() {
                this[this.tableCubeDetailsTable.LabelSeqNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCubeNull() {
                return this.IsNull(this.tableCubeDetailsTable.CubeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCubeNull() {
                this[this.tableCubeDetailsTable.CubeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNull() {
                return this.IsNull(this.tableCubeDetailsTable.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNull() {
                this[this.tableCubeDetailsTable.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableCubeDetailsTable.MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableCubeDetailsTable.MessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScannerTableRowChangeEvent : global::System.EventArgs {
            
            private ScannerTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableRowChangeEvent(ScannerTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannerTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArgixLogTableRowChangeEvent : global::System.EventArgs {
            
            private ArgixLogTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableRowChangeEvent(ArgixLogTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgixLogTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CubeStatisticsTableRowChangeEvent : global::System.EventArgs {
            
            private CubeStatisticsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableRowChangeEvent(CubeStatisticsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CubeStatisticsSummaryTableRowChangeEvent : global::System.EventArgs {
            
            private CubeStatisticsSummaryTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableRowChangeEvent(CubeStatisticsSummaryTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeStatisticsSummaryTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CubeDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private CubeDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableRowChangeEvent(CubeDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CubeDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591