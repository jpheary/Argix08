//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.CustomerSvc {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("IssueDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class IssueDS : global::System.Data.DataSet {
        
        private IssueTableDataTable tableIssueTable;
        
        private ActionTableDataTable tableActionTable;
        
        private AttachmentTableDataTable tableAttachmentTable;
        
        private IssueCategoryTableDataTable tableIssueCategoryTable;
        
        private IssueTypeTableDataTable tableIssueTypeTable;
        
        private ActionTypeTableDataTable tableActionTypeTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssueDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IssueDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["IssueTable"] != null)) {
                    base.Tables.Add(new IssueTableDataTable(ds.Tables["IssueTable"]));
                }
                if ((ds.Tables["ActionTable"] != null)) {
                    base.Tables.Add(new ActionTableDataTable(ds.Tables["ActionTable"]));
                }
                if ((ds.Tables["AttachmentTable"] != null)) {
                    base.Tables.Add(new AttachmentTableDataTable(ds.Tables["AttachmentTable"]));
                }
                if ((ds.Tables["IssueCategoryTable"] != null)) {
                    base.Tables.Add(new IssueCategoryTableDataTable(ds.Tables["IssueCategoryTable"]));
                }
                if ((ds.Tables["IssueTypeTable"] != null)) {
                    base.Tables.Add(new IssueTypeTableDataTable(ds.Tables["IssueTypeTable"]));
                }
                if ((ds.Tables["ActionTypeTable"] != null)) {
                    base.Tables.Add(new ActionTypeTableDataTable(ds.Tables["ActionTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IssueTableDataTable IssueTable {
            get {
                return this.tableIssueTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionTableDataTable ActionTable {
            get {
                return this.tableActionTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AttachmentTableDataTable AttachmentTable {
            get {
                return this.tableAttachmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IssueCategoryTableDataTable IssueCategoryTable {
            get {
                return this.tableIssueCategoryTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IssueTypeTableDataTable IssueTypeTable {
            get {
                return this.tableIssueTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionTypeTableDataTable ActionTypeTable {
            get {
                return this.tableActionTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            IssueDS cln = ((IssueDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["IssueTable"] != null)) {
                    base.Tables.Add(new IssueTableDataTable(ds.Tables["IssueTable"]));
                }
                if ((ds.Tables["ActionTable"] != null)) {
                    base.Tables.Add(new ActionTableDataTable(ds.Tables["ActionTable"]));
                }
                if ((ds.Tables["AttachmentTable"] != null)) {
                    base.Tables.Add(new AttachmentTableDataTable(ds.Tables["AttachmentTable"]));
                }
                if ((ds.Tables["IssueCategoryTable"] != null)) {
                    base.Tables.Add(new IssueCategoryTableDataTable(ds.Tables["IssueCategoryTable"]));
                }
                if ((ds.Tables["IssueTypeTable"] != null)) {
                    base.Tables.Add(new IssueTypeTableDataTable(ds.Tables["IssueTypeTable"]));
                }
                if ((ds.Tables["ActionTypeTable"] != null)) {
                    base.Tables.Add(new ActionTypeTableDataTable(ds.Tables["ActionTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableIssueTable = ((IssueTableDataTable)(base.Tables["IssueTable"]));
            if ((initTable == true)) {
                if ((this.tableIssueTable != null)) {
                    this.tableIssueTable.InitVars();
                }
            }
            this.tableActionTable = ((ActionTableDataTable)(base.Tables["ActionTable"]));
            if ((initTable == true)) {
                if ((this.tableActionTable != null)) {
                    this.tableActionTable.InitVars();
                }
            }
            this.tableAttachmentTable = ((AttachmentTableDataTable)(base.Tables["AttachmentTable"]));
            if ((initTable == true)) {
                if ((this.tableAttachmentTable != null)) {
                    this.tableAttachmentTable.InitVars();
                }
            }
            this.tableIssueCategoryTable = ((IssueCategoryTableDataTable)(base.Tables["IssueCategoryTable"]));
            if ((initTable == true)) {
                if ((this.tableIssueCategoryTable != null)) {
                    this.tableIssueCategoryTable.InitVars();
                }
            }
            this.tableIssueTypeTable = ((IssueTypeTableDataTable)(base.Tables["IssueTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableIssueTypeTable != null)) {
                    this.tableIssueTypeTable.InitVars();
                }
            }
            this.tableActionTypeTable = ((ActionTypeTableDataTable)(base.Tables["ActionTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableActionTypeTable != null)) {
                    this.tableActionTypeTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "IssueDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/IssueDS.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableIssueTable = new IssueTableDataTable();
            base.Tables.Add(this.tableIssueTable);
            this.tableActionTable = new ActionTableDataTable();
            base.Tables.Add(this.tableActionTable);
            this.tableAttachmentTable = new AttachmentTableDataTable();
            base.Tables.Add(this.tableAttachmentTable);
            this.tableIssueCategoryTable = new IssueCategoryTableDataTable();
            base.Tables.Add(this.tableIssueCategoryTable);
            this.tableIssueTypeTable = new IssueTypeTableDataTable();
            base.Tables.Add(this.tableIssueTypeTable);
            this.tableActionTypeTable = new ActionTypeTableDataTable();
            base.Tables.Add(this.tableActionTypeTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIssueTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActionTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAttachmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIssueCategoryTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIssueTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActionTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            IssueDS ds = new IssueDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void IssueTableRowChangeEventHandler(object sender, IssueTableRowChangeEvent e);
        
        public delegate void ActionTableRowChangeEventHandler(object sender, ActionTableRowChangeEvent e);
        
        public delegate void AttachmentTableRowChangeEventHandler(object sender, AttachmentTableRowChangeEvent e);
        
        public delegate void IssueCategoryTableRowChangeEventHandler(object sender, IssueCategoryTableRowChangeEvent e);
        
        public delegate void IssueTypeTableRowChangeEventHandler(object sender, IssueTypeTableRowChangeEvent e);
        
        public delegate void ActionTypeTableRowChangeEventHandler(object sender, ActionTypeTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IssueTableDataTable : global::System.Data.TypedTableBase<IssueTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnContactID;
            
            private global::System.Data.DataColumn columnContactName;
            
            private global::System.Data.DataColumn columnCompanyID;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnRegionNumber;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnStoreNumber;
            
            private global::System.Data.DataColumn columnOFD1FromDate;
            
            private global::System.Data.DataColumn columnOFD1ToDate;
            
            private global::System.Data.DataColumn columnPROID;
            
            private global::System.Data.DataColumn columnFirstActionID;
            
            private global::System.Data.DataColumn columnFirstActionDescription;
            
            private global::System.Data.DataColumn columnFirstActionCreated;
            
            private global::System.Data.DataColumn columnFirstActionUserID;
            
            private global::System.Data.DataColumn columnLastActionID;
            
            private global::System.Data.DataColumn columnLastActionDescription;
            
            private global::System.Data.DataColumn columnLastActionCreated;
            
            private global::System.Data.DataColumn columnLastActionUserID;
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnCoordinator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableDataTable() {
                this.TableName = "IssueTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IssueTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionNumberColumn {
                get {
                    return this.columnRegionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreNumberColumn {
                get {
                    return this.columnStoreNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFD1FromDateColumn {
                get {
                    return this.columnOFD1FromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFD1ToDateColumn {
                get {
                    return this.columnOFD1ToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROIDColumn {
                get {
                    return this.columnPROID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstActionIDColumn {
                get {
                    return this.columnFirstActionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstActionDescriptionColumn {
                get {
                    return this.columnFirstActionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstActionCreatedColumn {
                get {
                    return this.columnFirstActionCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstActionUserIDColumn {
                get {
                    return this.columnFirstActionUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastActionIDColumn {
                get {
                    return this.columnLastActionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastActionDescriptionColumn {
                get {
                    return this.columnLastActionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastActionCreatedColumn {
                get {
                    return this.columnLastActionCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastActionUserIDColumn {
                get {
                    return this.columnLastActionUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoordinatorColumn {
                get {
                    return this.columnCoordinator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableRow this[int index] {
                get {
                    return ((IssueTableRow)(this.Rows[index]));
                }
            }
            
            public event IssueTableRowChangeEventHandler IssueTableRowChanging;
            
            public event IssueTableRowChangeEventHandler IssueTableRowChanged;
            
            public event IssueTableRowChangeEventHandler IssueTableRowDeleting;
            
            public event IssueTableRowChangeEventHandler IssueTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIssueTableRow(IssueTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableRow AddIssueTableRow(
                        long ID, 
                        int TypeID, 
                        string Type, 
                        string Subject, 
                        int ContactID, 
                        string ContactName, 
                        int CompanyID, 
                        string CompanyName, 
                        string RegionNumber, 
                        string DistrictNumber, 
                        string AgentNumber, 
                        int StoreNumber, 
                        System.DateTime OFD1FromDate, 
                        System.DateTime OFD1ToDate, 
                        long PROID, 
                        long FirstActionID, 
                        string FirstActionDescription, 
                        System.DateTime FirstActionCreated, 
                        string FirstActionUserID, 
                        long LastActionID, 
                        string LastActionDescription, 
                        System.DateTime LastActionCreated, 
                        string LastActionUserID, 
                        string Zone, 
                        string Coordinator) {
                IssueTableRow rowIssueTableRow = ((IssueTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        TypeID,
                        Type,
                        Subject,
                        ContactID,
                        ContactName,
                        CompanyID,
                        CompanyName,
                        RegionNumber,
                        DistrictNumber,
                        AgentNumber,
                        StoreNumber,
                        OFD1FromDate,
                        OFD1ToDate,
                        PROID,
                        FirstActionID,
                        FirstActionDescription,
                        FirstActionCreated,
                        FirstActionUserID,
                        LastActionID,
                        LastActionDescription,
                        LastActionCreated,
                        LastActionUserID,
                        Zone,
                        Coordinator};
                rowIssueTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIssueTableRow);
                return rowIssueTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IssueTableDataTable cln = ((IssueTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IssueTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnContactID = base.Columns["ContactID"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnRegionNumber = base.Columns["RegionNumber"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnStoreNumber = base.Columns["StoreNumber"];
                this.columnOFD1FromDate = base.Columns["OFD1FromDate"];
                this.columnOFD1ToDate = base.Columns["OFD1ToDate"];
                this.columnPROID = base.Columns["PROID"];
                this.columnFirstActionID = base.Columns["FirstActionID"];
                this.columnFirstActionDescription = base.Columns["FirstActionDescription"];
                this.columnFirstActionCreated = base.Columns["FirstActionCreated"];
                this.columnFirstActionUserID = base.Columns["FirstActionUserID"];
                this.columnLastActionID = base.Columns["LastActionID"];
                this.columnLastActionDescription = base.Columns["LastActionDescription"];
                this.columnLastActionCreated = base.Columns["LastActionCreated"];
                this.columnLastActionUserID = base.Columns["LastActionUserID"];
                this.columnZone = base.Columns["Zone"];
                this.columnCoordinator = base.Columns["Coordinator"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnContactID = new global::System.Data.DataColumn("ContactID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactID);
                this.columnContactName = new global::System.Data.DataColumn("ContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactName);
                this.columnCompanyID = new global::System.Data.DataColumn("CompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnRegionNumber = new global::System.Data.DataColumn("RegionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionNumber);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnStoreNumber = new global::System.Data.DataColumn("StoreNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreNumber);
                this.columnOFD1FromDate = new global::System.Data.DataColumn("OFD1FromDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFD1FromDate);
                this.columnOFD1ToDate = new global::System.Data.DataColumn("OFD1ToDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFD1ToDate);
                this.columnPROID = new global::System.Data.DataColumn("PROID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROID);
                this.columnFirstActionID = new global::System.Data.DataColumn("FirstActionID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstActionID);
                this.columnFirstActionDescription = new global::System.Data.DataColumn("FirstActionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstActionDescription);
                this.columnFirstActionCreated = new global::System.Data.DataColumn("FirstActionCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstActionCreated);
                this.columnFirstActionUserID = new global::System.Data.DataColumn("FirstActionUserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstActionUserID);
                this.columnLastActionID = new global::System.Data.DataColumn("LastActionID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastActionID);
                this.columnLastActionDescription = new global::System.Data.DataColumn("LastActionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastActionDescription);
                this.columnLastActionCreated = new global::System.Data.DataColumn("LastActionCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastActionCreated);
                this.columnLastActionUserID = new global::System.Data.DataColumn("LastActionUserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastActionUserID);
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnCoordinator = new global::System.Data.DataColumn("Coordinator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoordinator);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableRow NewIssueTableRow() {
                return ((IssueTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IssueTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IssueTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IssueTableRowChanged != null)) {
                    this.IssueTableRowChanged(this, new IssueTableRowChangeEvent(((IssueTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IssueTableRowChanging != null)) {
                    this.IssueTableRowChanging(this, new IssueTableRowChangeEvent(((IssueTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IssueTableRowDeleted != null)) {
                    this.IssueTableRowDeleted(this, new IssueTableRowChangeEvent(((IssueTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IssueTableRowDeleting != null)) {
                    this.IssueTableRowDeleting(this, new IssueTableRowChangeEvent(((IssueTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIssueTableRow(IssueTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IssueTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionTableDataTable : global::System.Data.TypedTableBase<ActionTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnIssueID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableDataTable() {
                this.TableName = "ActionTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueIDColumn {
                get {
                    return this.columnIssueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableRow this[int index] {
                get {
                    return ((ActionTableRow)(this.Rows[index]));
                }
            }
            
            public event ActionTableRowChangeEventHandler ActionTableRowChanging;
            
            public event ActionTableRowChangeEventHandler ActionTableRowChanged;
            
            public event ActionTableRowChangeEventHandler ActionTableRowDeleting;
            
            public event ActionTableRowChangeEventHandler ActionTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionTableRow(ActionTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableRow AddActionTableRow(long ID, byte TypeID, long IssueID, string UserID, System.DateTime Created, string Comment) {
                ActionTableRow rowActionTableRow = ((ActionTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        TypeID,
                        IssueID,
                        UserID,
                        Created,
                        Comment};
                rowActionTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionTableRow);
                return rowActionTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActionTableDataTable cln = ((ActionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActionTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnIssueID = base.Columns["IssueID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnCreated = base.Columns["Created"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnIssueID = new global::System.Data.DataColumn("IssueID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableRow NewActionTableRow() {
                return ((ActionTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActionTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActionTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionTableRowChanged != null)) {
                    this.ActionTableRowChanged(this, new ActionTableRowChangeEvent(((ActionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionTableRowChanging != null)) {
                    this.ActionTableRowChanging(this, new ActionTableRowChangeEvent(((ActionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionTableRowDeleted != null)) {
                    this.ActionTableRowDeleted(this, new ActionTableRowChangeEvent(((ActionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionTableRowDeleting != null)) {
                    this.ActionTableRowDeleting(this, new ActionTableRowChangeEvent(((ActionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionTableRow(ActionTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AttachmentTableDataTable : global::System.Data.TypedTableBase<AttachmentTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnFileName;
            
            private global::System.Data.DataColumn columnFile;
            
            private global::System.Data.DataColumn columnActionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableDataTable() {
                this.TableName = "AttachmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttachmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AttachmentTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileColumn {
                get {
                    return this.columnFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionIDColumn {
                get {
                    return this.columnActionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableRow this[int index] {
                get {
                    return ((AttachmentTableRow)(this.Rows[index]));
                }
            }
            
            public event AttachmentTableRowChangeEventHandler AttachmentTableRowChanging;
            
            public event AttachmentTableRowChangeEventHandler AttachmentTableRowChanged;
            
            public event AttachmentTableRowChangeEventHandler AttachmentTableRowDeleting;
            
            public event AttachmentTableRowChangeEventHandler AttachmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAttachmentTableRow(AttachmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableRow AddAttachmentTableRow(int ID, string FileName, byte[] File, long ActionID) {
                AttachmentTableRow rowAttachmentTableRow = ((AttachmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        FileName,
                        File,
                        ActionID};
                rowAttachmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAttachmentTableRow);
                return rowAttachmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AttachmentTableDataTable cln = ((AttachmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AttachmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFileName = base.Columns["FileName"];
                this.columnFile = base.Columns["File"];
                this.columnActionID = base.Columns["ActionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnFile = new global::System.Data.DataColumn("File", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFile);
                this.columnActionID = new global::System.Data.DataColumn("ActionID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableRow NewAttachmentTableRow() {
                return ((AttachmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AttachmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AttachmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AttachmentTableRowChanged != null)) {
                    this.AttachmentTableRowChanged(this, new AttachmentTableRowChangeEvent(((AttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AttachmentTableRowChanging != null)) {
                    this.AttachmentTableRowChanging(this, new AttachmentTableRowChangeEvent(((AttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AttachmentTableRowDeleted != null)) {
                    this.AttachmentTableRowDeleted(this, new AttachmentTableRowChangeEvent(((AttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AttachmentTableRowDeleting != null)) {
                    this.AttachmentTableRowDeleting(this, new AttachmentTableRowChangeEvent(((AttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAttachmentTableRow(AttachmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AttachmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IssueCategoryTableDataTable : global::System.Data.TypedTableBase<IssueCategoryTableRow> {
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableDataTable() {
                this.TableName = "IssueCategoryTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueCategoryTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IssueCategoryTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableRow this[int index] {
                get {
                    return ((IssueCategoryTableRow)(this.Rows[index]));
                }
            }
            
            public event IssueCategoryTableRowChangeEventHandler IssueCategoryTableRowChanging;
            
            public event IssueCategoryTableRowChangeEventHandler IssueCategoryTableRowChanged;
            
            public event IssueCategoryTableRowChangeEventHandler IssueCategoryTableRowDeleting;
            
            public event IssueCategoryTableRowChangeEventHandler IssueCategoryTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIssueCategoryTableRow(IssueCategoryTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableRow AddIssueCategoryTableRow(string Category) {
                IssueCategoryTableRow rowIssueCategoryTableRow = ((IssueCategoryTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Category};
                rowIssueCategoryTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIssueCategoryTableRow);
                return rowIssueCategoryTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IssueCategoryTableDataTable cln = ((IssueCategoryTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IssueCategoryTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableRow NewIssueCategoryTableRow() {
                return ((IssueCategoryTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IssueCategoryTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IssueCategoryTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IssueCategoryTableRowChanged != null)) {
                    this.IssueCategoryTableRowChanged(this, new IssueCategoryTableRowChangeEvent(((IssueCategoryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IssueCategoryTableRowChanging != null)) {
                    this.IssueCategoryTableRowChanging(this, new IssueCategoryTableRowChangeEvent(((IssueCategoryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IssueCategoryTableRowDeleted != null)) {
                    this.IssueCategoryTableRowDeleted(this, new IssueCategoryTableRowChangeEvent(((IssueCategoryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IssueCategoryTableRowDeleting != null)) {
                    this.IssueCategoryTableRowDeleting(this, new IssueCategoryTableRowChangeEvent(((IssueCategoryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIssueCategoryTableRow(IssueCategoryTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IssueCategoryTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IssueTypeTableDataTable : global::System.Data.TypedTableBase<IssueTypeTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableDataTable() {
                this.TableName = "IssueTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IssueTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableRow this[int index] {
                get {
                    return ((IssueTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event IssueTypeTableRowChangeEventHandler IssueTypeTableRowChanging;
            
            public event IssueTypeTableRowChangeEventHandler IssueTypeTableRowChanged;
            
            public event IssueTypeTableRowChangeEventHandler IssueTypeTableRowDeleting;
            
            public event IssueTypeTableRowChangeEventHandler IssueTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIssueTypeTableRow(IssueTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableRow AddIssueTypeTableRow(int ID, string Type, string Category, string Description) {
                IssueTypeTableRow rowIssueTypeTableRow = ((IssueTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Type,
                        Category,
                        Description};
                rowIssueTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIssueTypeTableRow);
                return rowIssueTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IssueTypeTableDataTable cln = ((IssueTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IssueTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnType = base.Columns["Type"];
                this.columnCategory = base.Columns["Category"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableRow NewIssueTypeTableRow() {
                return ((IssueTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IssueTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IssueTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IssueTypeTableRowChanged != null)) {
                    this.IssueTypeTableRowChanged(this, new IssueTypeTableRowChangeEvent(((IssueTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IssueTypeTableRowChanging != null)) {
                    this.IssueTypeTableRowChanging(this, new IssueTypeTableRowChangeEvent(((IssueTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IssueTypeTableRowDeleted != null)) {
                    this.IssueTypeTableRowDeleted(this, new IssueTypeTableRowChangeEvent(((IssueTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IssueTypeTableRowDeleting != null)) {
                    this.IssueTypeTableRowDeleting(this, new IssueTypeTableRowChangeEvent(((IssueTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIssueTypeTableRow(IssueTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IssueTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionTypeTableDataTable : global::System.Data.TypedTableBase<ActionTypeTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableDataTable() {
                this.TableName = "ActionTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableRow this[int index] {
                get {
                    return ((ActionTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event ActionTypeTableRowChangeEventHandler ActionTypeTableRowChanging;
            
            public event ActionTypeTableRowChangeEventHandler ActionTypeTableRowChanged;
            
            public event ActionTypeTableRowChangeEventHandler ActionTypeTableRowDeleting;
            
            public event ActionTypeTableRowChangeEventHandler ActionTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionTypeTableRow(ActionTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableRow AddActionTypeTableRow(byte ID, string Type, string Description) {
                ActionTypeTableRow rowActionTypeTableRow = ((ActionTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Type,
                        Description};
                rowActionTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionTypeTableRow);
                return rowActionTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActionTypeTableDataTable cln = ((ActionTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActionTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnType = base.Columns["Type"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableRow NewActionTypeTableRow() {
                return ((ActionTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActionTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActionTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionTypeTableRowChanged != null)) {
                    this.ActionTypeTableRowChanged(this, new ActionTypeTableRowChangeEvent(((ActionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionTypeTableRowChanging != null)) {
                    this.ActionTypeTableRowChanging(this, new ActionTypeTableRowChangeEvent(((ActionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionTypeTableRowDeleted != null)) {
                    this.ActionTypeTableRowDeleted(this, new ActionTypeTableRowChangeEvent(((ActionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionTypeTableRowDeleting != null)) {
                    this.ActionTypeTableRowDeleting(this, new ActionTypeTableRowChangeEvent(((ActionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionTypeTableRow(ActionTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IssueDS ds = new IssueDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IssueTableRow : global::System.Data.DataRow {
            
            private IssueTableDataTable tableIssueTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIssueTable = ((IssueTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableIssueTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    try {
                        return ((int)(this[this.tableIssueTable.TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContactID {
                get {
                    try {
                        return ((int)(this[this.tableIssueTable.ContactIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.ContactIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.ContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactName\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.ContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableIssueTable.CompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.CompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionNumber {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.RegionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegionNumber\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.RegionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.AgentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentNumber\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoreNumber {
                get {
                    try {
                        return ((int)(this[this.tableIssueTable.StoreNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreNumber\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.StoreNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OFD1FromDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIssueTable.OFD1FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OFD1FromDate\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.OFD1FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OFD1ToDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIssueTable.OFD1ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OFD1ToDate\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.OFD1ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PROID {
                get {
                    try {
                        return ((long)(this[this.tableIssueTable.PROIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.PROIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FirstActionID {
                get {
                    try {
                        return ((long)(this[this.tableIssueTable.FirstActionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstActionID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.FirstActionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstActionDescription {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.FirstActionDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstActionDescription\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.FirstActionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FirstActionCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIssueTable.FirstActionCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstActionCreated\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.FirstActionCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstActionUserID {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.FirstActionUserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstActionUserID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.FirstActionUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LastActionID {
                get {
                    try {
                        return ((long)(this[this.tableIssueTable.LastActionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastActionID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.LastActionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastActionDescription {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.LastActionDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastActionDescription\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.LastActionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastActionCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableIssueTable.LastActionCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastActionCreated\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.LastActionCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastActionUserID {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.LastActionUserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastActionUserID\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.LastActionUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Coordinator {
                get {
                    try {
                        return ((string)(this[this.tableIssueTable.CoordinatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Coordinator\' in table \'IssueTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTable.CoordinatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableIssueTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableIssueTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeIDNull() {
                return this.IsNull(this.tableIssueTable.TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeIDNull() {
                this[this.tableIssueTable.TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableIssueTable.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableIssueTable.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableIssueTable.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableIssueTable.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactIDNull() {
                return this.IsNull(this.tableIssueTable.ContactIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactIDNull() {
                this[this.tableIssueTable.ContactIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNameNull() {
                return this.IsNull(this.tableIssueTable.ContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNameNull() {
                this[this.tableIssueTable.ContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableIssueTable.CompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyIDNull() {
                this[this.tableIssueTable.CompanyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableIssueTable.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableIssueTable.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNumberNull() {
                return this.IsNull(this.tableIssueTable.RegionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNumberNull() {
                this[this.tableIssueTable.RegionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tableIssueTable.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tableIssueTable.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNumberNull() {
                return this.IsNull(this.tableIssueTable.AgentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNumberNull() {
                this[this.tableIssueTable.AgentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreNumberNull() {
                return this.IsNull(this.tableIssueTable.StoreNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreNumberNull() {
                this[this.tableIssueTable.StoreNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFD1FromDateNull() {
                return this.IsNull(this.tableIssueTable.OFD1FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFD1FromDateNull() {
                this[this.tableIssueTable.OFD1FromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFD1ToDateNull() {
                return this.IsNull(this.tableIssueTable.OFD1ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFD1ToDateNull() {
                this[this.tableIssueTable.OFD1ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROIDNull() {
                return this.IsNull(this.tableIssueTable.PROIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROIDNull() {
                this[this.tableIssueTable.PROIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstActionIDNull() {
                return this.IsNull(this.tableIssueTable.FirstActionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstActionIDNull() {
                this[this.tableIssueTable.FirstActionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstActionDescriptionNull() {
                return this.IsNull(this.tableIssueTable.FirstActionDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstActionDescriptionNull() {
                this[this.tableIssueTable.FirstActionDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstActionCreatedNull() {
                return this.IsNull(this.tableIssueTable.FirstActionCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstActionCreatedNull() {
                this[this.tableIssueTable.FirstActionCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstActionUserIDNull() {
                return this.IsNull(this.tableIssueTable.FirstActionUserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstActionUserIDNull() {
                this[this.tableIssueTable.FirstActionUserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastActionIDNull() {
                return this.IsNull(this.tableIssueTable.LastActionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastActionIDNull() {
                this[this.tableIssueTable.LastActionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastActionDescriptionNull() {
                return this.IsNull(this.tableIssueTable.LastActionDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastActionDescriptionNull() {
                this[this.tableIssueTable.LastActionDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastActionCreatedNull() {
                return this.IsNull(this.tableIssueTable.LastActionCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastActionCreatedNull() {
                this[this.tableIssueTable.LastActionCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastActionUserIDNull() {
                return this.IsNull(this.tableIssueTable.LastActionUserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastActionUserIDNull() {
                this[this.tableIssueTable.LastActionUserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableIssueTable.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableIssueTable.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoordinatorNull() {
                return this.IsNull(this.tableIssueTable.CoordinatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoordinatorNull() {
                this[this.tableIssueTable.CoordinatorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionTableRow : global::System.Data.DataRow {
            
            private ActionTableDataTable tableActionTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActionTable = ((ActionTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableActionTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    try {
                        return ((byte)(this[this.tableActionTable.TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeID\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long IssueID {
                get {
                    try {
                        return ((long)(this[this.tableActionTable.IssueIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueID\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.IssueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableActionTable.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableActionTable.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableActionTable.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'ActionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTable.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableActionTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableActionTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeIDNull() {
                return this.IsNull(this.tableActionTable.TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeIDNull() {
                this[this.tableActionTable.TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueIDNull() {
                return this.IsNull(this.tableActionTable.IssueIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueIDNull() {
                this[this.tableActionTable.IssueIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableActionTable.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableActionTable.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableActionTable.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableActionTable.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableActionTable.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableActionTable.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AttachmentTableRow : global::System.Data.DataRow {
            
            private AttachmentTableDataTable tableAttachmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttachmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttachmentTable = ((AttachmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableAttachmentTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'AttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttachmentTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableAttachmentTable.FileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileName\' in table \'AttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttachmentTable.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] File {
                get {
                    try {
                        return ((byte[])(this[this.tableAttachmentTable.FileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'File\' in table \'AttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttachmentTable.FileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ActionID {
                get {
                    try {
                        return ((long)(this[this.tableAttachmentTable.ActionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActionID\' in table \'AttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttachmentTable.ActionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableAttachmentTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableAttachmentTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableAttachmentTable.FileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileNameNull() {
                this[this.tableAttachmentTable.FileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileNull() {
                return this.IsNull(this.tableAttachmentTable.FileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileNull() {
                this[this.tableAttachmentTable.FileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionIDNull() {
                return this.IsNull(this.tableAttachmentTable.ActionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionIDNull() {
                this[this.tableAttachmentTable.ActionIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IssueCategoryTableRow : global::System.Data.DataRow {
            
            private IssueCategoryTableDataTable tableIssueCategoryTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueCategoryTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIssueCategoryTable = ((IssueCategoryTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableIssueCategoryTable.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'IssueCategoryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueCategoryTable.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableIssueCategoryTable.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableIssueCategoryTable.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IssueTypeTableRow : global::System.Data.DataRow {
            
            private IssueTypeTableDataTable tableIssueTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IssueTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIssueTypeTable = ((IssueTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableIssueTypeTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'IssueTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTypeTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableIssueTypeTable.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'IssueTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTypeTable.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableIssueTypeTable.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'IssueTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTypeTable.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableIssueTypeTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'IssueTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIssueTypeTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableIssueTypeTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableIssueTypeTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableIssueTypeTable.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableIssueTypeTable.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableIssueTypeTable.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableIssueTypeTable.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableIssueTypeTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableIssueTypeTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionTypeTableRow : global::System.Data.DataRow {
            
            private ActionTypeTableDataTable tableActionTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActionTypeTable = ((ActionTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ID {
                get {
                    try {
                        return ((byte)(this[this.tableActionTypeTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'ActionTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTypeTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableActionTypeTable.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'ActionTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTypeTable.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableActionTypeTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ActionTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTypeTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableActionTypeTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableActionTypeTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableActionTypeTable.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableActionTypeTable.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableActionTypeTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableActionTypeTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IssueTableRowChangeEvent : global::System.EventArgs {
            
            private IssueTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableRowChangeEvent(IssueTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionTableRowChangeEvent : global::System.EventArgs {
            
            private ActionTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableRowChangeEvent(ActionTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AttachmentTableRowChangeEvent : global::System.EventArgs {
            
            private AttachmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableRowChangeEvent(AttachmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttachmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IssueCategoryTableRowChangeEvent : global::System.EventArgs {
            
            private IssueCategoryTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableRowChangeEvent(IssueCategoryTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueCategoryTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IssueTypeTableRowChangeEvent : global::System.EventArgs {
            
            private IssueTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableRowChangeEvent(IssueTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IssueTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionTypeTableRowChangeEvent : global::System.EventArgs {
            
            private ActionTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableRowChangeEvent(ActionTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591