//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Finance {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DriverRatesDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DriverRatesDS : global::System.Data.DataSet {
        
        private RateMileageTableDataTable tableRateMileageTable;
        
        private RateMileageRouteTableDataTable tableRateMileageRouteTable;
        
        private RateUnitTableDataTable tableRateUnitTable;
        
        private RateUnitRouteTableDataTable tableRateUnitRouteTable;
        
        private RateTypeTableDataTable tableRateTypeTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DriverRatesDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DriverRatesDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RateMileageTable"] != null)) {
                    base.Tables.Add(new RateMileageTableDataTable(ds.Tables["RateMileageTable"]));
                }
                if ((ds.Tables["RateMileageRouteTable"] != null)) {
                    base.Tables.Add(new RateMileageRouteTableDataTable(ds.Tables["RateMileageRouteTable"]));
                }
                if ((ds.Tables["RateUnitTable"] != null)) {
                    base.Tables.Add(new RateUnitTableDataTable(ds.Tables["RateUnitTable"]));
                }
                if ((ds.Tables["RateUnitRouteTable"] != null)) {
                    base.Tables.Add(new RateUnitRouteTableDataTable(ds.Tables["RateUnitRouteTable"]));
                }
                if ((ds.Tables["RateTypeTable"] != null)) {
                    base.Tables.Add(new RateTypeTableDataTable(ds.Tables["RateTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateMileageTableDataTable RateMileageTable {
            get {
                return this.tableRateMileageTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateMileageRouteTableDataTable RateMileageRouteTable {
            get {
                return this.tableRateMileageRouteTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateUnitTableDataTable RateUnitTable {
            get {
                return this.tableRateUnitTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateUnitRouteTableDataTable RateUnitRouteTable {
            get {
                return this.tableRateUnitRouteTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateTypeTableDataTable RateTypeTable {
            get {
                return this.tableRateTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DriverRatesDS cln = ((DriverRatesDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RateMileageTable"] != null)) {
                    base.Tables.Add(new RateMileageTableDataTable(ds.Tables["RateMileageTable"]));
                }
                if ((ds.Tables["RateMileageRouteTable"] != null)) {
                    base.Tables.Add(new RateMileageRouteTableDataTable(ds.Tables["RateMileageRouteTable"]));
                }
                if ((ds.Tables["RateUnitTable"] != null)) {
                    base.Tables.Add(new RateUnitTableDataTable(ds.Tables["RateUnitTable"]));
                }
                if ((ds.Tables["RateUnitRouteTable"] != null)) {
                    base.Tables.Add(new RateUnitRouteTableDataTable(ds.Tables["RateUnitRouteTable"]));
                }
                if ((ds.Tables["RateTypeTable"] != null)) {
                    base.Tables.Add(new RateTypeTableDataTable(ds.Tables["RateTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRateMileageTable = ((RateMileageTableDataTable)(base.Tables["RateMileageTable"]));
            if ((initTable == true)) {
                if ((this.tableRateMileageTable != null)) {
                    this.tableRateMileageTable.InitVars();
                }
            }
            this.tableRateMileageRouteTable = ((RateMileageRouteTableDataTable)(base.Tables["RateMileageRouteTable"]));
            if ((initTable == true)) {
                if ((this.tableRateMileageRouteTable != null)) {
                    this.tableRateMileageRouteTable.InitVars();
                }
            }
            this.tableRateUnitTable = ((RateUnitTableDataTable)(base.Tables["RateUnitTable"]));
            if ((initTable == true)) {
                if ((this.tableRateUnitTable != null)) {
                    this.tableRateUnitTable.InitVars();
                }
            }
            this.tableRateUnitRouteTable = ((RateUnitRouteTableDataTable)(base.Tables["RateUnitRouteTable"]));
            if ((initTable == true)) {
                if ((this.tableRateUnitRouteTable != null)) {
                    this.tableRateUnitRouteTable.InitVars();
                }
            }
            this.tableRateTypeTable = ((RateTypeTableDataTable)(base.Tables["RateTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableRateTypeTable != null)) {
                    this.tableRateTypeTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DriverRatesDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DriverRatesDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRateMileageTable = new RateMileageTableDataTable();
            base.Tables.Add(this.tableRateMileageTable);
            this.tableRateMileageRouteTable = new RateMileageRouteTableDataTable();
            base.Tables.Add(this.tableRateMileageRouteTable);
            this.tableRateUnitTable = new RateUnitTableDataTable();
            base.Tables.Add(this.tableRateUnitTable);
            this.tableRateUnitRouteTable = new RateUnitRouteTableDataTable();
            base.Tables.Add(this.tableRateUnitRouteTable);
            this.tableRateTypeTable = new RateTypeTableDataTable();
            base.Tables.Add(this.tableRateTypeTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateMileageTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateMileageRouteTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateUnitTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateUnitRouteTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DriverRatesDS ds = new DriverRatesDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RateMileageTableRowChangeEventHandler(object sender, RateMileageTableRowChangeEvent e);
        
        public delegate void RateMileageRouteTableRowChangeEventHandler(object sender, RateMileageRouteTableRowChangeEvent e);
        
        public delegate void RateUnitTableRowChangeEventHandler(object sender, RateUnitTableRowChangeEvent e);
        
        public delegate void RateUnitRouteTableRowChangeEventHandler(object sender, RateUnitRouteTableRowChangeEvent e);
        
        public delegate void RateTypeTableRowChangeEventHandler(object sender, RateTypeTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateMileageTableDataTable : global::System.Data.TypedTableBase<RateMileageTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnEquipmentTypeID;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnMile;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            private global::System.Data.DataColumn columnRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableDataTable() {
                this.TableName = "RateMileageTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateMileageTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateMileageTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentTypeIDColumn {
                get {
                    return this.columnEquipmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MileColumn {
                get {
                    return this.columnMile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableRow this[int index] {
                get {
                    return ((RateMileageTableRow)(this.Rows[index]));
                }
            }
            
            public event RateMileageTableRowChangeEventHandler RateMileageTableRowChanging;
            
            public event RateMileageTableRowChangeEventHandler RateMileageTableRowChanged;
            
            public event RateMileageTableRowChangeEventHandler RateMileageTableRowDeleting;
            
            public event RateMileageTableRowChangeEventHandler RateMileageTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateMileageTableRow(RateMileageTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableRow AddRateMileageTableRow(int ID, string AgentNumber, int EquipmentTypeID, System.DateTime EffectiveDate, double Mile, decimal BaseRate, decimal Rate) {
                RateMileageTableRow rowRateMileageTableRow = ((RateMileageTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AgentNumber,
                        EquipmentTypeID,
                        EffectiveDate,
                        Mile,
                        BaseRate,
                        Rate};
                rowRateMileageTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateMileageTableRow);
                return rowRateMileageTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateMileageTableDataTable cln = ((RateMileageTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateMileageTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnEquipmentTypeID = base.Columns["EquipmentTypeID"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnMile = base.Columns["Mile"];
                this.columnBaseRate = base.Columns["BaseRate"];
                this.columnRate = base.Columns["Rate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnEquipmentTypeID = new global::System.Data.DataColumn("EquipmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentTypeID);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnMile = new global::System.Data.DataColumn("Mile", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMile);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnEquipmentTypeID.AllowDBNull = false;
                this.columnEffectiveDate.AllowDBNull = false;
                this.columnMile.AllowDBNull = false;
                this.columnBaseRate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableRow NewRateMileageTableRow() {
                return ((RateMileageTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateMileageTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateMileageTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateMileageTableRowChanged != null)) {
                    this.RateMileageTableRowChanged(this, new RateMileageTableRowChangeEvent(((RateMileageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateMileageTableRowChanging != null)) {
                    this.RateMileageTableRowChanging(this, new RateMileageTableRowChangeEvent(((RateMileageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateMileageTableRowDeleted != null)) {
                    this.RateMileageTableRowDeleted(this, new RateMileageTableRowChangeEvent(((RateMileageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateMileageTableRowDeleting != null)) {
                    this.RateMileageTableRowDeleting(this, new RateMileageTableRowChangeEvent(((RateMileageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateMileageTableRow(RateMileageTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverRatesDS ds = new DriverRatesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateMileageTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateMileageRouteTableDataTable : global::System.Data.TypedTableBase<RateMileageRouteTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnRoute;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnMile;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableDataTable() {
                this.TableName = "RateMileageRouteTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateMileageRouteTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateMileageRouteTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteColumn {
                get {
                    return this.columnRoute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MileColumn {
                get {
                    return this.columnMile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableRow this[int index] {
                get {
                    return ((RateMileageRouteTableRow)(this.Rows[index]));
                }
            }
            
            public event RateMileageRouteTableRowChangeEventHandler RateMileageRouteTableRowChanging;
            
            public event RateMileageRouteTableRowChangeEventHandler RateMileageRouteTableRowChanged;
            
            public event RateMileageRouteTableRowChangeEventHandler RateMileageRouteTableRowDeleting;
            
            public event RateMileageRouteTableRowChangeEventHandler RateMileageRouteTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateMileageRouteTableRow(RateMileageRouteTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableRow AddRateMileageRouteTableRow(int ID, string AgentNumber, string Route, System.DateTime EffectiveDate, double Mile, decimal BaseRate, decimal Rate, byte Status) {
                RateMileageRouteTableRow rowRateMileageRouteTableRow = ((RateMileageRouteTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AgentNumber,
                        Route,
                        EffectiveDate,
                        Mile,
                        BaseRate,
                        Rate,
                        Status};
                rowRateMileageRouteTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateMileageRouteTableRow);
                return rowRateMileageRouteTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateMileageRouteTableDataTable cln = ((RateMileageRouteTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateMileageRouteTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnRoute = base.Columns["Route"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnMile = base.Columns["Mile"];
                this.columnBaseRate = base.Columns["BaseRate"];
                this.columnRate = base.Columns["Rate"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnRoute = new global::System.Data.DataColumn("Route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoute);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnMile = new global::System.Data.DataColumn("Mile", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMile);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnRoute.AllowDBNull = false;
                this.columnEffectiveDate.AllowDBNull = false;
                this.columnMile.AllowDBNull = false;
                this.columnBaseRate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableRow NewRateMileageRouteTableRow() {
                return ((RateMileageRouteTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateMileageRouteTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateMileageRouteTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateMileageRouteTableRowChanged != null)) {
                    this.RateMileageRouteTableRowChanged(this, new RateMileageRouteTableRowChangeEvent(((RateMileageRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateMileageRouteTableRowChanging != null)) {
                    this.RateMileageRouteTableRowChanging(this, new RateMileageRouteTableRowChangeEvent(((RateMileageRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateMileageRouteTableRowDeleted != null)) {
                    this.RateMileageRouteTableRowDeleted(this, new RateMileageRouteTableRowChangeEvent(((RateMileageRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateMileageRouteTableRowDeleting != null)) {
                    this.RateMileageRouteTableRowDeleting(this, new RateMileageRouteTableRowChangeEvent(((RateMileageRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateMileageRouteTableRow(RateMileageRouteTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverRatesDS ds = new DriverRatesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateMileageRouteTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateUnitTableDataTable : global::System.Data.TypedTableBase<RateUnitTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnEquipmentTypeID;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnDayRate;
            
            private global::System.Data.DataColumn columnMultiTripRate;
            
            private global::System.Data.DataColumn columnStopRate;
            
            private global::System.Data.DataColumn columnCartonRate;
            
            private global::System.Data.DataColumn columnPalletRate;
            
            private global::System.Data.DataColumn columnPickupCartonRate;
            
            private global::System.Data.DataColumn columnMinimumAmount;
            
            private global::System.Data.DataColumn columnMaximumAmount;
            
            private global::System.Data.DataColumn columnMaximumTriggerField;
            
            private global::System.Data.DataColumn columnMaximumTriggerValue;
            
            private global::System.Data.DataColumn columnFSBase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableDataTable() {
                this.TableName = "RateUnitTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateUnitTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateUnitTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentTypeIDColumn {
                get {
                    return this.columnEquipmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayRateColumn {
                get {
                    return this.columnDayRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiTripRateColumn {
                get {
                    return this.columnMultiTripRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopRateColumn {
                get {
                    return this.columnStopRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonRateColumn {
                get {
                    return this.columnCartonRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletRateColumn {
                get {
                    return this.columnPalletRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonRateColumn {
                get {
                    return this.columnPickupCartonRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumAmountColumn {
                get {
                    return this.columnMinimumAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumAmountColumn {
                get {
                    return this.columnMaximumAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumTriggerFieldColumn {
                get {
                    return this.columnMaximumTriggerField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumTriggerValueColumn {
                get {
                    return this.columnMaximumTriggerValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSBaseColumn {
                get {
                    return this.columnFSBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableRow this[int index] {
                get {
                    return ((RateUnitTableRow)(this.Rows[index]));
                }
            }
            
            public event RateUnitTableRowChangeEventHandler RateUnitTableRowChanging;
            
            public event RateUnitTableRowChangeEventHandler RateUnitTableRowChanged;
            
            public event RateUnitTableRowChangeEventHandler RateUnitTableRowDeleting;
            
            public event RateUnitTableRowChangeEventHandler RateUnitTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateUnitTableRow(RateUnitTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableRow AddRateUnitTableRow(int ID, string AgentNumber, int EquipmentTypeID, System.DateTime EffectiveDate, decimal DayRate, decimal MultiTripRate, decimal StopRate, decimal CartonRate, decimal PalletRate, decimal PickupCartonRate, decimal MinimumAmount, decimal MaximumAmount, string MaximumTriggerField, int MaximumTriggerValue, decimal FSBase) {
                RateUnitTableRow rowRateUnitTableRow = ((RateUnitTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AgentNumber,
                        EquipmentTypeID,
                        EffectiveDate,
                        DayRate,
                        MultiTripRate,
                        StopRate,
                        CartonRate,
                        PalletRate,
                        PickupCartonRate,
                        MinimumAmount,
                        MaximumAmount,
                        MaximumTriggerField,
                        MaximumTriggerValue,
                        FSBase};
                rowRateUnitTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateUnitTableRow);
                return rowRateUnitTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateUnitTableDataTable cln = ((RateUnitTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateUnitTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnEquipmentTypeID = base.Columns["EquipmentTypeID"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnDayRate = base.Columns["DayRate"];
                this.columnMultiTripRate = base.Columns["MultiTripRate"];
                this.columnStopRate = base.Columns["StopRate"];
                this.columnCartonRate = base.Columns["CartonRate"];
                this.columnPalletRate = base.Columns["PalletRate"];
                this.columnPickupCartonRate = base.Columns["PickupCartonRate"];
                this.columnMinimumAmount = base.Columns["MinimumAmount"];
                this.columnMaximumAmount = base.Columns["MaximumAmount"];
                this.columnMaximumTriggerField = base.Columns["MaximumTriggerField"];
                this.columnMaximumTriggerValue = base.Columns["MaximumTriggerValue"];
                this.columnFSBase = base.Columns["FSBase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnEquipmentTypeID = new global::System.Data.DataColumn("EquipmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentTypeID);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnDayRate = new global::System.Data.DataColumn("DayRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayRate);
                this.columnMultiTripRate = new global::System.Data.DataColumn("MultiTripRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiTripRate);
                this.columnStopRate = new global::System.Data.DataColumn("StopRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopRate);
                this.columnCartonRate = new global::System.Data.DataColumn("CartonRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonRate);
                this.columnPalletRate = new global::System.Data.DataColumn("PalletRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletRate);
                this.columnPickupCartonRate = new global::System.Data.DataColumn("PickupCartonRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonRate);
                this.columnMinimumAmount = new global::System.Data.DataColumn("MinimumAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumAmount);
                this.columnMaximumAmount = new global::System.Data.DataColumn("MaximumAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumAmount);
                this.columnMaximumTriggerField = new global::System.Data.DataColumn("MaximumTriggerField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumTriggerField);
                this.columnMaximumTriggerValue = new global::System.Data.DataColumn("MaximumTriggerValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumTriggerValue);
                this.columnFSBase = new global::System.Data.DataColumn("FSBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSBase);
                this.columnID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnAgentNumber.MaxLength = 10;
                this.columnEquipmentTypeID.AllowDBNull = false;
                this.columnEffectiveDate.AllowDBNull = false;
                this.columnDayRate.AllowDBNull = false;
                this.columnMultiTripRate.AllowDBNull = false;
                this.columnStopRate.AllowDBNull = false;
                this.columnCartonRate.AllowDBNull = false;
                this.columnPalletRate.AllowDBNull = false;
                this.columnPickupCartonRate.AllowDBNull = false;
                this.columnMinimumAmount.AllowDBNull = false;
                this.columnFSBase.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableRow NewRateUnitTableRow() {
                return ((RateUnitTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateUnitTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateUnitTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateUnitTableRowChanged != null)) {
                    this.RateUnitTableRowChanged(this, new RateUnitTableRowChangeEvent(((RateUnitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateUnitTableRowChanging != null)) {
                    this.RateUnitTableRowChanging(this, new RateUnitTableRowChangeEvent(((RateUnitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateUnitTableRowDeleted != null)) {
                    this.RateUnitTableRowDeleted(this, new RateUnitTableRowChangeEvent(((RateUnitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateUnitTableRowDeleting != null)) {
                    this.RateUnitTableRowDeleting(this, new RateUnitTableRowChangeEvent(((RateUnitTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateUnitTableRow(RateUnitTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverRatesDS ds = new DriverRatesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateUnitTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateUnitRouteTableDataTable : global::System.Data.TypedTableBase<RateUnitRouteTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnRoute;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnDayRate;
            
            private global::System.Data.DataColumn columnMultiTripRate;
            
            private global::System.Data.DataColumn columnStopRate;
            
            private global::System.Data.DataColumn columnCartonRate;
            
            private global::System.Data.DataColumn columnPalletRate;
            
            private global::System.Data.DataColumn columnPickupCartonRate;
            
            private global::System.Data.DataColumn columnMinimumAmount;
            
            private global::System.Data.DataColumn columnMaximumAmount;
            
            private global::System.Data.DataColumn columnMaximumTriggerField;
            
            private global::System.Data.DataColumn columnMaximumTriggerValue;
            
            private global::System.Data.DataColumn columnFSBase;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableDataTable() {
                this.TableName = "RateUnitRouteTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateUnitRouteTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateUnitRouteTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteColumn {
                get {
                    return this.columnRoute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayRateColumn {
                get {
                    return this.columnDayRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiTripRateColumn {
                get {
                    return this.columnMultiTripRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopRateColumn {
                get {
                    return this.columnStopRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonRateColumn {
                get {
                    return this.columnCartonRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletRateColumn {
                get {
                    return this.columnPalletRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonRateColumn {
                get {
                    return this.columnPickupCartonRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumAmountColumn {
                get {
                    return this.columnMinimumAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumAmountColumn {
                get {
                    return this.columnMaximumAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumTriggerFieldColumn {
                get {
                    return this.columnMaximumTriggerField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumTriggerValueColumn {
                get {
                    return this.columnMaximumTriggerValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSBaseColumn {
                get {
                    return this.columnFSBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableRow this[int index] {
                get {
                    return ((RateUnitRouteTableRow)(this.Rows[index]));
                }
            }
            
            public event RateUnitRouteTableRowChangeEventHandler RateUnitRouteTableRowChanging;
            
            public event RateUnitRouteTableRowChangeEventHandler RateUnitRouteTableRowChanged;
            
            public event RateUnitRouteTableRowChangeEventHandler RateUnitRouteTableRowDeleting;
            
            public event RateUnitRouteTableRowChangeEventHandler RateUnitRouteTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateUnitRouteTableRow(RateUnitRouteTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableRow AddRateUnitRouteTableRow(
                        int ID, 
                        string AgentNumber, 
                        string Route, 
                        System.DateTime EffectiveDate, 
                        decimal DayRate, 
                        decimal MultiTripRate, 
                        decimal StopRate, 
                        decimal CartonRate, 
                        decimal PalletRate, 
                        decimal PickupCartonRate, 
                        decimal MinimumAmount, 
                        decimal MaximumAmount, 
                        string MaximumTriggerField, 
                        int MaximumTriggerValue, 
                        decimal FSBase, 
                        byte Status) {
                RateUnitRouteTableRow rowRateUnitRouteTableRow = ((RateUnitRouteTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AgentNumber,
                        Route,
                        EffectiveDate,
                        DayRate,
                        MultiTripRate,
                        StopRate,
                        CartonRate,
                        PalletRate,
                        PickupCartonRate,
                        MinimumAmount,
                        MaximumAmount,
                        MaximumTriggerField,
                        MaximumTriggerValue,
                        FSBase,
                        Status};
                rowRateUnitRouteTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateUnitRouteTableRow);
                return rowRateUnitRouteTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateUnitRouteTableDataTable cln = ((RateUnitRouteTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateUnitRouteTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnRoute = base.Columns["Route"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnDayRate = base.Columns["DayRate"];
                this.columnMultiTripRate = base.Columns["MultiTripRate"];
                this.columnStopRate = base.Columns["StopRate"];
                this.columnCartonRate = base.Columns["CartonRate"];
                this.columnPalletRate = base.Columns["PalletRate"];
                this.columnPickupCartonRate = base.Columns["PickupCartonRate"];
                this.columnMinimumAmount = base.Columns["MinimumAmount"];
                this.columnMaximumAmount = base.Columns["MaximumAmount"];
                this.columnMaximumTriggerField = base.Columns["MaximumTriggerField"];
                this.columnMaximumTriggerValue = base.Columns["MaximumTriggerValue"];
                this.columnFSBase = base.Columns["FSBase"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnRoute = new global::System.Data.DataColumn("Route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoute);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnDayRate = new global::System.Data.DataColumn("DayRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayRate);
                this.columnMultiTripRate = new global::System.Data.DataColumn("MultiTripRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiTripRate);
                this.columnStopRate = new global::System.Data.DataColumn("StopRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopRate);
                this.columnCartonRate = new global::System.Data.DataColumn("CartonRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonRate);
                this.columnPalletRate = new global::System.Data.DataColumn("PalletRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletRate);
                this.columnPickupCartonRate = new global::System.Data.DataColumn("PickupCartonRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonRate);
                this.columnMinimumAmount = new global::System.Data.DataColumn("MinimumAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumAmount);
                this.columnMaximumAmount = new global::System.Data.DataColumn("MaximumAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumAmount);
                this.columnMaximumTriggerField = new global::System.Data.DataColumn("MaximumTriggerField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumTriggerField);
                this.columnMaximumTriggerValue = new global::System.Data.DataColumn("MaximumTriggerValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumTriggerValue);
                this.columnFSBase = new global::System.Data.DataColumn("FSBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSBase);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnAgentNumber.MaxLength = 10;
                this.columnRoute.AllowDBNull = false;
                this.columnRoute.MaxLength = 8;
                this.columnEffectiveDate.AllowDBNull = false;
                this.columnDayRate.AllowDBNull = false;
                this.columnMultiTripRate.AllowDBNull = false;
                this.columnStopRate.AllowDBNull = false;
                this.columnCartonRate.AllowDBNull = false;
                this.columnPalletRate.AllowDBNull = false;
                this.columnPickupCartonRate.AllowDBNull = false;
                this.columnMinimumAmount.AllowDBNull = false;
                this.columnFSBase.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableRow NewRateUnitRouteTableRow() {
                return ((RateUnitRouteTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateUnitRouteTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateUnitRouteTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateUnitRouteTableRowChanged != null)) {
                    this.RateUnitRouteTableRowChanged(this, new RateUnitRouteTableRowChangeEvent(((RateUnitRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateUnitRouteTableRowChanging != null)) {
                    this.RateUnitRouteTableRowChanging(this, new RateUnitRouteTableRowChangeEvent(((RateUnitRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateUnitRouteTableRowDeleted != null)) {
                    this.RateUnitRouteTableRowDeleted(this, new RateUnitRouteTableRowChangeEvent(((RateUnitRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateUnitRouteTableRowDeleting != null)) {
                    this.RateUnitRouteTableRowDeleting(this, new RateUnitRouteTableRowChangeEvent(((RateUnitRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateUnitRouteTableRow(RateUnitRouteTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverRatesDS ds = new DriverRatesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateUnitRouteTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateTypeTableDataTable : global::System.Data.TypedTableBase<RateTypeTableRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableDataTable() {
                this.TableName = "RateTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRow this[int index] {
                get {
                    return ((RateTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event RateTypeTableRowChangeEventHandler RateTypeTableRowChanging;
            
            public event RateTypeTableRowChangeEventHandler RateTypeTableRowChanged;
            
            public event RateTypeTableRowChangeEventHandler RateTypeTableRowDeleting;
            
            public event RateTypeTableRowChangeEventHandler RateTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateTypeTableRow(RateTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRow AddRateTypeTableRow(string Description) {
                RateTypeTableRow rowRateTypeTableRow = ((RateTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Description};
                rowRateTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateTypeTableRow);
                return rowRateTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRow FindByID(int ID) {
                return ((RateTypeTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateTypeTableDataTable cln = ((RateTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRow NewRateTypeTableRow() {
                return ((RateTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateTypeTableRowChanged != null)) {
                    this.RateTypeTableRowChanged(this, new RateTypeTableRowChangeEvent(((RateTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateTypeTableRowChanging != null)) {
                    this.RateTypeTableRowChanging(this, new RateTypeTableRowChangeEvent(((RateTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateTypeTableRowDeleted != null)) {
                    this.RateTypeTableRowDeleted(this, new RateTypeTableRowChangeEvent(((RateTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateTypeTableRowDeleting != null)) {
                    this.RateTypeTableRowDeleting(this, new RateTypeTableRowChangeEvent(((RateTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateTypeTableRow(RateTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverRatesDS ds = new DriverRatesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateMileageTableRow : global::System.Data.DataRow {
            
            private RateMileageTableDataTable tableRateMileageTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateMileageTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateMileageTable = ((RateMileageTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRateMileageTable.IDColumn]));
                }
                set {
                    this[this.tableRateMileageTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableRateMileageTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableRateMileageTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentTypeID {
                get {
                    return ((int)(this[this.tableRateMileageTable.EquipmentTypeIDColumn]));
                }
                set {
                    this[this.tableRateMileageTable.EquipmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRateMileageTable.EffectiveDateColumn]));
                }
                set {
                    this[this.tableRateMileageTable.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Mile {
                get {
                    return ((double)(this[this.tableRateMileageTable.MileColumn]));
                }
                set {
                    this[this.tableRateMileageTable.MileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    return ((decimal)(this[this.tableRateMileageTable.BaseRateColumn]));
                }
                set {
                    this[this.tableRateMileageTable.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableRateMileageTable.RateColumn]));
                }
                set {
                    this[this.tableRateMileageTable.RateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateMileageRouteTableRow : global::System.Data.DataRow {
            
            private RateMileageRouteTableDataTable tableRateMileageRouteTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateMileageRouteTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateMileageRouteTable = ((RateMileageRouteTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRateMileageRouteTable.IDColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableRateMileageRouteTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Route {
                get {
                    return ((string)(this[this.tableRateMileageRouteTable.RouteColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.RouteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRateMileageRouteTable.EffectiveDateColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Mile {
                get {
                    return ((double)(this[this.tableRateMileageRouteTable.MileColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.MileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    return ((decimal)(this[this.tableRateMileageRouteTable.BaseRateColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableRateMileageRouteTable.RateColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Status {
                get {
                    return ((byte)(this[this.tableRateMileageRouteTable.StatusColumn]));
                }
                set {
                    this[this.tableRateMileageRouteTable.StatusColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateUnitTableRow : global::System.Data.DataRow {
            
            private RateUnitTableDataTable tableRateUnitTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateUnitTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateUnitTable = ((RateUnitTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRateUnitTable.IDColumn]));
                }
                set {
                    this[this.tableRateUnitTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableRateUnitTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableRateUnitTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentTypeID {
                get {
                    return ((int)(this[this.tableRateUnitTable.EquipmentTypeIDColumn]));
                }
                set {
                    this[this.tableRateUnitTable.EquipmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRateUnitTable.EffectiveDateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.DayRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.DayRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MultiTripRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.MultiTripRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.MultiTripRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.StopRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.StopRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.CartonRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.CartonRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.PalletRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.PalletRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonRate {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.PickupCartonRateColumn]));
                }
                set {
                    this[this.tableRateUnitTable.PickupCartonRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumAmount {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.MinimumAmountColumn]));
                }
                set {
                    this[this.tableRateUnitTable.MinimumAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaximumAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableRateUnitTable.MaximumAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumAmount\' in table \'RateUnitTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateUnitTable.MaximumAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaximumTriggerField {
                get {
                    try {
                        return ((string)(this[this.tableRateUnitTable.MaximumTriggerFieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumTriggerField\' in table \'RateUnitTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateUnitTable.MaximumTriggerFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaximumTriggerValue {
                get {
                    try {
                        return ((int)(this[this.tableRateUnitTable.MaximumTriggerValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumTriggerValue\' in table \'RateUnitTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateUnitTable.MaximumTriggerValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSBase {
                get {
                    return ((decimal)(this[this.tableRateUnitTable.FSBaseColumn]));
                }
                set {
                    this[this.tableRateUnitTable.FSBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumAmountNull() {
                return this.IsNull(this.tableRateUnitTable.MaximumAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumAmountNull() {
                this[this.tableRateUnitTable.MaximumAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumTriggerFieldNull() {
                return this.IsNull(this.tableRateUnitTable.MaximumTriggerFieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumTriggerFieldNull() {
                this[this.tableRateUnitTable.MaximumTriggerFieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumTriggerValueNull() {
                return this.IsNull(this.tableRateUnitTable.MaximumTriggerValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumTriggerValueNull() {
                this[this.tableRateUnitTable.MaximumTriggerValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateUnitRouteTableRow : global::System.Data.DataRow {
            
            private RateUnitRouteTableDataTable tableRateUnitRouteTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateUnitRouteTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateUnitRouteTable = ((RateUnitRouteTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRateUnitRouteTable.IDColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableRateUnitRouteTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Route {
                get {
                    return ((string)(this[this.tableRateUnitRouteTable.RouteColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.RouteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRateUnitRouteTable.EffectiveDateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.DayRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.DayRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MultiTripRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.MultiTripRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.MultiTripRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.StopRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.StopRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.CartonRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.CartonRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.PalletRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.PalletRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonRate {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.PickupCartonRateColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.PickupCartonRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumAmount {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.MinimumAmountColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.MinimumAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaximumAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableRateUnitRouteTable.MaximumAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumAmount\' in table \'RateUnitRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateUnitRouteTable.MaximumAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaximumTriggerField {
                get {
                    try {
                        return ((string)(this[this.tableRateUnitRouteTable.MaximumTriggerFieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumTriggerField\' in table \'RateUnitRouteTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableRateUnitRouteTable.MaximumTriggerFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaximumTriggerValue {
                get {
                    try {
                        return ((int)(this[this.tableRateUnitRouteTable.MaximumTriggerValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumTriggerValue\' in table \'RateUnitRouteTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableRateUnitRouteTable.MaximumTriggerValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSBase {
                get {
                    return ((decimal)(this[this.tableRateUnitRouteTable.FSBaseColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.FSBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Status {
                get {
                    return ((byte)(this[this.tableRateUnitRouteTable.StatusColumn]));
                }
                set {
                    this[this.tableRateUnitRouteTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumAmountNull() {
                return this.IsNull(this.tableRateUnitRouteTable.MaximumAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumAmountNull() {
                this[this.tableRateUnitRouteTable.MaximumAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumTriggerFieldNull() {
                return this.IsNull(this.tableRateUnitRouteTable.MaximumTriggerFieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumTriggerFieldNull() {
                this[this.tableRateUnitRouteTable.MaximumTriggerFieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumTriggerValueNull() {
                return this.IsNull(this.tableRateUnitRouteTable.MaximumTriggerValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumTriggerValueNull() {
                this[this.tableRateUnitRouteTable.MaximumTriggerValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateTypeTableRow : global::System.Data.DataRow {
            
            private RateTypeTableDataTable tableRateTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateTypeTable = ((RateTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRateTypeTable.IDColumn]));
                }
                set {
                    this[this.tableRateTypeTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableRateTypeTable.DescriptionColumn]));
                }
                set {
                    this[this.tableRateTypeTable.DescriptionColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateMileageTableRowChangeEvent : global::System.EventArgs {
            
            private RateMileageTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableRowChangeEvent(RateMileageTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateMileageRouteTableRowChangeEvent : global::System.EventArgs {
            
            private RateMileageRouteTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableRowChangeEvent(RateMileageRouteTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateMileageRouteTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateUnitTableRowChangeEvent : global::System.EventArgs {
            
            private RateUnitTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableRowChangeEvent(RateUnitTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateUnitRouteTableRowChangeEvent : global::System.EventArgs {
            
            private RateUnitRouteTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableRowChangeEvent(RateUnitRouteTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateUnitRouteTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateTypeTableRowChangeEvent : global::System.EventArgs {
            
            private RateTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRowChangeEvent(RateTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591