//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Finance {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InvoiceDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InvoiceDS : global::System.Data.DataSet {
        
        private ClientTableDataTable tableClientTable;
        
        private ClientInvoiceTableDataTable tableClientInvoiceTable;
        
        private InvoiceShipmentTableDataTable tableInvoiceShipmentTable;
        
        private InvoiceDetailTableDataTable tableInvoiceDetailTable;
        
        private InvoiceTotalTableDataTable tableInvoiceTotalTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InvoiceDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientTable"] != null)) {
                    base.Tables.Add(new ClientTableDataTable(ds.Tables["ClientTable"]));
                }
                if ((ds.Tables["ClientInvoiceTable"] != null)) {
                    base.Tables.Add(new ClientInvoiceTableDataTable(ds.Tables["ClientInvoiceTable"]));
                }
                if ((ds.Tables["InvoiceShipmentTable"] != null)) {
                    base.Tables.Add(new InvoiceShipmentTableDataTable(ds.Tables["InvoiceShipmentTable"]));
                }
                if ((ds.Tables["InvoiceDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceDetailTableDataTable(ds.Tables["InvoiceDetailTable"]));
                }
                if ((ds.Tables["InvoiceTotalTable"] != null)) {
                    base.Tables.Add(new InvoiceTotalTableDataTable(ds.Tables["InvoiceTotalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientTableDataTable ClientTable {
            get {
                return this.tableClientTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientInvoiceTableDataTable ClientInvoiceTable {
            get {
                return this.tableClientInvoiceTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceShipmentTableDataTable InvoiceShipmentTable {
            get {
                return this.tableInvoiceShipmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDetailTableDataTable InvoiceDetailTable {
            get {
                return this.tableInvoiceDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceTotalTableDataTable InvoiceTotalTable {
            get {
                return this.tableInvoiceTotalTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InvoiceDS cln = ((InvoiceDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientTable"] != null)) {
                    base.Tables.Add(new ClientTableDataTable(ds.Tables["ClientTable"]));
                }
                if ((ds.Tables["ClientInvoiceTable"] != null)) {
                    base.Tables.Add(new ClientInvoiceTableDataTable(ds.Tables["ClientInvoiceTable"]));
                }
                if ((ds.Tables["InvoiceShipmentTable"] != null)) {
                    base.Tables.Add(new InvoiceShipmentTableDataTable(ds.Tables["InvoiceShipmentTable"]));
                }
                if ((ds.Tables["InvoiceDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceDetailTableDataTable(ds.Tables["InvoiceDetailTable"]));
                }
                if ((ds.Tables["InvoiceTotalTable"] != null)) {
                    base.Tables.Add(new InvoiceTotalTableDataTable(ds.Tables["InvoiceTotalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientTable = ((ClientTableDataTable)(base.Tables["ClientTable"]));
            if ((initTable == true)) {
                if ((this.tableClientTable != null)) {
                    this.tableClientTable.InitVars();
                }
            }
            this.tableClientInvoiceTable = ((ClientInvoiceTableDataTable)(base.Tables["ClientInvoiceTable"]));
            if ((initTable == true)) {
                if ((this.tableClientInvoiceTable != null)) {
                    this.tableClientInvoiceTable.InitVars();
                }
            }
            this.tableInvoiceShipmentTable = ((InvoiceShipmentTableDataTable)(base.Tables["InvoiceShipmentTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceShipmentTable != null)) {
                    this.tableInvoiceShipmentTable.InitVars();
                }
            }
            this.tableInvoiceDetailTable = ((InvoiceDetailTableDataTable)(base.Tables["InvoiceDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceDetailTable != null)) {
                    this.tableInvoiceDetailTable.InitVars();
                }
            }
            this.tableInvoiceTotalTable = ((InvoiceTotalTableDataTable)(base.Tables["InvoiceTotalTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceTotalTable != null)) {
                    this.tableInvoiceTotalTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InvoiceDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InvoiceDS.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientTable = new ClientTableDataTable();
            base.Tables.Add(this.tableClientTable);
            this.tableClientInvoiceTable = new ClientInvoiceTableDataTable();
            base.Tables.Add(this.tableClientInvoiceTable);
            this.tableInvoiceShipmentTable = new InvoiceShipmentTableDataTable();
            base.Tables.Add(this.tableInvoiceShipmentTable);
            this.tableInvoiceDetailTable = new InvoiceDetailTableDataTable();
            base.Tables.Add(this.tableInvoiceDetailTable);
            this.tableInvoiceTotalTable = new InvoiceTotalTableDataTable();
            base.Tables.Add(this.tableInvoiceTotalTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientInvoiceTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceShipmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceTotalTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InvoiceDS ds = new InvoiceDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientTableRowChangeEventHandler(object sender, ClientTableRowChangeEvent e);
        
        public delegate void ClientInvoiceTableRowChangeEventHandler(object sender, ClientInvoiceTableRowChangeEvent e);
        
        public delegate void InvoiceShipmentTableRowChangeEventHandler(object sender, InvoiceShipmentTableRowChangeEvent e);
        
        public delegate void InvoiceDetailTableRowChangeEventHandler(object sender, InvoiceDetailTableRowChangeEvent e);
        
        public delegate void InvoiceTotalTableRowChangeEventHandler(object sender, InvoiceTotalTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientTableDataTable : global::System.Data.TypedTableBase<ClientTableRow> {
            
            private global::System.Data.DataColumn columnClientNumber;
            
            private global::System.Data.DataColumn columnDivisionNumber;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnTerminalCode;
            
            private global::System.Data.DataColumn columnTerminalName;
            
            private global::System.Data.DataColumn columnARNumber;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableDataTable() {
                this.TableName = "ClientTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivisionNumberColumn {
                get {
                    return this.columnDivisionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalCodeColumn {
                get {
                    return this.columnTerminalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ARNumberColumn {
                get {
                    return this.columnARNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow this[int index] {
                get {
                    return ((ClientTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientTableRowChangeEventHandler ClientTableRowChanging;
            
            public event ClientTableRowChangeEventHandler ClientTableRowChanged;
            
            public event ClientTableRowChangeEventHandler ClientTableRowDeleting;
            
            public event ClientTableRowChangeEventHandler ClientTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientTableRow(ClientTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow AddClientTableRow(string ClientNumber, string DivisionNumber, string ClientName, string TerminalCode, string TerminalName, string ARNumber, string Status) {
                ClientTableRow rowClientTableRow = ((ClientTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientNumber,
                        DivisionNumber,
                        ClientName,
                        TerminalCode,
                        TerminalName,
                        ARNumber,
                        Status};
                rowClientTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientTableRow);
                return rowClientTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientTableDataTable cln = ((ClientTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnDivisionNumber = base.Columns["DivisionNumber"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnTerminalCode = base.Columns["TerminalCode"];
                this.columnTerminalName = base.Columns["TerminalName"];
                this.columnARNumber = base.Columns["ARNumber"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientNumber = new global::System.Data.DataColumn("ClientNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnDivisionNumber = new global::System.Data.DataColumn("DivisionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivisionNumber);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnTerminalCode = new global::System.Data.DataColumn("TerminalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalCode);
                this.columnTerminalName = new global::System.Data.DataColumn("TerminalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalName);
                this.columnARNumber = new global::System.Data.DataColumn("ARNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARNumber);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow NewClientTableRow() {
                return ((ClientTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientTableRowChanged != null)) {
                    this.ClientTableRowChanged(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientTableRowChanging != null)) {
                    this.ClientTableRowChanging(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientTableRowDeleted != null)) {
                    this.ClientTableRowDeleted(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientTableRowDeleting != null)) {
                    this.ClientTableRowDeleting(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientTableRow(ClientTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientInvoiceTableDataTable : global::System.Data.TypedTableBase<ClientInvoiceTableRow> {
            
            private global::System.Data.DataColumn columnInvoiceNumber;
            
            private global::System.Data.DataColumn columnInvoiceDate;
            
            private global::System.Data.DataColumn columnPostToARDate;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnPallets;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnReleaseDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableDataTable() {
                this.TableName = "ClientInvoiceTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInvoiceTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientInvoiceTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNumberColumn {
                get {
                    return this.columnInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostToARDateColumn {
                get {
                    return this.columnPostToARDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseDateColumn {
                get {
                    return this.columnReleaseDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow this[int index] {
                get {
                    return ((ClientInvoiceTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowChanging;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowChanged;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowDeleting;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientInvoiceTableRow(ClientInvoiceTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow AddClientInvoiceTableRow(string InvoiceNumber, System.DateTime InvoiceDate, System.DateTime PostToARDate, int Cartons, int Pallets, int Weight, decimal Amount, string Description, System.DateTime ReleaseDate) {
                ClientInvoiceTableRow rowClientInvoiceTableRow = ((ClientInvoiceTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InvoiceNumber,
                        InvoiceDate,
                        PostToARDate,
                        Cartons,
                        Pallets,
                        Weight,
                        Amount,
                        Description,
                        ReleaseDate};
                rowClientInvoiceTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientInvoiceTableRow);
                return rowClientInvoiceTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientInvoiceTableDataTable cln = ((ClientInvoiceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientInvoiceTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvoiceNumber = base.Columns["InvoiceNumber"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnPostToARDate = base.Columns["PostToARDate"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnPallets = base.Columns["Pallets"];
                this.columnWeight = base.Columns["Weight"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnReleaseDate = base.Columns["ReleaseDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvoiceNumber = new global::System.Data.DataColumn("InvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNumber);
                this.columnInvoiceDate = new global::System.Data.DataColumn("InvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnPostToARDate = new global::System.Data.DataColumn("PostToARDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostToARDate);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnPallets = new global::System.Data.DataColumn("Pallets", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPallets);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnReleaseDate = new global::System.Data.DataColumn("ReleaseDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow NewClientInvoiceTableRow() {
                return ((ClientInvoiceTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientInvoiceTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientInvoiceTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientInvoiceTableRowChanged != null)) {
                    this.ClientInvoiceTableRowChanged(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientInvoiceTableRowChanging != null)) {
                    this.ClientInvoiceTableRowChanging(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientInvoiceTableRowDeleted != null)) {
                    this.ClientInvoiceTableRowDeleted(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientInvoiceTableRowDeleting != null)) {
                    this.ClientInvoiceTableRowDeleting(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientInvoiceTableRow(ClientInvoiceTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientInvoiceTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceShipmentTableDataTable : global::System.Data.TypedTableBase<InvoiceShipmentTableRow> {
            
            private global::System.Data.DataColumn columnShipmentNumber;
            
            private global::System.Data.DataColumn columnCustomDocCharges;
            
            private global::System.Data.DataColumn columnTruckingRatesCharges;
            
            private global::System.Data.DataColumn columnFSCCharges;
            
            private global::System.Data.DataColumn columnDevanningUniteChargtes;
            
            private global::System.Data.DataColumn columnInsuranceCharges;
            
            private global::System.Data.DataColumn columnAirLineImportFeeCharges;
            
            private global::System.Data.DataColumn columnHouseBLCharges;
            
            private global::System.Data.DataColumn columnMiscellaneousCharges;
            
            private global::System.Data.DataColumn columnTotalInlandCharges;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableDataTable() {
                this.TableName = "InvoiceShipmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceShipmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceShipmentTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentNumberColumn {
                get {
                    return this.columnShipmentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomDocChargesColumn {
                get {
                    return this.columnCustomDocCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TruckingRatesChargesColumn {
                get {
                    return this.columnTruckingRatesCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCChargesColumn {
                get {
                    return this.columnFSCCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DevanningUniteChargtesColumn {
                get {
                    return this.columnDevanningUniteChargtes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceChargesColumn {
                get {
                    return this.columnInsuranceCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AirLineImportFeeChargesColumn {
                get {
                    return this.columnAirLineImportFeeCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HouseBLChargesColumn {
                get {
                    return this.columnHouseBLCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscellaneousChargesColumn {
                get {
                    return this.columnMiscellaneousCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalInlandChargesColumn {
                get {
                    return this.columnTotalInlandCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableRow this[int index] {
                get {
                    return ((InvoiceShipmentTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceShipmentTableRowChangeEventHandler InvoiceShipmentTableRowChanging;
            
            public event InvoiceShipmentTableRowChangeEventHandler InvoiceShipmentTableRowChanged;
            
            public event InvoiceShipmentTableRowChangeEventHandler InvoiceShipmentTableRowDeleting;
            
            public event InvoiceShipmentTableRowChangeEventHandler InvoiceShipmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceShipmentTableRow(InvoiceShipmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableRow AddInvoiceShipmentTableRow(string ShipmentNumber, decimal CustomDocCharges, decimal TruckingRatesCharges, decimal FSCCharges, decimal DevanningUniteChargtes, decimal InsuranceCharges, decimal AirLineImportFeeCharges, decimal HouseBLCharges, decimal MiscellaneousCharges, decimal TotalInlandCharges) {
                InvoiceShipmentTableRow rowInvoiceShipmentTableRow = ((InvoiceShipmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShipmentNumber,
                        CustomDocCharges,
                        TruckingRatesCharges,
                        FSCCharges,
                        DevanningUniteChargtes,
                        InsuranceCharges,
                        AirLineImportFeeCharges,
                        HouseBLCharges,
                        MiscellaneousCharges,
                        TotalInlandCharges};
                rowInvoiceShipmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceShipmentTableRow);
                return rowInvoiceShipmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceShipmentTableDataTable cln = ((InvoiceShipmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceShipmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShipmentNumber = base.Columns["ShipmentNumber"];
                this.columnCustomDocCharges = base.Columns["CustomDocCharges"];
                this.columnTruckingRatesCharges = base.Columns["TruckingRatesCharges"];
                this.columnFSCCharges = base.Columns["FSCCharges"];
                this.columnDevanningUniteChargtes = base.Columns["DevanningUniteChargtes"];
                this.columnInsuranceCharges = base.Columns["InsuranceCharges"];
                this.columnAirLineImportFeeCharges = base.Columns["AirLineImportFeeCharges"];
                this.columnHouseBLCharges = base.Columns["HouseBLCharges"];
                this.columnMiscellaneousCharges = base.Columns["MiscellaneousCharges"];
                this.columnTotalInlandCharges = base.Columns["TotalInlandCharges"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShipmentNumber = new global::System.Data.DataColumn("ShipmentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentNumber);
                this.columnCustomDocCharges = new global::System.Data.DataColumn("CustomDocCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomDocCharges);
                this.columnTruckingRatesCharges = new global::System.Data.DataColumn("TruckingRatesCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTruckingRatesCharges);
                this.columnFSCCharges = new global::System.Data.DataColumn("FSCCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCCharges);
                this.columnDevanningUniteChargtes = new global::System.Data.DataColumn("DevanningUniteChargtes", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDevanningUniteChargtes);
                this.columnInsuranceCharges = new global::System.Data.DataColumn("InsuranceCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCharges);
                this.columnAirLineImportFeeCharges = new global::System.Data.DataColumn("AirLineImportFeeCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAirLineImportFeeCharges);
                this.columnHouseBLCharges = new global::System.Data.DataColumn("HouseBLCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHouseBLCharges);
                this.columnMiscellaneousCharges = new global::System.Data.DataColumn("MiscellaneousCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscellaneousCharges);
                this.columnTotalInlandCharges = new global::System.Data.DataColumn("TotalInlandCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalInlandCharges);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableRow NewInvoiceShipmentTableRow() {
                return ((InvoiceShipmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceShipmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceShipmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceShipmentTableRowChanged != null)) {
                    this.InvoiceShipmentTableRowChanged(this, new InvoiceShipmentTableRowChangeEvent(((InvoiceShipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceShipmentTableRowChanging != null)) {
                    this.InvoiceShipmentTableRowChanging(this, new InvoiceShipmentTableRowChangeEvent(((InvoiceShipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceShipmentTableRowDeleted != null)) {
                    this.InvoiceShipmentTableRowDeleted(this, new InvoiceShipmentTableRowChangeEvent(((InvoiceShipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceShipmentTableRowDeleting != null)) {
                    this.InvoiceShipmentTableRowDeleting(this, new InvoiceShipmentTableRowChangeEvent(((InvoiceShipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceShipmentTableRow(InvoiceShipmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceShipmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceDetailTableDataTable : global::System.Data.TypedTableBase<InvoiceDetailTableRow> {
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnDeliveryCode;
            
            private global::System.Data.DataColumn columnStore;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnWeightKg;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnFSCSurchargePCT;
            
            private global::System.Data.DataColumn columnFuelSurcharge;
            
            private global::System.Data.DataColumn columnTotalDistributionCharges;
            
            private global::System.Data.DataColumn columnShipmentNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableDataTable() {
                this.TableName = "InvoiceDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryCodeColumn {
                get {
                    return this.columnDeliveryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreColumn {
                get {
                    return this.columnStore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightKgColumn {
                get {
                    return this.columnWeightKg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCSurchargePCTColumn {
                get {
                    return this.columnFSCSurchargePCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelSurchargeColumn {
                get {
                    return this.columnFuelSurcharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDistributionChargesColumn {
                get {
                    return this.columnTotalDistributionCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentNumberColumn {
                get {
                    return this.columnShipmentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow this[int index] {
                get {
                    return ((InvoiceDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowChanging;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowChanged;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowDeleting;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceDetailTableRow(InvoiceDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow AddInvoiceDetailTableRow(string Zone, string DeliveryCode, string Store, int Cartons, decimal WeightKg, int Weight, decimal Rate, decimal Amount, decimal FSCSurchargePCT, decimal FuelSurcharge, decimal TotalDistributionCharges, string ShipmentNumber) {
                InvoiceDetailTableRow rowInvoiceDetailTableRow = ((InvoiceDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Zone,
                        DeliveryCode,
                        Store,
                        Cartons,
                        WeightKg,
                        Weight,
                        Rate,
                        Amount,
                        FSCSurchargePCT,
                        FuelSurcharge,
                        TotalDistributionCharges,
                        ShipmentNumber};
                rowInvoiceDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceDetailTableRow);
                return rowInvoiceDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceDetailTableDataTable cln = ((InvoiceDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZone = base.Columns["Zone"];
                this.columnDeliveryCode = base.Columns["DeliveryCode"];
                this.columnStore = base.Columns["Store"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnWeightKg = base.Columns["WeightKg"];
                this.columnWeight = base.Columns["Weight"];
                this.columnRate = base.Columns["Rate"];
                this.columnAmount = base.Columns["Amount"];
                this.columnFSCSurchargePCT = base.Columns["FSCSurchargePCT"];
                this.columnFuelSurcharge = base.Columns["FuelSurcharge"];
                this.columnTotalDistributionCharges = base.Columns["TotalDistributionCharges"];
                this.columnShipmentNumber = base.Columns["ShipmentNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnDeliveryCode = new global::System.Data.DataColumn("DeliveryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryCode);
                this.columnStore = new global::System.Data.DataColumn("Store", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStore);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnWeightKg = new global::System.Data.DataColumn("WeightKg", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightKg);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnFSCSurchargePCT = new global::System.Data.DataColumn("FSCSurchargePCT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCSurchargePCT);
                this.columnFuelSurcharge = new global::System.Data.DataColumn("FuelSurcharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelSurcharge);
                this.columnTotalDistributionCharges = new global::System.Data.DataColumn("TotalDistributionCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDistributionCharges);
                this.columnShipmentNumber = new global::System.Data.DataColumn("ShipmentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentNumber);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow NewInvoiceDetailTableRow() {
                return ((InvoiceDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceDetailTableRowChanged != null)) {
                    this.InvoiceDetailTableRowChanged(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceDetailTableRowChanging != null)) {
                    this.InvoiceDetailTableRowChanging(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceDetailTableRowDeleted != null)) {
                    this.InvoiceDetailTableRowDeleted(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceDetailTableRowDeleting != null)) {
                    this.InvoiceDetailTableRowDeleting(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceDetailTableRow(InvoiceDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceTotalTableDataTable : global::System.Data.TypedTableBase<InvoiceTotalTableRow> {
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnWeightKg;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnInlandCharges;
            
            private global::System.Data.DataColumn columnDistributionCharges;
            
            private global::System.Data.DataColumn columnTotalCharges;
            
            private global::System.Data.DataColumn columnRemitToName;
            
            private global::System.Data.DataColumn columnRemitToAddressLine1;
            
            private global::System.Data.DataColumn columnRemitToAddressLine2;
            
            private global::System.Data.DataColumn columnRemitToCity;
            
            private global::System.Data.DataColumn columnRemitToState;
            
            private global::System.Data.DataColumn columnRemitToZip;
            
            private global::System.Data.DataColumn columnRemitToZip4;
            
            private global::System.Data.DataColumn columnTelephone;
            
            private global::System.Data.DataColumn columnInvoiceDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableDataTable() {
                this.TableName = "InvoiceTotalTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceTotalTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceTotalTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightKgColumn {
                get {
                    return this.columnWeightKg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InlandChargesColumn {
                get {
                    return this.columnInlandCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributionChargesColumn {
                get {
                    return this.columnDistributionCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalChargesColumn {
                get {
                    return this.columnTotalCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToNameColumn {
                get {
                    return this.columnRemitToName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToAddressLine1Column {
                get {
                    return this.columnRemitToAddressLine1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToAddressLine2Column {
                get {
                    return this.columnRemitToAddressLine2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToCityColumn {
                get {
                    return this.columnRemitToCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToStateColumn {
                get {
                    return this.columnRemitToState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToZipColumn {
                get {
                    return this.columnRemitToZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToZip4Column {
                get {
                    return this.columnRemitToZip4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableRow this[int index] {
                get {
                    return ((InvoiceTotalTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceTotalTableRowChangeEventHandler InvoiceTotalTableRowChanging;
            
            public event InvoiceTotalTableRowChangeEventHandler InvoiceTotalTableRowChanged;
            
            public event InvoiceTotalTableRowChangeEventHandler InvoiceTotalTableRowDeleting;
            
            public event InvoiceTotalTableRowChangeEventHandler InvoiceTotalTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceTotalTableRow(InvoiceTotalTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableRow AddInvoiceTotalTableRow(int Cartons, decimal WeightKg, int Weight, decimal InlandCharges, decimal DistributionCharges, decimal TotalCharges, string RemitToName, string RemitToAddressLine1, string RemitToAddressLine2, string RemitToCity, string RemitToState, string RemitToZip, string RemitToZip4, decimal Telephone, System.DateTime InvoiceDate) {
                InvoiceTotalTableRow rowInvoiceTotalTableRow = ((InvoiceTotalTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Cartons,
                        WeightKg,
                        Weight,
                        InlandCharges,
                        DistributionCharges,
                        TotalCharges,
                        RemitToName,
                        RemitToAddressLine1,
                        RemitToAddressLine2,
                        RemitToCity,
                        RemitToState,
                        RemitToZip,
                        RemitToZip4,
                        Telephone,
                        InvoiceDate};
                rowInvoiceTotalTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceTotalTableRow);
                return rowInvoiceTotalTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceTotalTableDataTable cln = ((InvoiceTotalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceTotalTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCartons = base.Columns["Cartons"];
                this.columnWeightKg = base.Columns["WeightKg"];
                this.columnWeight = base.Columns["Weight"];
                this.columnInlandCharges = base.Columns["InlandCharges"];
                this.columnDistributionCharges = base.Columns["DistributionCharges"];
                this.columnTotalCharges = base.Columns["TotalCharges"];
                this.columnRemitToName = base.Columns["RemitToName"];
                this.columnRemitToAddressLine1 = base.Columns["RemitToAddressLine1"];
                this.columnRemitToAddressLine2 = base.Columns["RemitToAddressLine2"];
                this.columnRemitToCity = base.Columns["RemitToCity"];
                this.columnRemitToState = base.Columns["RemitToState"];
                this.columnRemitToZip = base.Columns["RemitToZip"];
                this.columnRemitToZip4 = base.Columns["RemitToZip4"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnWeightKg = new global::System.Data.DataColumn("WeightKg", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightKg);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnInlandCharges = new global::System.Data.DataColumn("InlandCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInlandCharges);
                this.columnDistributionCharges = new global::System.Data.DataColumn("DistributionCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionCharges);
                this.columnTotalCharges = new global::System.Data.DataColumn("TotalCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCharges);
                this.columnRemitToName = new global::System.Data.DataColumn("RemitToName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToName);
                this.columnRemitToAddressLine1 = new global::System.Data.DataColumn("RemitToAddressLine1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToAddressLine1);
                this.columnRemitToAddressLine2 = new global::System.Data.DataColumn("RemitToAddressLine2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToAddressLine2);
                this.columnRemitToCity = new global::System.Data.DataColumn("RemitToCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToCity);
                this.columnRemitToState = new global::System.Data.DataColumn("RemitToState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToState);
                this.columnRemitToZip = new global::System.Data.DataColumn("RemitToZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToZip);
                this.columnRemitToZip4 = new global::System.Data.DataColumn("RemitToZip4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToZip4);
                this.columnTelephone = new global::System.Data.DataColumn("Telephone", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnInvoiceDate = new global::System.Data.DataColumn("InvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableRow NewInvoiceTotalTableRow() {
                return ((InvoiceTotalTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceTotalTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceTotalTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceTotalTableRowChanged != null)) {
                    this.InvoiceTotalTableRowChanged(this, new InvoiceTotalTableRowChangeEvent(((InvoiceTotalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceTotalTableRowChanging != null)) {
                    this.InvoiceTotalTableRowChanging(this, new InvoiceTotalTableRowChangeEvent(((InvoiceTotalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceTotalTableRowDeleted != null)) {
                    this.InvoiceTotalTableRowDeleted(this, new InvoiceTotalTableRowChangeEvent(((InvoiceTotalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceTotalTableRowDeleting != null)) {
                    this.InvoiceTotalTableRowDeleting(this, new InvoiceTotalTableRowChangeEvent(((InvoiceTotalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceTotalTableRow(InvoiceTotalTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceTotalTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientTableRow : global::System.Data.DataRow {
            
            private ClientTableDataTable tableClientTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientTable = ((ClientTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ClientNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ClientNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DivisionNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.DivisionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivisionNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.DivisionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalCode {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.TerminalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalCode\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.TerminalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalName {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.TerminalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalName\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.TerminalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ARNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ARNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ARNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableClientTable.ClientNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableClientTable.ClientNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivisionNumberNull() {
                return this.IsNull(this.tableClientTable.DivisionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivisionNumberNull() {
                this[this.tableClientTable.DivisionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableClientTable.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableClientTable.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalCodeNull() {
                return this.IsNull(this.tableClientTable.TerminalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalCodeNull() {
                this[this.tableClientTable.TerminalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalNameNull() {
                return this.IsNull(this.tableClientTable.TerminalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalNameNull() {
                this[this.tableClientTable.TerminalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsARNumberNull() {
                return this.IsNull(this.tableClientTable.ARNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetARNumberNull() {
                this[this.tableClientTable.ARNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableClientTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableClientTable.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientInvoiceTableRow : global::System.Data.DataRow {
            
            private ClientInvoiceTableDataTable tableClientInvoiceTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInvoiceTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientInvoiceTable = ((ClientInvoiceTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientInvoiceTable.InvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNumber\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.InvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.InvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.InvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PostToARDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.PostToARDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostToARDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.PostToARDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.PalletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pallets\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.PalletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableClientInvoiceTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableClientInvoiceTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReleaseDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.ReleaseDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.ReleaseDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNumberNull() {
                return this.IsNull(this.tableClientInvoiceTable.InvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNumberNull() {
                this[this.tableClientInvoiceTable.InvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.InvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDateNull() {
                this[this.tableClientInvoiceTable.InvoiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostToARDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.PostToARDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostToARDateNull() {
                this[this.tableClientInvoiceTable.PostToARDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableClientInvoiceTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableClientInvoiceTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsNull() {
                return this.IsNull(this.tableClientInvoiceTable.PalletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsNull() {
                this[this.tableClientInvoiceTable.PalletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableClientInvoiceTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableClientInvoiceTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableClientInvoiceTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableClientInvoiceTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableClientInvoiceTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableClientInvoiceTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.ReleaseDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseDateNull() {
                this[this.tableClientInvoiceTable.ReleaseDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceShipmentTableRow : global::System.Data.DataRow {
            
            private InvoiceShipmentTableDataTable tableInvoiceShipmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceShipmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceShipmentTable = ((InvoiceShipmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipmentNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceShipmentTable.ShipmentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipmentNumber\' in table \'InvoiceShipmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.ShipmentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CustomDocCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.CustomDocChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomDocCharges\' in table \'InvoiceShipmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.CustomDocChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TruckingRatesCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.TruckingRatesChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TruckingRatesCharges\' in table \'InvoiceShipmentTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.TruckingRatesChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.FSCChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCCharges\' in table \'InvoiceShipmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.FSCChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DevanningUniteChargtes {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.DevanningUniteChargtesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DevanningUniteChargtes\' in table \'InvoiceShipmentTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.DevanningUniteChargtesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InsuranceCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.InsuranceChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceCharges\' in table \'InvoiceShipmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.InsuranceChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AirLineImportFeeCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.AirLineImportFeeChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AirLineImportFeeCharges\' in table \'InvoiceShipmentTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.AirLineImportFeeChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HouseBLCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.HouseBLChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HouseBLCharges\' in table \'InvoiceShipmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.HouseBLChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MiscellaneousCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.MiscellaneousChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiscellaneousCharges\' in table \'InvoiceShipmentTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.MiscellaneousChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalInlandCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceShipmentTable.TotalInlandChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalInlandCharges\' in table \'InvoiceShipmentTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInvoiceShipmentTable.TotalInlandChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentNumberNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.ShipmentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentNumberNull() {
                this[this.tableInvoiceShipmentTable.ShipmentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomDocChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.CustomDocChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomDocChargesNull() {
                this[this.tableInvoiceShipmentTable.CustomDocChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTruckingRatesChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.TruckingRatesChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTruckingRatesChargesNull() {
                this[this.tableInvoiceShipmentTable.TruckingRatesChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.FSCChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCChargesNull() {
                this[this.tableInvoiceShipmentTable.FSCChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDevanningUniteChargtesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.DevanningUniteChargtesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDevanningUniteChargtesNull() {
                this[this.tableInvoiceShipmentTable.DevanningUniteChargtesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.InsuranceChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceChargesNull() {
                this[this.tableInvoiceShipmentTable.InsuranceChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAirLineImportFeeChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.AirLineImportFeeChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAirLineImportFeeChargesNull() {
                this[this.tableInvoiceShipmentTable.AirLineImportFeeChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouseBLChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.HouseBLChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouseBLChargesNull() {
                this[this.tableInvoiceShipmentTable.HouseBLChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiscellaneousChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.MiscellaneousChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiscellaneousChargesNull() {
                this[this.tableInvoiceShipmentTable.MiscellaneousChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalInlandChargesNull() {
                return this.IsNull(this.tableInvoiceShipmentTable.TotalInlandChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalInlandChargesNull() {
                this[this.tableInvoiceShipmentTable.TotalInlandChargesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceDetailTableRow : global::System.Data.DataRow {
            
            private InvoiceDetailTableDataTable tableInvoiceDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceDetailTable = ((InvoiceDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliveryCode {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.DeliveryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryCode\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.DeliveryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Store {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.StoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Store\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.StoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetailTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightKg {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.WeightKgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightKg\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.WeightKgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetailTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCSurchargePCT {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.FSCSurchargePCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCSurchargePCT\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.FSCSurchargePCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuelSurcharge {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.FuelSurchargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelSurcharge\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.FuelSurchargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDistributionCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.TotalDistributionChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDistributionCharges\' in table \'InvoiceDetailTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.TotalDistributionChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipmentNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.ShipmentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipmentNumber\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.ShipmentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableInvoiceDetailTable.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableInvoiceDetailTable.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryCodeNull() {
                return this.IsNull(this.tableInvoiceDetailTable.DeliveryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryCodeNull() {
                this[this.tableInvoiceDetailTable.DeliveryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreNull() {
                return this.IsNull(this.tableInvoiceDetailTable.StoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreNull() {
                this[this.tableInvoiceDetailTable.StoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableInvoiceDetailTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableInvoiceDetailTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightKgNull() {
                return this.IsNull(this.tableInvoiceDetailTable.WeightKgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightKgNull() {
                this[this.tableInvoiceDetailTable.WeightKgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableInvoiceDetailTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableInvoiceDetailTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableInvoiceDetailTable.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableInvoiceDetailTable.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableInvoiceDetailTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableInvoiceDetailTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCSurchargePCTNull() {
                return this.IsNull(this.tableInvoiceDetailTable.FSCSurchargePCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCSurchargePCTNull() {
                this[this.tableInvoiceDetailTable.FSCSurchargePCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelSurchargeNull() {
                return this.IsNull(this.tableInvoiceDetailTable.FuelSurchargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelSurchargeNull() {
                this[this.tableInvoiceDetailTable.FuelSurchargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDistributionChargesNull() {
                return this.IsNull(this.tableInvoiceDetailTable.TotalDistributionChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDistributionChargesNull() {
                this[this.tableInvoiceDetailTable.TotalDistributionChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentNumberNull() {
                return this.IsNull(this.tableInvoiceDetailTable.ShipmentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentNumberNull() {
                this[this.tableInvoiceDetailTable.ShipmentNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceTotalTableRow : global::System.Data.DataRow {
            
            private InvoiceTotalTableDataTable tableInvoiceTotalTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceTotalTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceTotalTable = ((InvoiceTotalTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceTotalTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WeightKg {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTotalTable.WeightKgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightKg\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.WeightKgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceTotalTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InlandCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTotalTable.InlandChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InlandCharges\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.InlandChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DistributionCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTotalTable.DistributionChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributionCharges\' in table \'InvoiceTotalTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.DistributionChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTotalTable.TotalChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCharges\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.TotalChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToName\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToAddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToAddressLine1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToAddressLine1\' in table \'InvoiceTotalTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToAddressLine1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToAddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToAddressLine2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToAddressLine2\' in table \'InvoiceTotalTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToAddressLine2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToCity {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToCity\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToState {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToState\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToZip {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToZip\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToZip4 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTotalTable.RemitToZip4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToZip4\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.RemitToZip4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Telephone {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTotalTable.TelephoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Telephone\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.TelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInvoiceTotalTable.InvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDate\' in table \'InvoiceTotalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTotalTable.InvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableInvoiceTotalTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableInvoiceTotalTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightKgNull() {
                return this.IsNull(this.tableInvoiceTotalTable.WeightKgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightKgNull() {
                this[this.tableInvoiceTotalTable.WeightKgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableInvoiceTotalTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableInvoiceTotalTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInlandChargesNull() {
                return this.IsNull(this.tableInvoiceTotalTable.InlandChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInlandChargesNull() {
                this[this.tableInvoiceTotalTable.InlandChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributionChargesNull() {
                return this.IsNull(this.tableInvoiceTotalTable.DistributionChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributionChargesNull() {
                this[this.tableInvoiceTotalTable.DistributionChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalChargesNull() {
                return this.IsNull(this.tableInvoiceTotalTable.TotalChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalChargesNull() {
                this[this.tableInvoiceTotalTable.TotalChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToNameNull() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToNameNull() {
                this[this.tableInvoiceTotalTable.RemitToNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToAddressLine1Null() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToAddressLine1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToAddressLine1Null() {
                this[this.tableInvoiceTotalTable.RemitToAddressLine1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToAddressLine2Null() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToAddressLine2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToAddressLine2Null() {
                this[this.tableInvoiceTotalTable.RemitToAddressLine2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToCityNull() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToCityNull() {
                this[this.tableInvoiceTotalTable.RemitToCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToStateNull() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToStateNull() {
                this[this.tableInvoiceTotalTable.RemitToStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToZipNull() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToZipNull() {
                this[this.tableInvoiceTotalTable.RemitToZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToZip4Null() {
                return this.IsNull(this.tableInvoiceTotalTable.RemitToZip4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToZip4Null() {
                this[this.tableInvoiceTotalTable.RemitToZip4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneNull() {
                return this.IsNull(this.tableInvoiceTotalTable.TelephoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneNull() {
                this[this.tableInvoiceTotalTable.TelephoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDateNull() {
                return this.IsNull(this.tableInvoiceTotalTable.InvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDateNull() {
                this[this.tableInvoiceTotalTable.InvoiceDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientTableRowChangeEvent : global::System.EventArgs {
            
            private ClientTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRowChangeEvent(ClientTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientInvoiceTableRowChangeEvent : global::System.EventArgs {
            
            private ClientInvoiceTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRowChangeEvent(ClientInvoiceTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceShipmentTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceShipmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableRowChangeEvent(InvoiceShipmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceShipmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceDetailTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRowChangeEvent(InvoiceDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceTotalTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceTotalTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableRowChangeEvent(InvoiceTotalTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTotalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591