//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class LocationDS : DataSet {
        
        private LocationListTableDataTable tableLocationListTable;
        
        public LocationDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected LocationDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["LocationListTable"] != null)) {
                    this.Tables.Add(new LocationListTableDataTable(ds.Tables["LocationListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocationListTableDataTable LocationListTable {
            get {
                return this.tableLocationListTable;
            }
        }
        
        public override DataSet Clone() {
            LocationDS cln = ((LocationDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["LocationListTable"] != null)) {
                this.Tables.Add(new LocationListTableDataTable(ds.Tables["LocationListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableLocationListTable = ((LocationListTableDataTable)(this.Tables["LocationListTable"]));
            if ((this.tableLocationListTable != null)) {
                this.tableLocationListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "LocationDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/LocationDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableLocationListTable = new LocationListTableDataTable();
            this.Tables.Add(this.tableLocationListTable);
        }
        
        private bool ShouldSerializeLocationListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void LocationListTableRowChangeEventHandler(object sender, LocationListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocationListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnCountry;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnMnemonic;
            
            internal LocationListTableDataTable() : 
                    base("LocationListTable") {
                this.InitClass();
            }
            
            internal LocationListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            public LocationListTableRow this[int index] {
                get {
                    return ((LocationListTableRow)(this.Rows[index]));
                }
            }
            
            public event LocationListTableRowChangeEventHandler LocationListTableRowChanged;
            
            public event LocationListTableRowChangeEventHandler LocationListTableRowChanging;
            
            public event LocationListTableRowChangeEventHandler LocationListTableRowDeleted;
            
            public event LocationListTableRowChangeEventHandler LocationListTableRowDeleting;
            
            public void AddLocationListTableRow(LocationListTableRow row) {
                this.Rows.Add(row);
            }
            
            public LocationListTableRow AddLocationListTableRow(int LocationID, int CompanyID, string Number, string Type, string Description, string AddressLine1, string AddressLine2, string City, string StateOrProvince, string PostalCode, string Country, System.DateTime OpenTime, System.DateTime CloseTime, string Mnemonic) {
                LocationListTableRow rowLocationListTableRow = ((LocationListTableRow)(this.NewRow()));
                rowLocationListTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        Type,
                        Description,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Country,
                        OpenTime,
                        CloseTime,
                        Mnemonic};
                this.Rows.Add(rowLocationListTableRow);
                return rowLocationListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LocationListTableDataTable cln = ((LocationListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LocationListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnType = this.Columns["Type"];
                this.columnDescription = this.Columns["Description"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnCountry = this.Columns["Country"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnMnemonic = this.Columns["Mnemonic"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
            }
            
            public LocationListTableRow NewLocationListTableRow() {
                return ((LocationListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LocationListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LocationListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LocationListTableRowChanged != null)) {
                    this.LocationListTableRowChanged(this, new LocationListTableRowChangeEvent(((LocationListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LocationListTableRowChanging != null)) {
                    this.LocationListTableRowChanging(this, new LocationListTableRowChangeEvent(((LocationListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LocationListTableRowDeleted != null)) {
                    this.LocationListTableRowDeleted(this, new LocationListTableRowChangeEvent(((LocationListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LocationListTableRowDeleting != null)) {
                    this.LocationListTableRowDeleting(this, new LocationListTableRowChangeEvent(((LocationListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLocationListTableRow(LocationListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocationListTableRow : DataRow {
            
            private LocationListTableDataTable tableLocationListTable;
            
            internal LocationListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocationListTable = ((LocationListTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableLocationListTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableLocationListTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.NumberColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.TypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.DescriptionColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLocationListTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLocationListTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.CloseTimeColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableLocationListTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocationListTable.MnemonicColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableLocationListTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableLocationListTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableLocationListTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableLocationListTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableLocationListTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableLocationListTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableLocationListTable.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableLocationListTable.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLocationListTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableLocationListTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableLocationListTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableLocationListTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableLocationListTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableLocationListTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableLocationListTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableLocationListTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableLocationListTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableLocationListTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableLocationListTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableLocationListTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableLocationListTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableLocationListTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableLocationListTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableLocationListTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableLocationListTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableLocationListTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableLocationListTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableLocationListTable.MnemonicColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocationListTableRowChangeEvent : EventArgs {
            
            private LocationListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public LocationListTableRowChangeEvent(LocationListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LocationListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
