//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class WorkstationlDS : DataSet {
        
        private TerminalWorkstationTableDataTable tableTerminalWorkstationTable;
        
        public WorkstationlDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected WorkstationlDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TerminalWorkstationTable"] != null)) {
                    this.Tables.Add(new TerminalWorkstationTableDataTable(ds.Tables["TerminalWorkstationTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalWorkstationTableDataTable TerminalWorkstationTable {
            get {
                return this.tableTerminalWorkstationTable;
            }
        }
        
        public override DataSet Clone() {
            WorkstationlDS cln = ((WorkstationlDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TerminalWorkstationTable"] != null)) {
                this.Tables.Add(new TerminalWorkstationTableDataTable(ds.Tables["TerminalWorkstationTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTerminalWorkstationTable = ((TerminalWorkstationTableDataTable)(this.Tables["TerminalWorkstationTable"]));
            if ((this.tableTerminalWorkstationTable != null)) {
                this.tableTerminalWorkstationTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "WorkstationlDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/WorkstationlDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTerminalWorkstationTable = new TerminalWorkstationTableDataTable();
            this.Tables.Add(this.tableTerminalWorkstationTable);
        }
        
        private bool ShouldSerializeTerminalWorkstationTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TerminalWorkstationTableRowChangeEventHandler(object sender, TerminalWorkstationTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalWorkstationTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnWorkstationID;
            
            private DataColumn columnName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLocationDescription;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnScaleTypeID;
            
            private DataColumn columnScaleType;
            
            private DataColumn columnScalePort;
            
            private DataColumn columnPrinterTypeID;
            
            private DataColumn columnPrinterType;
            
            private DataColumn columnPrinterPort;
            
            private DataColumn columnTrace;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnOriginal_Name;
            
            internal TerminalWorkstationTableDataTable() : 
                    base("TerminalWorkstationTable") {
                this.InitClass();
            }
            
            internal TerminalWorkstationTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn WorkstationIDColumn {
                get {
                    return this.columnWorkstationID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LocationDescriptionColumn {
                get {
                    return this.columnLocationDescription;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn ScaleTypeIDColumn {
                get {
                    return this.columnScaleTypeID;
                }
            }
            
            internal DataColumn ScaleTypeColumn {
                get {
                    return this.columnScaleType;
                }
            }
            
            internal DataColumn ScalePortColumn {
                get {
                    return this.columnScalePort;
                }
            }
            
            internal DataColumn PrinterTypeIDColumn {
                get {
                    return this.columnPrinterTypeID;
                }
            }
            
            internal DataColumn PrinterTypeColumn {
                get {
                    return this.columnPrinterType;
                }
            }
            
            internal DataColumn PrinterPortColumn {
                get {
                    return this.columnPrinterPort;
                }
            }
            
            internal DataColumn TraceColumn {
                get {
                    return this.columnTrace;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn Original_NameColumn {
                get {
                    return this.columnOriginal_Name;
                }
            }
            
            public TerminalWorkstationTableRow this[int index] {
                get {
                    return ((TerminalWorkstationTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalWorkstationTableRowChangeEventHandler TerminalWorkstationTableRowChanged;
            
            public event TerminalWorkstationTableRowChangeEventHandler TerminalWorkstationTableRowChanging;
            
            public event TerminalWorkstationTableRowChangeEventHandler TerminalWorkstationTableRowDeleted;
            
            public event TerminalWorkstationTableRowChangeEventHandler TerminalWorkstationTableRowDeleting;
            
            public void AddTerminalWorkstationTableRow(TerminalWorkstationTableRow row) {
                this.Rows.Add(row);
            }
            
            public TerminalWorkstationTableRow AddTerminalWorkstationTableRow(
                        int WorkstationID, 
                        string Name, 
                        string Number, 
                        string Description, 
                        string LocationDescription, 
                        int TerminalID, 
                        string Terminal, 
                        int ScaleTypeID, 
                        string ScaleType, 
                        string ScalePort, 
                        int PrinterTypeID, 
                        string PrinterType, 
                        string PrinterPort, 
                        bool Trace, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion, 
                        string Original_Name) {
                TerminalWorkstationTableRow rowTerminalWorkstationTableRow = ((TerminalWorkstationTableRow)(this.NewRow()));
                rowTerminalWorkstationTableRow.ItemArray = new object[] {
                        WorkstationID,
                        Name,
                        Number,
                        Description,
                        LocationDescription,
                        TerminalID,
                        Terminal,
                        ScaleTypeID,
                        ScaleType,
                        ScalePort,
                        PrinterTypeID,
                        PrinterType,
                        PrinterPort,
                        Trace,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        Original_Name};
                this.Rows.Add(rowTerminalWorkstationTableRow);
                return rowTerminalWorkstationTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerminalWorkstationTableDataTable cln = ((TerminalWorkstationTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerminalWorkstationTableDataTable();
            }
            
            internal void InitVars() {
                this.columnWorkstationID = this.Columns["WorkstationID"];
                this.columnName = this.Columns["Name"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnLocationDescription = this.Columns["LocationDescription"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnScaleTypeID = this.Columns["ScaleTypeID"];
                this.columnScaleType = this.Columns["ScaleType"];
                this.columnScalePort = this.Columns["ScalePort"];
                this.columnPrinterTypeID = this.Columns["PrinterTypeID"];
                this.columnPrinterType = this.Columns["PrinterType"];
                this.columnPrinterPort = this.Columns["PrinterPort"];
                this.columnTrace = this.Columns["Trace"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnOriginal_Name = this.Columns["Original_Name"];
            }
            
            private void InitClass() {
                this.columnWorkstationID = new DataColumn("WorkstationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkstationID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLocationDescription = new DataColumn("LocationDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationDescription);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnScaleTypeID = new DataColumn("ScaleTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScaleTypeID);
                this.columnScaleType = new DataColumn("ScaleType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScaleType);
                this.columnScalePort = new DataColumn("ScalePort", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScalePort);
                this.columnPrinterTypeID = new DataColumn("PrinterTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrinterTypeID);
                this.columnPrinterType = new DataColumn("PrinterType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrinterType);
                this.columnPrinterPort = new DataColumn("PrinterPort", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrinterPort);
                this.columnTrace = new DataColumn("Trace", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrace);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnOriginal_Name = new DataColumn("Original_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginal_Name);
            }
            
            public TerminalWorkstationTableRow NewTerminalWorkstationTableRow() {
                return ((TerminalWorkstationTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerminalWorkstationTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerminalWorkstationTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalWorkstationTableRowChanged != null)) {
                    this.TerminalWorkstationTableRowChanged(this, new TerminalWorkstationTableRowChangeEvent(((TerminalWorkstationTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalWorkstationTableRowChanging != null)) {
                    this.TerminalWorkstationTableRowChanging(this, new TerminalWorkstationTableRowChangeEvent(((TerminalWorkstationTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalWorkstationTableRowDeleted != null)) {
                    this.TerminalWorkstationTableRowDeleted(this, new TerminalWorkstationTableRowChangeEvent(((TerminalWorkstationTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalWorkstationTableRowDeleting != null)) {
                    this.TerminalWorkstationTableRowDeleting(this, new TerminalWorkstationTableRowChangeEvent(((TerminalWorkstationTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerminalWorkstationTableRow(TerminalWorkstationTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalWorkstationTableRow : DataRow {
            
            private TerminalWorkstationTableDataTable tableTerminalWorkstationTable;
            
            internal TerminalWorkstationTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalWorkstationTable = ((TerminalWorkstationTableDataTable)(this.Table));
            }
            
            public int WorkstationID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalWorkstationTable.WorkstationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.WorkstationIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.NameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.DescriptionColumn] = value;
                }
            }
            
            public string LocationDescription {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.LocationDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.LocationDescriptionColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalWorkstationTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.TerminalColumn] = value;
                }
            }
            
            public int ScaleTypeID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalWorkstationTable.ScaleTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.ScaleTypeIDColumn] = value;
                }
            }
            
            public string ScaleType {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.ScaleTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.ScaleTypeColumn] = value;
                }
            }
            
            public string ScalePort {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.ScalePortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.ScalePortColumn] = value;
                }
            }
            
            public int PrinterTypeID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalWorkstationTable.PrinterTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.PrinterTypeIDColumn] = value;
                }
            }
            
            public string PrinterType {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.PrinterTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.PrinterTypeColumn] = value;
                }
            }
            
            public string PrinterPort {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.PrinterPortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.PrinterPortColumn] = value;
                }
            }
            
            public bool Trace {
                get {
                    try {
                        return ((bool)(this[this.tableTerminalWorkstationTable.TraceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.TraceColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTerminalWorkstationTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.RowVersionColumn] = value;
                }
            }
            
            public string Original_Name {
                get {
                    try {
                        return ((string)(this[this.tableTerminalWorkstationTable.Original_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalWorkstationTable.Original_NameColumn] = value;
                }
            }
            
            public bool IsWorkstationIDNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.WorkstationIDColumn);
            }
            
            public void SetWorkstationIDNull() {
                this[this.tableTerminalWorkstationTable.WorkstationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableTerminalWorkstationTable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableTerminalWorkstationTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableTerminalWorkstationTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationDescriptionNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.LocationDescriptionColumn);
            }
            
            public void SetLocationDescriptionNull() {
                this[this.tableTerminalWorkstationTable.LocationDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableTerminalWorkstationTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableTerminalWorkstationTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsScaleTypeIDNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.ScaleTypeIDColumn);
            }
            
            public void SetScaleTypeIDNull() {
                this[this.tableTerminalWorkstationTable.ScaleTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsScaleTypeNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.ScaleTypeColumn);
            }
            
            public void SetScaleTypeNull() {
                this[this.tableTerminalWorkstationTable.ScaleTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsScalePortNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.ScalePortColumn);
            }
            
            public void SetScalePortNull() {
                this[this.tableTerminalWorkstationTable.ScalePortColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterTypeIDNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.PrinterTypeIDColumn);
            }
            
            public void SetPrinterTypeIDNull() {
                this[this.tableTerminalWorkstationTable.PrinterTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterTypeNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.PrinterTypeColumn);
            }
            
            public void SetPrinterTypeNull() {
                this[this.tableTerminalWorkstationTable.PrinterTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterPortNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.PrinterPortColumn);
            }
            
            public void SetPrinterPortNull() {
                this[this.tableTerminalWorkstationTable.PrinterPortColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.TraceColumn);
            }
            
            public void SetTraceNull() {
                this[this.tableTerminalWorkstationTable.TraceColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableTerminalWorkstationTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableTerminalWorkstationTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableTerminalWorkstationTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginal_NameNull() {
                return this.IsNull(this.tableTerminalWorkstationTable.Original_NameColumn);
            }
            
            public void SetOriginal_NameNull() {
                this[this.tableTerminalWorkstationTable.Original_NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalWorkstationTableRowChangeEvent : EventArgs {
            
            private TerminalWorkstationTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerminalWorkstationTableRowChangeEvent(TerminalWorkstationTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerminalWorkstationTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
