//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class WarehouseDS : DataSet {
        
        private WarehouseDetailTableDataTable tableWarehouseDetailTable;
        
        private WarehouseViewTableDataTable tableWarehouseViewTable;
        
        private AddressDetailTableDataTable tableAddressDetailTable;
        
        public WarehouseDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected WarehouseDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["WarehouseDetailTable"] != null)) {
                    this.Tables.Add(new WarehouseDetailTableDataTable(ds.Tables["WarehouseDetailTable"]));
                }
                if ((ds.Tables["WarehouseViewTable"] != null)) {
                    this.Tables.Add(new WarehouseViewTableDataTable(ds.Tables["WarehouseViewTable"]));
                }
                if ((ds.Tables["AddressDetailTable"] != null)) {
                    this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WarehouseDetailTableDataTable WarehouseDetailTable {
            get {
                return this.tableWarehouseDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WarehouseViewTableDataTable WarehouseViewTable {
            get {
                return this.tableWarehouseViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDetailTableDataTable AddressDetailTable {
            get {
                return this.tableAddressDetailTable;
            }
        }
        
        public override DataSet Clone() {
            WarehouseDS cln = ((WarehouseDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["WarehouseDetailTable"] != null)) {
                this.Tables.Add(new WarehouseDetailTableDataTable(ds.Tables["WarehouseDetailTable"]));
            }
            if ((ds.Tables["WarehouseViewTable"] != null)) {
                this.Tables.Add(new WarehouseViewTableDataTable(ds.Tables["WarehouseViewTable"]));
            }
            if ((ds.Tables["AddressDetailTable"] != null)) {
                this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableWarehouseDetailTable = ((WarehouseDetailTableDataTable)(this.Tables["WarehouseDetailTable"]));
            if ((this.tableWarehouseDetailTable != null)) {
                this.tableWarehouseDetailTable.InitVars();
            }
            this.tableWarehouseViewTable = ((WarehouseViewTableDataTable)(this.Tables["WarehouseViewTable"]));
            if ((this.tableWarehouseViewTable != null)) {
                this.tableWarehouseViewTable.InitVars();
            }
            this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Tables["AddressDetailTable"]));
            if ((this.tableAddressDetailTable != null)) {
                this.tableAddressDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "WarehouseDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/WarehouseDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableWarehouseDetailTable = new WarehouseDetailTableDataTable();
            this.Tables.Add(this.tableWarehouseDetailTable);
            this.tableWarehouseViewTable = new WarehouseViewTableDataTable();
            this.Tables.Add(this.tableWarehouseViewTable);
            this.tableAddressDetailTable = new AddressDetailTableDataTable();
            this.Tables.Add(this.tableAddressDetailTable);
        }
        
        private bool ShouldSerializeWarehouseDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeWarehouseViewTable() {
            return false;
        }
        
        private bool ShouldSerializeAddressDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void WarehouseDetailTableRowChangeEventHandler(object sender, WarehouseDetailTableRowChangeEvent e);
        
        public delegate void WarehouseViewTableRowChangeEventHandler(object sender, WarehouseViewTableRowChangeEvent e);
        
        public delegate void AddressDetailTableRowChangeEventHandler(object sender, AddressDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnException;
            
            private DataColumn columnIsArgixUse;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal WarehouseDetailTableDataTable() : 
                    base("WarehouseDetailTable") {
                this.InitClass();
            }
            
            internal WarehouseDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn ExceptionColumn {
                get {
                    return this.columnException;
                }
            }
            
            internal DataColumn IsArgixUseColumn {
                get {
                    return this.columnIsArgixUse;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public WarehouseDetailTableRow this[int index] {
                get {
                    return ((WarehouseDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event WarehouseDetailTableRowChangeEventHandler WarehouseDetailTableRowChanged;
            
            public event WarehouseDetailTableRowChangeEventHandler WarehouseDetailTableRowChanging;
            
            public event WarehouseDetailTableRowChangeEventHandler WarehouseDetailTableRowDeleted;
            
            public event WarehouseDetailTableRowChangeEventHandler WarehouseDetailTableRowDeleting;
            
            public void AddWarehouseDetailTableRow(WarehouseDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public WarehouseDetailTableRow AddWarehouseDetailTableRow(
                        int LocationID, 
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        bool IsActive, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        string Exception, 
                        bool IsArgixUse, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                WarehouseDetailTableRow rowWarehouseDetailTableRow = ((WarehouseDetailTableRow)(this.NewRow()));
                rowWarehouseDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        IsActive,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        Exception,
                        IsArgixUse,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowWarehouseDetailTableRow);
                return rowWarehouseDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WarehouseDetailTableDataTable cln = ((WarehouseDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WarehouseDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnException = this.Columns["Exception"];
                this.columnIsArgixUse = this.Columns["IsArgixUse"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnException = new DataColumn("Exception", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnException);
                this.columnIsArgixUse = new DataColumn("IsArgixUse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsArgixUse);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCompanyID.AllowDBNull = false;
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public WarehouseDetailTableRow NewWarehouseDetailTableRow() {
                return ((WarehouseDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WarehouseDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WarehouseDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WarehouseDetailTableRowChanged != null)) {
                    this.WarehouseDetailTableRowChanged(this, new WarehouseDetailTableRowChangeEvent(((WarehouseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WarehouseDetailTableRowChanging != null)) {
                    this.WarehouseDetailTableRowChanging(this, new WarehouseDetailTableRowChangeEvent(((WarehouseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WarehouseDetailTableRowDeleted != null)) {
                    this.WarehouseDetailTableRowDeleted(this, new WarehouseDetailTableRowChangeEvent(((WarehouseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WarehouseDetailTableRowDeleting != null)) {
                    this.WarehouseDetailTableRowDeleting(this, new WarehouseDetailTableRowChangeEvent(((WarehouseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWarehouseDetailTableRow(WarehouseDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseDetailTableRow : DataRow {
            
            private WarehouseDetailTableDataTable tableWarehouseDetailTable;
            
            internal WarehouseDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWarehouseDetailTable = ((WarehouseDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableWarehouseDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    return ((int)(this[this.tableWarehouseDetailTable.CompanyIDColumn]));
                }
                set {
                    this[this.tableWarehouseDetailTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    return ((int)(this[this.tableWarehouseDetailTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableWarehouseDetailTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWarehouseDetailTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWarehouseDetailTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.EmailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableWarehouseDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableWarehouseDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.MnemonicColumn] = value;
                }
            }
            
            public string Exception {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.ExceptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.ExceptionColumn] = value;
                }
            }
            
            public bool IsArgixUse {
                get {
                    try {
                        return ((bool)(this[this.tableWarehouseDetailTable.IsArgixUseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.IsArgixUseColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableWarehouseDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableWarehouseDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableWarehouseDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableWarehouseDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableWarehouseDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableWarehouseDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableWarehouseDetailTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableWarehouseDetailTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableWarehouseDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableWarehouseDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableWarehouseDetailTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableWarehouseDetailTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableWarehouseDetailTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableWarehouseDetailTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableWarehouseDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableWarehouseDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableWarehouseDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableWarehouseDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableWarehouseDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableWarehouseDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableWarehouseDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableWarehouseDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableWarehouseDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableWarehouseDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableWarehouseDetailTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableWarehouseDetailTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableWarehouseDetailTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableWarehouseDetailTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableWarehouseDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableWarehouseDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionNull() {
                return this.IsNull(this.tableWarehouseDetailTable.ExceptionColumn);
            }
            
            public void SetExceptionNull() {
                this[this.tableWarehouseDetailTable.ExceptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsArgixUseNull() {
                return this.IsNull(this.tableWarehouseDetailTable.IsArgixUseColumn);
            }
            
            public void SetIsArgixUseNull() {
                this[this.tableWarehouseDetailTable.IsArgixUseColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableWarehouseDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableWarehouseDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseDetailTableRowChangeEvent : EventArgs {
            
            private WarehouseDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public WarehouseDetailTableRowChangeEvent(WarehouseDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WarehouseDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEMail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnStateProvinceName;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnException;
            
            private DataColumn columnIsArgixUse;
            
            internal WarehouseViewTableDataTable() : 
                    base("WarehouseViewTable") {
                this.InitClass();
            }
            
            internal WarehouseViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EMailColumn {
                get {
                    return this.columnEMail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn StateProvinceNameColumn {
                get {
                    return this.columnStateProvinceName;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn ExceptionColumn {
                get {
                    return this.columnException;
                }
            }
            
            internal DataColumn IsArgixUseColumn {
                get {
                    return this.columnIsArgixUse;
                }
            }
            
            public WarehouseViewTableRow this[int index] {
                get {
                    return ((WarehouseViewTableRow)(this.Rows[index]));
                }
            }
            
            public event WarehouseViewTableRowChangeEventHandler WarehouseViewTableRowChanged;
            
            public event WarehouseViewTableRowChangeEventHandler WarehouseViewTableRowChanging;
            
            public event WarehouseViewTableRowChangeEventHandler WarehouseViewTableRowDeleted;
            
            public event WarehouseViewTableRowChangeEventHandler WarehouseViewTableRowDeleting;
            
            public void AddWarehouseViewTableRow(WarehouseViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public WarehouseViewTableRow AddWarehouseViewTableRow(
                        int LocationID, 
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string EMail, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion, 
                        int AddressID, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string StateProvinceName, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        string Exception, 
                        bool IsArgixUse) {
                WarehouseViewTableRow rowWarehouseViewTableRow = ((WarehouseViewTableRow)(this.NewRow()));
                rowWarehouseViewTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        EMail,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        AddressID,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        StateProvinceName,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        Exception,
                        IsArgixUse};
                this.Rows.Add(rowWarehouseViewTableRow);
                return rowWarehouseViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WarehouseViewTableDataTable cln = ((WarehouseViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WarehouseViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEMail = this.Columns["EMail"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnStateProvinceName = this.Columns["StateProvinceName"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnException = this.Columns["Exception"];
                this.columnIsArgixUse = this.Columns["IsArgixUse"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEMail = new DataColumn("EMail", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEMail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnStateProvinceName = new DataColumn("StateProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateProvinceName);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnException = new DataColumn("Exception", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnException);
                this.columnIsArgixUse = new DataColumn("IsArgixUse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsArgixUse);
                this.columnLocationID.AllowDBNull = false;
                this.columnCompanyID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnContactName.AllowDBNull = false;
                this.columnPhone.AllowDBNull = false;
                this.columnExtension.AllowDBNull = false;
                this.columnFax.AllowDBNull = false;
                this.columnEMail.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public WarehouseViewTableRow NewWarehouseViewTableRow() {
                return ((WarehouseViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WarehouseViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WarehouseViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WarehouseViewTableRowChanged != null)) {
                    this.WarehouseViewTableRowChanged(this, new WarehouseViewTableRowChangeEvent(((WarehouseViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WarehouseViewTableRowChanging != null)) {
                    this.WarehouseViewTableRowChanging(this, new WarehouseViewTableRowChangeEvent(((WarehouseViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WarehouseViewTableRowDeleted != null)) {
                    this.WarehouseViewTableRowDeleted(this, new WarehouseViewTableRowChangeEvent(((WarehouseViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WarehouseViewTableRowDeleting != null)) {
                    this.WarehouseViewTableRowDeleting(this, new WarehouseViewTableRowChangeEvent(((WarehouseViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWarehouseViewTableRow(WarehouseViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseViewTableRow : DataRow {
            
            private WarehouseViewTableDataTable tableWarehouseViewTable;
            
            internal WarehouseViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWarehouseViewTable = ((WarehouseViewTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    return ((int)(this[this.tableWarehouseViewTable.LocationIDColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    return ((int)(this[this.tableWarehouseViewTable.CompanyIDColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.NumberColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    return ((int)(this[this.tableWarehouseViewTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.DescriptionColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWarehouseViewTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWarehouseViewTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.ContactNameColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.PhoneColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.ExtensionColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.FaxColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.FaxColumn] = value;
                }
            }
            
            public string EMail {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.EMailColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.EMailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableWarehouseViewTable.IsActiveColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableWarehouseViewTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableWarehouseViewTable.UserIDColumn]));
                }
                set {
                    this[this.tableWarehouseViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.RowVersionColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableWarehouseViewTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string StateProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.StateProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.StateProvinceNameColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableWarehouseViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.CountryColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.MnemonicColumn] = value;
                }
            }
            
            public string Exception {
                get {
                    try {
                        return ((string)(this[this.tableWarehouseViewTable.ExceptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.ExceptionColumn] = value;
                }
            }
            
            public bool IsArgixUse {
                get {
                    try {
                        return ((bool)(this[this.tableWarehouseViewTable.IsArgixUseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWarehouseViewTable.IsArgixUseColumn] = value;
                }
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableWarehouseViewTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableWarehouseViewTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableWarehouseViewTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableWarehouseViewTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableWarehouseViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableWarehouseViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableWarehouseViewTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableWarehouseViewTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableWarehouseViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableWarehouseViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableWarehouseViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableWarehouseViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableWarehouseViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableWarehouseViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableWarehouseViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableWarehouseViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateProvinceNameNull() {
                return this.IsNull(this.tableWarehouseViewTable.StateProvinceNameColumn);
            }
            
            public void SetStateProvinceNameNull() {
                this[this.tableWarehouseViewTable.StateProvinceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableWarehouseViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableWarehouseViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableWarehouseViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableWarehouseViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableWarehouseViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableWarehouseViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableWarehouseViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableWarehouseViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableWarehouseViewTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableWarehouseViewTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableWarehouseViewTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableWarehouseViewTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableWarehouseViewTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableWarehouseViewTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionNull() {
                return this.IsNull(this.tableWarehouseViewTable.ExceptionColumn);
            }
            
            public void SetExceptionNull() {
                this[this.tableWarehouseViewTable.ExceptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsArgixUseNull() {
                return this.IsNull(this.tableWarehouseViewTable.IsArgixUseColumn);
            }
            
            public void SetIsArgixUseNull() {
                this[this.tableWarehouseViewTable.IsArgixUseColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WarehouseViewTableRowChangeEvent : EventArgs {
            
            private WarehouseViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public WarehouseViewTableRowChangeEvent(WarehouseViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WarehouseViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressType;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AddressDetailTableDataTable() : 
                    base("AddressDetailTable") {
                this.InitClass();
            }
            
            internal AddressDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressTypeColumn {
                get {
                    return this.columnAddressType;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AddressDetailTableRow this[int index] {
                get {
                    return ((AddressDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanged;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanging;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleted;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleting;
            
            public void AddAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public AddressDetailTableRow AddAddressDetailTableRow(int LocationID, int AddressID, string AddressType, string AddressLine1, string AddressLine2, string City, string StateOrProvince, string PostalCode, string Region, int CountryID, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                AddressDetailTableRow rowAddressDetailTableRow = ((AddressDetailTableRow)(this.NewRow()));
                rowAddressDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        AddressID,
                        AddressType,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAddressDetailTableRow);
                return rowAddressDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDetailTableDataTable cln = ((AddressDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressType = this.Columns["AddressType"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressType = new DataColumn("AddressType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressType);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressType.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public AddressDetailTableRow NewAddressDetailTableRow() {
                return ((AddressDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressDetailTableRowChanged != null)) {
                    this.AddressDetailTableRowChanged(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressDetailTableRowChanging != null)) {
                    this.AddressDetailTableRowChanging(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressDetailTableRowDeleted != null)) {
                    this.AddressDetailTableRowDeleted(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressDetailTableRowDeleting != null)) {
                    this.AddressDetailTableRowDeleting(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRow : DataRow {
            
            private AddressDetailTableDataTable tableAddressDetailTable;
            
            internal AddressDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressType {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressTypeColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressTypeColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableAddressDetailTable.CityColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.CountryIDColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableAddressDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableAddressDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableAddressDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableAddressDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableAddressDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableAddressDetailTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableAddressDetailTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAddressDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAddressDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAddressDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAddressDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddressDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAddressDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAddressDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAddressDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAddressDetailTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAddressDetailTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAddressDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAddressDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRowChangeEvent : EventArgs {
            
            private AddressDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressDetailTableRowChangeEvent(AddressDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
