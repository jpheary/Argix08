//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TerminalDS : DataSet {
        
        private TerminalDetailTableDataTable tableTerminalDetailTable;
        
        private TerminalViewTableDataTable tableTerminalViewTable;
        
        private TerminalListTableDataTable tableTerminalListTable;
        
        private LocalTerminalTableDataTable tableLocalTerminalTable;
        
        private AddressDetailTableDataTable tableAddressDetailTable;
        
        public TerminalDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TerminalDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TerminalDetailTable"] != null)) {
                    this.Tables.Add(new TerminalDetailTableDataTable(ds.Tables["TerminalDetailTable"]));
                }
                if ((ds.Tables["TerminalViewTable"] != null)) {
                    this.Tables.Add(new TerminalViewTableDataTable(ds.Tables["TerminalViewTable"]));
                }
                if ((ds.Tables["TerminalListTable"] != null)) {
                    this.Tables.Add(new TerminalListTableDataTable(ds.Tables["TerminalListTable"]));
                }
                if ((ds.Tables["LocalTerminalTable"] != null)) {
                    this.Tables.Add(new LocalTerminalTableDataTable(ds.Tables["LocalTerminalTable"]));
                }
                if ((ds.Tables["AddressDetailTable"] != null)) {
                    this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalDetailTableDataTable TerminalDetailTable {
            get {
                return this.tableTerminalDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalViewTableDataTable TerminalViewTable {
            get {
                return this.tableTerminalViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalListTableDataTable TerminalListTable {
            get {
                return this.tableTerminalListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalTerminalTableDataTable LocalTerminalTable {
            get {
                return this.tableLocalTerminalTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDetailTableDataTable AddressDetailTable {
            get {
                return this.tableAddressDetailTable;
            }
        }
        
        public override DataSet Clone() {
            TerminalDS cln = ((TerminalDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TerminalDetailTable"] != null)) {
                this.Tables.Add(new TerminalDetailTableDataTable(ds.Tables["TerminalDetailTable"]));
            }
            if ((ds.Tables["TerminalViewTable"] != null)) {
                this.Tables.Add(new TerminalViewTableDataTable(ds.Tables["TerminalViewTable"]));
            }
            if ((ds.Tables["TerminalListTable"] != null)) {
                this.Tables.Add(new TerminalListTableDataTable(ds.Tables["TerminalListTable"]));
            }
            if ((ds.Tables["LocalTerminalTable"] != null)) {
                this.Tables.Add(new LocalTerminalTableDataTable(ds.Tables["LocalTerminalTable"]));
            }
            if ((ds.Tables["AddressDetailTable"] != null)) {
                this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTerminalDetailTable = ((TerminalDetailTableDataTable)(this.Tables["TerminalDetailTable"]));
            if ((this.tableTerminalDetailTable != null)) {
                this.tableTerminalDetailTable.InitVars();
            }
            this.tableTerminalViewTable = ((TerminalViewTableDataTable)(this.Tables["TerminalViewTable"]));
            if ((this.tableTerminalViewTable != null)) {
                this.tableTerminalViewTable.InitVars();
            }
            this.tableTerminalListTable = ((TerminalListTableDataTable)(this.Tables["TerminalListTable"]));
            if ((this.tableTerminalListTable != null)) {
                this.tableTerminalListTable.InitVars();
            }
            this.tableLocalTerminalTable = ((LocalTerminalTableDataTable)(this.Tables["LocalTerminalTable"]));
            if ((this.tableLocalTerminalTable != null)) {
                this.tableLocalTerminalTable.InitVars();
            }
            this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Tables["AddressDetailTable"]));
            if ((this.tableAddressDetailTable != null)) {
                this.tableAddressDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "TerminalDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/TerminalDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTerminalDetailTable = new TerminalDetailTableDataTable();
            this.Tables.Add(this.tableTerminalDetailTable);
            this.tableTerminalViewTable = new TerminalViewTableDataTable();
            this.Tables.Add(this.tableTerminalViewTable);
            this.tableTerminalListTable = new TerminalListTableDataTable();
            this.Tables.Add(this.tableTerminalListTable);
            this.tableLocalTerminalTable = new LocalTerminalTableDataTable();
            this.Tables.Add(this.tableLocalTerminalTable);
            this.tableAddressDetailTable = new AddressDetailTableDataTable();
            this.Tables.Add(this.tableAddressDetailTable);
        }
        
        private bool ShouldSerializeTerminalDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeTerminalViewTable() {
            return false;
        }
        
        private bool ShouldSerializeTerminalListTable() {
            return false;
        }
        
        private bool ShouldSerializeLocalTerminalTable() {
            return false;
        }
        
        private bool ShouldSerializeAddressDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TerminalDetailTableRowChangeEventHandler(object sender, TerminalDetailTableRowChangeEvent e);
        
        public delegate void TerminalViewTableRowChangeEventHandler(object sender, TerminalViewTableRowChangeEvent e);
        
        public delegate void TerminalListTableRowChangeEventHandler(object sender, TerminalListTableRowChangeEvent e);
        
        public delegate void LocalTerminalTableRowChangeEventHandler(object sender, LocalTerminalTableRowChangeEvent e);
        
        public delegate void AddressDetailTableRowChangeEventHandler(object sender, AddressDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnException;
            
            private DataColumn columnIsArgixUse;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal TerminalDetailTableDataTable() : 
                    base("TerminalDetailTable") {
                this.InitClass();
            }
            
            internal TerminalDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn ExceptionColumn {
                get {
                    return this.columnException;
                }
            }
            
            internal DataColumn IsArgixUseColumn {
                get {
                    return this.columnIsArgixUse;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public TerminalDetailTableRow this[int index] {
                get {
                    return ((TerminalDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowChanged;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowChanging;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowDeleted;
            
            public event TerminalDetailTableRowChangeEventHandler TerminalDetailTableRowDeleting;
            
            public void AddTerminalDetailTableRow(TerminalDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public TerminalDetailTableRow AddTerminalDetailTableRow(
                        int LocationID, 
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        bool IsActive, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        string Exception, 
                        bool IsArgixUse, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                TerminalDetailTableRow rowTerminalDetailTableRow = ((TerminalDetailTableRow)(this.NewRow()));
                rowTerminalDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        IsActive,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        Exception,
                        IsArgixUse,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowTerminalDetailTableRow);
                return rowTerminalDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerminalDetailTableDataTable cln = ((TerminalDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerminalDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnException = this.Columns["Exception"];
                this.columnIsArgixUse = this.Columns["IsArgixUse"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnException = new DataColumn("Exception", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnException);
                this.columnIsArgixUse = new DataColumn("IsArgixUse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsArgixUse);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCompanyID.AllowDBNull = false;
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public TerminalDetailTableRow NewTerminalDetailTableRow() {
                return ((TerminalDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerminalDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerminalDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalDetailTableRowChanged != null)) {
                    this.TerminalDetailTableRowChanged(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalDetailTableRowChanging != null)) {
                    this.TerminalDetailTableRowChanging(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalDetailTableRowDeleted != null)) {
                    this.TerminalDetailTableRowDeleted(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalDetailTableRowDeleting != null)) {
                    this.TerminalDetailTableRowDeleting(this, new TerminalDetailTableRowChangeEvent(((TerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerminalDetailTableRow(TerminalDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableRow : DataRow {
            
            private TerminalDetailTableDataTable tableTerminalDetailTable;
            
            internal TerminalDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalDetailTable = ((TerminalDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    return ((int)(this[this.tableTerminalDetailTable.CompanyIDColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    return ((int)(this[this.tableTerminalDetailTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTerminalDetailTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTerminalDetailTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.EmailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableTerminalDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.MnemonicColumn] = value;
                }
            }
            
            public string Exception {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.ExceptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.ExceptionColumn] = value;
                }
            }
            
            public bool IsArgixUse {
                get {
                    try {
                        return ((bool)(this[this.tableTerminalDetailTable.IsArgixUseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.IsArgixUseColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableTerminalDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableTerminalDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableTerminalDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableTerminalDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableTerminalDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableTerminalDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableTerminalDetailTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableTerminalDetailTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTerminalDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableTerminalDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableTerminalDetailTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableTerminalDetailTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableTerminalDetailTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableTerminalDetailTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableTerminalDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableTerminalDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableTerminalDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableTerminalDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableTerminalDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableTerminalDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableTerminalDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableTerminalDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableTerminalDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableTerminalDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableTerminalDetailTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableTerminalDetailTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableTerminalDetailTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableTerminalDetailTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableTerminalDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableTerminalDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionNull() {
                return this.IsNull(this.tableTerminalDetailTable.ExceptionColumn);
            }
            
            public void SetExceptionNull() {
                this[this.tableTerminalDetailTable.ExceptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsArgixUseNull() {
                return this.IsNull(this.tableTerminalDetailTable.IsArgixUseColumn);
            }
            
            public void SetIsArgixUseNull() {
                this[this.tableTerminalDetailTable.IsArgixUseColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableTerminalDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableTerminalDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalDetailTableRowChangeEvent : EventArgs {
            
            private TerminalDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerminalDetailTableRowChangeEvent(TerminalDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerminalDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEMail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnStateProvinceName;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnException;
            
            private DataColumn columnIsArgixUse;
            
            internal TerminalViewTableDataTable() : 
                    base("TerminalViewTable") {
                this.InitClass();
            }
            
            internal TerminalViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EMailColumn {
                get {
                    return this.columnEMail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn StateProvinceNameColumn {
                get {
                    return this.columnStateProvinceName;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn ExceptionColumn {
                get {
                    return this.columnException;
                }
            }
            
            internal DataColumn IsArgixUseColumn {
                get {
                    return this.columnIsArgixUse;
                }
            }
            
            public TerminalViewTableRow this[int index] {
                get {
                    return ((TerminalViewTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalViewTableRowChangeEventHandler TerminalViewTableRowChanged;
            
            public event TerminalViewTableRowChangeEventHandler TerminalViewTableRowChanging;
            
            public event TerminalViewTableRowChangeEventHandler TerminalViewTableRowDeleted;
            
            public event TerminalViewTableRowChangeEventHandler TerminalViewTableRowDeleting;
            
            public void AddTerminalViewTableRow(TerminalViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public TerminalViewTableRow AddTerminalViewTableRow(
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string EMail, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string StateProvinceName, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        string Exception, 
                        bool IsArgixUse) {
                TerminalViewTableRow rowTerminalViewTableRow = ((TerminalViewTableRow)(this.NewRow()));
                rowTerminalViewTableRow.ItemArray = new object[] {
                        null,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        EMail,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        null,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        StateProvinceName,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        Exception,
                        IsArgixUse};
                this.Rows.Add(rowTerminalViewTableRow);
                return rowTerminalViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerminalViewTableDataTable cln = ((TerminalViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerminalViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEMail = this.Columns["EMail"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnStateProvinceName = this.Columns["StateProvinceName"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnException = this.Columns["Exception"];
                this.columnIsArgixUse = this.Columns["IsArgixUse"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEMail = new DataColumn("EMail", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEMail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnStateProvinceName = new DataColumn("StateProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateProvinceName);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnException = new DataColumn("Exception", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnException);
                this.columnIsArgixUse = new DataColumn("IsArgixUse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsArgixUse);
                this.columnLocationID.AutoIncrement = true;
                this.columnLocationID.AllowDBNull = false;
                this.columnLocationID.ReadOnly = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnContactName.AllowDBNull = false;
                this.columnPhone.AllowDBNull = false;
                this.columnExtension.AllowDBNull = false;
                this.columnFax.AllowDBNull = false;
                this.columnEMail.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnAddressID.AutoIncrement = true;
                this.columnAddressID.ReadOnly = true;
            }
            
            public TerminalViewTableRow NewTerminalViewTableRow() {
                return ((TerminalViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerminalViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerminalViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalViewTableRowChanged != null)) {
                    this.TerminalViewTableRowChanged(this, new TerminalViewTableRowChangeEvent(((TerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalViewTableRowChanging != null)) {
                    this.TerminalViewTableRowChanging(this, new TerminalViewTableRowChangeEvent(((TerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalViewTableRowDeleted != null)) {
                    this.TerminalViewTableRowDeleted(this, new TerminalViewTableRowChangeEvent(((TerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalViewTableRowDeleting != null)) {
                    this.TerminalViewTableRowDeleting(this, new TerminalViewTableRowChangeEvent(((TerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerminalViewTableRow(TerminalViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalViewTableRow : DataRow {
            
            private TerminalViewTableDataTable tableTerminalViewTable;
            
            internal TerminalViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalViewTable = ((TerminalViewTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    return ((int)(this[this.tableTerminalViewTable.LocationIDColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    return ((int)(this[this.tableTerminalViewTable.CompanyIDColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableTerminalViewTable.NumberColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    return ((int)(this[this.tableTerminalViewTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableTerminalViewTable.DescriptionColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTerminalViewTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTerminalViewTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    return ((string)(this[this.tableTerminalViewTable.ContactNameColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    return ((string)(this[this.tableTerminalViewTable.PhoneColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    return ((string)(this[this.tableTerminalViewTable.ExtensionColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    return ((string)(this[this.tableTerminalViewTable.FaxColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.FaxColumn] = value;
                }
            }
            
            public string EMail {
                get {
                    return ((string)(this[this.tableTerminalViewTable.EMailColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.EMailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableTerminalViewTable.IsActiveColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableTerminalViewTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableTerminalViewTable.UserIDColumn]));
                }
                set {
                    this[this.tableTerminalViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.RowVersionColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalViewTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string StateProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.StateProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.StateProvinceNameColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.CountryColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.MnemonicColumn] = value;
                }
            }
            
            public string Exception {
                get {
                    try {
                        return ((string)(this[this.tableTerminalViewTable.ExceptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.ExceptionColumn] = value;
                }
            }
            
            public bool IsArgixUse {
                get {
                    try {
                        return ((bool)(this[this.tableTerminalViewTable.IsArgixUseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalViewTable.IsArgixUseColumn] = value;
                }
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableTerminalViewTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableTerminalViewTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableTerminalViewTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableTerminalViewTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableTerminalViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableTerminalViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableTerminalViewTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableTerminalViewTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableTerminalViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableTerminalViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableTerminalViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableTerminalViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableTerminalViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableTerminalViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableTerminalViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableTerminalViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateProvinceNameNull() {
                return this.IsNull(this.tableTerminalViewTable.StateProvinceNameColumn);
            }
            
            public void SetStateProvinceNameNull() {
                this[this.tableTerminalViewTable.StateProvinceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableTerminalViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableTerminalViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableTerminalViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableTerminalViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableTerminalViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableTerminalViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableTerminalViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableTerminalViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableTerminalViewTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableTerminalViewTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableTerminalViewTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableTerminalViewTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableTerminalViewTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableTerminalViewTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionNull() {
                return this.IsNull(this.tableTerminalViewTable.ExceptionColumn);
            }
            
            public void SetExceptionNull() {
                this[this.tableTerminalViewTable.ExceptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsArgixUseNull() {
                return this.IsNull(this.tableTerminalViewTable.IsArgixUseColumn);
            }
            
            public void SetIsArgixUseNull() {
                this[this.tableTerminalViewTable.IsArgixUseColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalViewTableRowChangeEvent : EventArgs {
            
            private TerminalViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerminalViewTableRowChangeEvent(TerminalViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerminalViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminalName;
            
            internal TerminalListTableDataTable() : 
                    base("TerminalListTable") {
                this.InitClass();
            }
            
            internal TerminalListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            public TerminalListTableRow this[int index] {
                get {
                    return ((TerminalListTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalListTableRowChangeEventHandler TerminalListTableRowChanged;
            
            public event TerminalListTableRowChangeEventHandler TerminalListTableRowChanging;
            
            public event TerminalListTableRowChangeEventHandler TerminalListTableRowDeleted;
            
            public event TerminalListTableRowChangeEventHandler TerminalListTableRowDeleting;
            
            public void AddTerminalListTableRow(TerminalListTableRow row) {
                this.Rows.Add(row);
            }
            
            public TerminalListTableRow AddTerminalListTableRow(int TerminalID, string TerminalName) {
                TerminalListTableRow rowTerminalListTableRow = ((TerminalListTableRow)(this.NewRow()));
                rowTerminalListTableRow.ItemArray = new object[] {
                        TerminalID,
                        TerminalName};
                this.Rows.Add(rowTerminalListTableRow);
                return rowTerminalListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TerminalListTableDataTable cln = ((TerminalListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TerminalListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminalName = this.Columns["TerminalName"];
            }
            
            private void InitClass() {
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminalName = new DataColumn("TerminalName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalName);
            }
            
            public TerminalListTableRow NewTerminalListTableRow() {
                return ((TerminalListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TerminalListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TerminalListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalListTableRowChanged != null)) {
                    this.TerminalListTableRowChanged(this, new TerminalListTableRowChangeEvent(((TerminalListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalListTableRowChanging != null)) {
                    this.TerminalListTableRowChanging(this, new TerminalListTableRowChangeEvent(((TerminalListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalListTableRowDeleted != null)) {
                    this.TerminalListTableRowDeleted(this, new TerminalListTableRowChangeEvent(((TerminalListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalListTableRowDeleting != null)) {
                    this.TerminalListTableRowDeleting(this, new TerminalListTableRowChangeEvent(((TerminalListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTerminalListTableRow(TerminalListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalListTableRow : DataRow {
            
            private TerminalListTableDataTable tableTerminalListTable;
            
            internal TerminalListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalListTable = ((TerminalListTableDataTable)(this.Table));
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableTerminalListTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalListTable.TerminalIDColumn] = value;
                }
            }
            
            public string TerminalName {
                get {
                    try {
                        return ((string)(this[this.tableTerminalListTable.TerminalNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalListTable.TerminalNameColumn] = value;
                }
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableTerminalListTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableTerminalListTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNameNull() {
                return this.IsNull(this.tableTerminalListTable.TerminalNameColumn);
            }
            
            public void SetTerminalNameNull() {
                this[this.tableTerminalListTable.TerminalNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TerminalListTableRowChangeEvent : EventArgs {
            
            private TerminalListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TerminalListTableRowChangeEvent(TerminalListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TerminalListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnDBServerName;
            
            private DataColumn columnLinkedServerName;
            
            private DataColumn columnDBType;
            
            private DataColumn columnAgentID;
            
            private DataColumn columnAgentNumber;
            
            private DataColumn columnShipperID;
            
            private DataColumn columnIsActive;
            
            internal LocalTerminalTableDataTable() : 
                    base("LocalTerminalTable") {
                this.InitClass();
            }
            
            internal LocalTerminalTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn DBServerNameColumn {
                get {
                    return this.columnDBServerName;
                }
            }
            
            internal DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            internal DataColumn DBTypeColumn {
                get {
                    return this.columnDBType;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            internal DataColumn ShipperIDColumn {
                get {
                    return this.columnShipperID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            public LocalTerminalTableRow this[int index] {
                get {
                    return ((LocalTerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowChanged;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowChanging;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowDeleted;
            
            public event LocalTerminalTableRowChangeEventHandler LocalTerminalTableRowDeleting;
            
            public void AddLocalTerminalTableRow(LocalTerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            public LocalTerminalTableRow AddLocalTerminalTableRow(int TerminalID, string Number, string Description, string DBServerName, string LinkedServerName, string DBType, int AgentID, string AgentNumber, string ShipperID, System.Byte IsActive) {
                LocalTerminalTableRow rowLocalTerminalTableRow = ((LocalTerminalTableRow)(this.NewRow()));
                rowLocalTerminalTableRow.ItemArray = new object[] {
                        TerminalID,
                        Number,
                        Description,
                        DBServerName,
                        LinkedServerName,
                        DBType,
                        AgentID,
                        AgentNumber,
                        ShipperID,
                        IsActive};
                this.Rows.Add(rowLocalTerminalTableRow);
                return rowLocalTerminalTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LocalTerminalTableDataTable cln = ((LocalTerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LocalTerminalTableDataTable();
            }
            
            internal void InitVars() {
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnDBServerName = this.Columns["DBServerName"];
                this.columnLinkedServerName = this.Columns["LinkedServerName"];
                this.columnDBType = this.Columns["DBType"];
                this.columnAgentID = this.Columns["AgentID"];
                this.columnAgentNumber = this.Columns["AgentNumber"];
                this.columnShipperID = this.Columns["ShipperID"];
                this.columnIsActive = this.Columns["IsActive"];
            }
            
            private void InitClass() {
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnDBServerName = new DataColumn("DBServerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDBServerName);
                this.columnLinkedServerName = new DataColumn("LinkedServerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinkedServerName);
                this.columnDBType = new DataColumn("DBType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDBType);
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnAgentNumber = new DataColumn("AgentNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentNumber);
                this.columnShipperID = new DataColumn("ShipperID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipperID);
                this.columnIsActive = new DataColumn("IsActive", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnTerminalID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnDBServerName.AllowDBNull = false;
                this.columnLinkedServerName.AllowDBNull = false;
                this.columnDBType.AllowDBNull = false;
                this.columnAgentID.AllowDBNull = false;
                this.columnAgentNumber.AllowDBNull = false;
                this.columnShipperID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
            }
            
            public LocalTerminalTableRow NewLocalTerminalTableRow() {
                return ((LocalTerminalTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LocalTerminalTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LocalTerminalTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LocalTerminalTableRowChanged != null)) {
                    this.LocalTerminalTableRowChanged(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LocalTerminalTableRowChanging != null)) {
                    this.LocalTerminalTableRowChanging(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LocalTerminalTableRowDeleted != null)) {
                    this.LocalTerminalTableRowDeleted(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LocalTerminalTableRowDeleting != null)) {
                    this.LocalTerminalTableRowDeleting(this, new LocalTerminalTableRowChangeEvent(((LocalTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLocalTerminalTableRow(LocalTerminalTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableRow : DataRow {
            
            private LocalTerminalTableDataTable tableLocalTerminalTable;
            
            internal LocalTerminalTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocalTerminalTable = ((LocalTerminalTableDataTable)(this.Table));
            }
            
            public int TerminalID {
                get {
                    return ((int)(this[this.tableLocalTerminalTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.TerminalIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.NumberColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DescriptionColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DescriptionColumn] = value;
                }
            }
            
            public string DBServerName {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DBServerNameColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DBServerNameColumn] = value;
                }
            }
            
            public string LinkedServerName {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.LinkedServerNameColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.LinkedServerNameColumn] = value;
                }
            }
            
            public string DBType {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.DBTypeColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.DBTypeColumn] = value;
                }
            }
            
            public int AgentID {
                get {
                    return ((int)(this[this.tableLocalTerminalTable.AgentIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.AgentIDColumn] = value;
                }
            }
            
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.AgentNumberColumn] = value;
                }
            }
            
            public string ShipperID {
                get {
                    return ((string)(this[this.tableLocalTerminalTable.ShipperIDColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.ShipperIDColumn] = value;
                }
            }
            
            public System.Byte IsActive {
                get {
                    return ((System.Byte)(this[this.tableLocalTerminalTable.IsActiveColumn]));
                }
                set {
                    this[this.tableLocalTerminalTable.IsActiveColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LocalTerminalTableRowChangeEvent : EventArgs {
            
            private LocalTerminalTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public LocalTerminalTableRowChangeEvent(LocalTerminalTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LocalTerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressType;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AddressDetailTableDataTable() : 
                    base("AddressDetailTable") {
                this.InitClass();
            }
            
            internal AddressDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressTypeColumn {
                get {
                    return this.columnAddressType;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AddressDetailTableRow this[int index] {
                get {
                    return ((AddressDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanged;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanging;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleted;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleting;
            
            public void AddAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public AddressDetailTableRow AddAddressDetailTableRow(int LocationID, int AddressID, string AddressType, string AddressLine1, string AddressLine2, string City, string StateOrProvince, string PostalCode, string Region, int CountryID, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                AddressDetailTableRow rowAddressDetailTableRow = ((AddressDetailTableRow)(this.NewRow()));
                rowAddressDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        AddressID,
                        AddressType,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAddressDetailTableRow);
                return rowAddressDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDetailTableDataTable cln = ((AddressDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressType = this.Columns["AddressType"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressType = new DataColumn("AddressType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressType);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressType.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public AddressDetailTableRow NewAddressDetailTableRow() {
                return ((AddressDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressDetailTableRowChanged != null)) {
                    this.AddressDetailTableRowChanged(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressDetailTableRowChanging != null)) {
                    this.AddressDetailTableRowChanging(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressDetailTableRowDeleted != null)) {
                    this.AddressDetailTableRowDeleted(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressDetailTableRowDeleting != null)) {
                    this.AddressDetailTableRowDeleting(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRow : DataRow {
            
            private AddressDetailTableDataTable tableAddressDetailTable;
            
            internal AddressDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressType {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressTypeColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressTypeColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableAddressDetailTable.CityColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.CountryIDColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableAddressDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableAddressDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableAddressDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableAddressDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableAddressDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableAddressDetailTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableAddressDetailTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAddressDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAddressDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAddressDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAddressDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddressDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAddressDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAddressDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAddressDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAddressDetailTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAddressDetailTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAddressDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAddressDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRowChangeEvent : EventArgs {
            
            private AddressDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressDetailTableRowChangeEvent(AddressDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
