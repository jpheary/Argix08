//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class VendorDS : DataSet {
        
        private VendorDetailTableDataTable tableVendorDetailTable;
        
        private VendorViewTableDataTable tableVendorViewTable;
        
        private VendorListTableDataTable tableVendorListTable;
        
        private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
        
        public VendorDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected VendorDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["VendorDetailTable"] != null)) {
                    this.Tables.Add(new VendorDetailTableDataTable(ds.Tables["VendorDetailTable"]));
                }
                if ((ds.Tables["VendorViewTable"] != null)) {
                    this.Tables.Add(new VendorViewTableDataTable(ds.Tables["VendorViewTable"]));
                }
                if ((ds.Tables["VendorListTable"] != null)) {
                    this.Tables.Add(new VendorListTableDataTable(ds.Tables["VendorListTable"]));
                }
                if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                    this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorDetailTableDataTable VendorDetailTable {
            get {
                return this.tableVendorDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorViewTableDataTable VendorViewTable {
            get {
                return this.tableVendorViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorListTableDataTable VendorListTable {
            get {
                return this.tableVendorListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyPaymentServiceTableDataTable CompanyPaymentServiceTable {
            get {
                return this.tableCompanyPaymentServiceTable;
            }
        }
        
        public override DataSet Clone() {
            VendorDS cln = ((VendorDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["VendorDetailTable"] != null)) {
                this.Tables.Add(new VendorDetailTableDataTable(ds.Tables["VendorDetailTable"]));
            }
            if ((ds.Tables["VendorViewTable"] != null)) {
                this.Tables.Add(new VendorViewTableDataTable(ds.Tables["VendorViewTable"]));
            }
            if ((ds.Tables["VendorListTable"] != null)) {
                this.Tables.Add(new VendorListTableDataTable(ds.Tables["VendorListTable"]));
            }
            if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVendorDetailTable = ((VendorDetailTableDataTable)(this.Tables["VendorDetailTable"]));
            if ((this.tableVendorDetailTable != null)) {
                this.tableVendorDetailTable.InitVars();
            }
            this.tableVendorViewTable = ((VendorViewTableDataTable)(this.Tables["VendorViewTable"]));
            if ((this.tableVendorViewTable != null)) {
                this.tableVendorViewTable.InitVars();
            }
            this.tableVendorListTable = ((VendorListTableDataTable)(this.Tables["VendorListTable"]));
            if ((this.tableVendorListTable != null)) {
                this.tableVendorListTable.InitVars();
            }
            this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Tables["CompanyPaymentServiceTable"]));
            if ((this.tableCompanyPaymentServiceTable != null)) {
                this.tableCompanyPaymentServiceTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "VendorDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/VendorDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVendorDetailTable = new VendorDetailTableDataTable();
            this.Tables.Add(this.tableVendorDetailTable);
            this.tableVendorViewTable = new VendorViewTableDataTable();
            this.Tables.Add(this.tableVendorViewTable);
            this.tableVendorListTable = new VendorListTableDataTable();
            this.Tables.Add(this.tableVendorListTable);
            this.tableCompanyPaymentServiceTable = new CompanyPaymentServiceTableDataTable();
            this.Tables.Add(this.tableCompanyPaymentServiceTable);
        }
        
        private bool ShouldSerializeVendorDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeVendorViewTable() {
            return false;
        }
        
        private bool ShouldSerializeVendorListTable() {
            return false;
        }
        
        private bool ShouldSerializeCompanyPaymentServiceTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void VendorDetailTableRowChangeEventHandler(object sender, VendorDetailTableRowChangeEvent e);
        
        public delegate void VendorViewTableRowChangeEventHandler(object sender, VendorViewTableRowChangeEvent e);
        
        public delegate void VendorListTableRowChangeEventHandler(object sender, VendorListTableRowChangeEvent e);
        
        public delegate void CompanyPaymentServiceTableRowChangeEventHandler(object sender, CompanyPaymentServiceTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVendorID;
            
            private DataColumn columnVendorName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal VendorDetailTableDataTable() : 
                    base("VendorDetailTable") {
                this.InitClass();
            }
            
            internal VendorDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VendorIDColumn {
                get {
                    return this.columnVendorID;
                }
            }
            
            internal DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public VendorDetailTableRow this[int index] {
                get {
                    return ((VendorDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowChanged;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowChanging;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowDeleted;
            
            public event VendorDetailTableRowChangeEventHandler VendorDetailTableRowDeleting;
            
            public void AddVendorDetailTableRow(VendorDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public VendorDetailTableRow AddVendorDetailTableRow(
                        int VendorID, 
                        string VendorName, 
                        string Number, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                VendorDetailTableRow rowVendorDetailTableRow = ((VendorDetailTableRow)(this.NewRow()));
                rowVendorDetailTableRow.ItemArray = new object[] {
                        VendorID,
                        VendorName,
                        Number,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowVendorDetailTableRow);
                return rowVendorDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VendorDetailTableDataTable cln = ((VendorDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VendorDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnVendorID = this.Columns["VendorID"];
                this.columnVendorName = this.Columns["VendorName"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnVendorID = new DataColumn("VendorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorID);
                this.columnVendorName = new DataColumn("VendorName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnVendorName.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public VendorDetailTableRow NewVendorDetailTableRow() {
                return ((VendorDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VendorDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VendorDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorDetailTableRowChanged != null)) {
                    this.VendorDetailTableRowChanged(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorDetailTableRowChanging != null)) {
                    this.VendorDetailTableRowChanging(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorDetailTableRowDeleted != null)) {
                    this.VendorDetailTableRowDeleted(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorDetailTableRowDeleting != null)) {
                    this.VendorDetailTableRowDeleting(this, new VendorDetailTableRowChangeEvent(((VendorDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVendorDetailTableRow(VendorDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorDetailTableRow : DataRow {
            
            private VendorDetailTableDataTable tableVendorDetailTable;
            
            internal VendorDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendorDetailTable = ((VendorDetailTableDataTable)(this.Table));
            }
            
            public int VendorID {
                get {
                    try {
                        return ((int)(this[this.tableVendorDetailTable.VendorIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.VendorIDColumn] = value;
                }
            }
            
            public string VendorName {
                get {
                    return ((string)(this[this.tableVendorDetailTable.VendorNameColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.VendorNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableVendorDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableVendorDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableVendorDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableVendorDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableVendorDetailTable.CityColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tableVendorDetailTable.CountryIDColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.CountryIDColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableVendorDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableVendorDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableVendorDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableVendorDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsVendorIDNull() {
                return this.IsNull(this.tableVendorDetailTable.VendorIDColumn);
            }
            
            public void SetVendorIDNull() {
                this[this.tableVendorDetailTable.VendorIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableVendorDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableVendorDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableVendorDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableVendorDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableVendorDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableVendorDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableVendorDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableVendorDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableVendorDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableVendorDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableVendorDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableVendorDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableVendorDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableVendorDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableVendorDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableVendorDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableVendorDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableVendorDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableVendorDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableVendorDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorDetailTableRowChangeEvent : EventArgs {
            
            private VendorDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public VendorDetailTableRowChangeEvent(VendorDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VendorDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVendorID;
            
            private DataColumn columnVendorName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal VendorViewTableDataTable() : 
                    base("VendorViewTable") {
                this.InitClass();
            }
            
            internal VendorViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VendorIDColumn {
                get {
                    return this.columnVendorID;
                }
            }
            
            internal DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public VendorViewTableRow this[int index] {
                get {
                    return ((VendorViewTableRow)(this.Rows[index]));
                }
            }
            
            public event VendorViewTableRowChangeEventHandler VendorViewTableRowChanged;
            
            public event VendorViewTableRowChangeEventHandler VendorViewTableRowChanging;
            
            public event VendorViewTableRowChangeEventHandler VendorViewTableRowDeleted;
            
            public event VendorViewTableRowChangeEventHandler VendorViewTableRowDeleting;
            
            public void AddVendorViewTableRow(VendorViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public VendorViewTableRow AddVendorViewTableRow(
                        int VendorID, 
                        string VendorName, 
                        string Number, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                VendorViewTableRow rowVendorViewTableRow = ((VendorViewTableRow)(this.NewRow()));
                rowVendorViewTableRow.ItemArray = new object[] {
                        VendorID,
                        VendorName,
                        Number,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowVendorViewTableRow);
                return rowVendorViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VendorViewTableDataTable cln = ((VendorViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VendorViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnVendorID = this.Columns["VendorID"];
                this.columnVendorName = this.Columns["VendorName"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnVendorID = new DataColumn("VendorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorID);
                this.columnVendorName = new DataColumn("VendorName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public VendorViewTableRow NewVendorViewTableRow() {
                return ((VendorViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VendorViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VendorViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorViewTableRowChanged != null)) {
                    this.VendorViewTableRowChanged(this, new VendorViewTableRowChangeEvent(((VendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorViewTableRowChanging != null)) {
                    this.VendorViewTableRowChanging(this, new VendorViewTableRowChangeEvent(((VendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorViewTableRowDeleted != null)) {
                    this.VendorViewTableRowDeleted(this, new VendorViewTableRowChangeEvent(((VendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorViewTableRowDeleting != null)) {
                    this.VendorViewTableRowDeleting(this, new VendorViewTableRowChangeEvent(((VendorViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVendorViewTableRow(VendorViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorViewTableRow : DataRow {
            
            private VendorViewTableDataTable tableVendorViewTable;
            
            internal VendorViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendorViewTable = ((VendorViewTableDataTable)(this.Table));
            }
            
            public int VendorID {
                get {
                    try {
                        return ((int)(this[this.tableVendorViewTable.VendorIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.VendorIDColumn] = value;
                }
            }
            
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.VendorNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.VendorNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableVendorViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableVendorViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVendorViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableVendorViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsVendorIDNull() {
                return this.IsNull(this.tableVendorViewTable.VendorIDColumn);
            }
            
            public void SetVendorIDNull() {
                this[this.tableVendorViewTable.VendorIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableVendorViewTable.VendorNameColumn);
            }
            
            public void SetVendorNameNull() {
                this[this.tableVendorViewTable.VendorNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableVendorViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableVendorViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableVendorViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableVendorViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableVendorViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableVendorViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableVendorViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableVendorViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableVendorViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableVendorViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableVendorViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableVendorViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableVendorViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableVendorViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableVendorViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableVendorViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableVendorViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableVendorViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableVendorViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableVendorViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableVendorViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableVendorViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableVendorViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableVendorViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableVendorViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableVendorViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableVendorViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableVendorViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableVendorViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableVendorViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableVendorViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableVendorViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableVendorViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableVendorViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableVendorViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableVendorViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorViewTableRowChangeEvent : EventArgs {
            
            private VendorViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public VendorViewTableRowChangeEvent(VendorViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VendorViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVendorID;
            
            private DataColumn columnVendorName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnClientID;
            
            internal VendorListTableDataTable() : 
                    base("VendorListTable") {
                this.InitClass();
            }
            
            internal VendorListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VendorIDColumn {
                get {
                    return this.columnVendorID;
                }
            }
            
            internal DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            public VendorListTableRow this[int index] {
                get {
                    return ((VendorListTableRow)(this.Rows[index]));
                }
            }
            
            public event VendorListTableRowChangeEventHandler VendorListTableRowChanged;
            
            public event VendorListTableRowChangeEventHandler VendorListTableRowChanging;
            
            public event VendorListTableRowChangeEventHandler VendorListTableRowDeleted;
            
            public event VendorListTableRowChangeEventHandler VendorListTableRowDeleting;
            
            public void AddVendorListTableRow(VendorListTableRow row) {
                this.Rows.Add(row);
            }
            
            public VendorListTableRow AddVendorListTableRow(int VendorID, string VendorName, string Number, int ClientID) {
                VendorListTableRow rowVendorListTableRow = ((VendorListTableRow)(this.NewRow()));
                rowVendorListTableRow.ItemArray = new object[] {
                        VendorID,
                        VendorName,
                        Number,
                        ClientID};
                this.Rows.Add(rowVendorListTableRow);
                return rowVendorListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VendorListTableDataTable cln = ((VendorListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VendorListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnVendorID = this.Columns["VendorID"];
                this.columnVendorName = this.Columns["VendorName"];
                this.columnNumber = this.Columns["Number"];
                this.columnClientID = this.Columns["ClientID"];
            }
            
            private void InitClass() {
                this.columnVendorID = new DataColumn("VendorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorID);
                this.columnVendorName = new DataColumn("VendorName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
            }
            
            public VendorListTableRow NewVendorListTableRow() {
                return ((VendorListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VendorListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VendorListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorListTableRowChanged != null)) {
                    this.VendorListTableRowChanged(this, new VendorListTableRowChangeEvent(((VendorListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorListTableRowChanging != null)) {
                    this.VendorListTableRowChanging(this, new VendorListTableRowChangeEvent(((VendorListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorListTableRowDeleted != null)) {
                    this.VendorListTableRowDeleted(this, new VendorListTableRowChangeEvent(((VendorListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorListTableRowDeleting != null)) {
                    this.VendorListTableRowDeleting(this, new VendorListTableRowChangeEvent(((VendorListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVendorListTableRow(VendorListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorListTableRow : DataRow {
            
            private VendorListTableDataTable tableVendorListTable;
            
            internal VendorListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendorListTable = ((VendorListTableDataTable)(this.Table));
            }
            
            public int VendorID {
                get {
                    try {
                        return ((int)(this[this.tableVendorListTable.VendorIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorListTable.VendorIDColumn] = value;
                }
            }
            
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableVendorListTable.VendorNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorListTable.VendorNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableVendorListTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorListTable.NumberColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableVendorListTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendorListTable.ClientIDColumn] = value;
                }
            }
            
            public bool IsVendorIDNull() {
                return this.IsNull(this.tableVendorListTable.VendorIDColumn);
            }
            
            public void SetVendorIDNull() {
                this[this.tableVendorListTable.VendorIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableVendorListTable.VendorNameColumn);
            }
            
            public void SetVendorNameNull() {
                this[this.tableVendorListTable.VendorNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableVendorListTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableVendorListTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableVendorListTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableVendorListTable.ClientIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorListTableRowChangeEvent : EventArgs {
            
            private VendorListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public VendorListTableRowChangeEvent(VendorListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VendorListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnPaymentServiceID;
            
            private DataColumn columnPaymentServiceName;
            
            private DataColumn columnPaymentServiceNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnComments;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal CompanyPaymentServiceTableDataTable() : 
                    base("CompanyPaymentServiceTable") {
                this.InitClass();
            }
            
            internal CompanyPaymentServiceTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn PaymentServiceIDColumn {
                get {
                    return this.columnPaymentServiceID;
                }
            }
            
            internal DataColumn PaymentServiceNameColumn {
                get {
                    return this.columnPaymentServiceName;
                }
            }
            
            internal DataColumn PaymentServiceNumberColumn {
                get {
                    return this.columnPaymentServiceNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CompanyPaymentServiceTableRow this[int index] {
                get {
                    return ((CompanyPaymentServiceTableRow)(this.Rows[index]));
                }
            }
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanged;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanging;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleted;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleting;
            
            public void AddCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Add(row);
            }
            
            public CompanyPaymentServiceTableRow AddCompanyPaymentServiceTableRow(int CompanyID, int PaymentServiceID, string PaymentServiceName, string PaymentServiceNumber, bool IsActive, string Comments, System.DateTime LastUpdated, string UserID, string RowVersion) {
                CompanyPaymentServiceTableRow rowCompanyPaymentServiceTableRow = ((CompanyPaymentServiceTableRow)(this.NewRow()));
                rowCompanyPaymentServiceTableRow.ItemArray = new object[] {
                        CompanyID,
                        PaymentServiceID,
                        PaymentServiceName,
                        PaymentServiceNumber,
                        IsActive,
                        Comments,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowCompanyPaymentServiceTableRow);
                return rowCompanyPaymentServiceTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompanyPaymentServiceTableDataTable cln = ((CompanyPaymentServiceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompanyPaymentServiceTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnPaymentServiceID = this.Columns["PaymentServiceID"];
                this.columnPaymentServiceName = this.Columns["PaymentServiceName"];
                this.columnPaymentServiceNumber = this.Columns["PaymentServiceNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnComments = this.Columns["Comments"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnPaymentServiceID = new DataColumn("PaymentServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceID);
                this.columnPaymentServiceName = new DataColumn("PaymentServiceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceName);
                this.columnPaymentServiceNumber = new DataColumn("PaymentServiceNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnComments = new DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComments);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public CompanyPaymentServiceTableRow NewCompanyPaymentServiceTableRow() {
                return ((CompanyPaymentServiceTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompanyPaymentServiceTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompanyPaymentServiceTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyPaymentServiceTableRowChanged != null)) {
                    this.CompanyPaymentServiceTableRowChanged(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyPaymentServiceTableRowChanging != null)) {
                    this.CompanyPaymentServiceTableRowChanging(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyPaymentServiceTableRowDeleted != null)) {
                    this.CompanyPaymentServiceTableRowDeleted(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyPaymentServiceTableRowDeleting != null)) {
                    this.CompanyPaymentServiceTableRowDeleting(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRow : DataRow {
            
            private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
            
            internal CompanyPaymentServiceTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Table));
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = value;
                }
            }
            
            public int PaymentServiceID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = value;
                }
            }
            
            public string PaymentServiceName {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = value;
                }
            }
            
            public string PaymentServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCompanyPaymentServiceTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.CommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CommentsColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn);
            }
            
            public void SetPaymentServiceIDNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNameNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn);
            }
            
            public void SetPaymentServiceNameNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNumberNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn);
            }
            
            public void SetPaymentServiceNumberNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableCompanyPaymentServiceTable.CommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCompanyPaymentServiceTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRowChangeEvent : EventArgs {
            
            private CompanyPaymentServiceTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompanyPaymentServiceTableRowChangeEvent(CompanyPaymentServiceTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompanyPaymentServiceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
