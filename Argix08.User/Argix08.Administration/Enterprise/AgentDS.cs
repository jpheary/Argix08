//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AgentDS : DataSet {
        
        private AgentDetailTableDataTable tableAgentDetailTable;
        
        private AgentViewTableDataTable tableAgentViewTable;
        
        private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
        
        public AgentDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AgentDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AgentDetailTable"] != null)) {
                    this.Tables.Add(new AgentDetailTableDataTable(ds.Tables["AgentDetailTable"]));
                }
                if ((ds.Tables["AgentViewTable"] != null)) {
                    this.Tables.Add(new AgentViewTableDataTable(ds.Tables["AgentViewTable"]));
                }
                if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                    this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentDetailTableDataTable AgentDetailTable {
            get {
                return this.tableAgentDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentViewTableDataTable AgentViewTable {
            get {
                return this.tableAgentViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyPaymentServiceTableDataTable CompanyPaymentServiceTable {
            get {
                return this.tableCompanyPaymentServiceTable;
            }
        }
        
        public override DataSet Clone() {
            AgentDS cln = ((AgentDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AgentDetailTable"] != null)) {
                this.Tables.Add(new AgentDetailTableDataTable(ds.Tables["AgentDetailTable"]));
            }
            if ((ds.Tables["AgentViewTable"] != null)) {
                this.Tables.Add(new AgentViewTableDataTable(ds.Tables["AgentViewTable"]));
            }
            if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAgentDetailTable = ((AgentDetailTableDataTable)(this.Tables["AgentDetailTable"]));
            if ((this.tableAgentDetailTable != null)) {
                this.tableAgentDetailTable.InitVars();
            }
            this.tableAgentViewTable = ((AgentViewTableDataTable)(this.Tables["AgentViewTable"]));
            if ((this.tableAgentViewTable != null)) {
                this.tableAgentViewTable.InitVars();
            }
            this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Tables["CompanyPaymentServiceTable"]));
            if ((this.tableCompanyPaymentServiceTable != null)) {
                this.tableCompanyPaymentServiceTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AgentDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/AgentDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAgentDetailTable = new AgentDetailTableDataTable();
            this.Tables.Add(this.tableAgentDetailTable);
            this.tableAgentViewTable = new AgentViewTableDataTable();
            this.Tables.Add(this.tableAgentViewTable);
            this.tableCompanyPaymentServiceTable = new CompanyPaymentServiceTableDataTable();
            this.Tables.Add(this.tableCompanyPaymentServiceTable);
        }
        
        private bool ShouldSerializeAgentDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeAgentViewTable() {
            return false;
        }
        
        private bool ShouldSerializeCompanyPaymentServiceTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AgentDetailTableRowChangeEventHandler(object sender, AgentDetailTableRowChangeEvent e);
        
        public delegate void AgentViewTableRowChangeEventHandler(object sender, AgentViewTableRowChangeEvent e);
        
        public delegate void CompanyPaymentServiceTableRowChangeEventHandler(object sender, CompanyPaymentServiceTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAgentID;
            
            private DataColumn columnAgentName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AgentDetailTableDataTable() : 
                    base("AgentDetailTable") {
                this.InitClass();
            }
            
            internal AgentDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AgentDetailTableRow this[int index] {
                get {
                    return ((AgentDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event AgentDetailTableRowChangeEventHandler AgentDetailTableRowChanged;
            
            public event AgentDetailTableRowChangeEventHandler AgentDetailTableRowChanging;
            
            public event AgentDetailTableRowChangeEventHandler AgentDetailTableRowDeleted;
            
            public event AgentDetailTableRowChangeEventHandler AgentDetailTableRowDeleting;
            
            public void AddAgentDetailTableRow(AgentDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public AgentDetailTableRow AddAgentDetailTableRow(
                        int AgentID, 
                        string AgentName, 
                        string Number, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                AgentDetailTableRow rowAgentDetailTableRow = ((AgentDetailTableRow)(this.NewRow()));
                rowAgentDetailTableRow.ItemArray = new object[] {
                        AgentID,
                        AgentName,
                        Number,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAgentDetailTableRow);
                return rowAgentDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AgentDetailTableDataTable cln = ((AgentDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AgentDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnAgentID = this.Columns["AgentID"];
                this.columnAgentName = this.Columns["AgentName"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnAgentName = new DataColumn("AgentName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAgentName.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public AgentDetailTableRow NewAgentDetailTableRow() {
                return ((AgentDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AgentDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentDetailTableRowChanged != null)) {
                    this.AgentDetailTableRowChanged(this, new AgentDetailTableRowChangeEvent(((AgentDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentDetailTableRowChanging != null)) {
                    this.AgentDetailTableRowChanging(this, new AgentDetailTableRowChangeEvent(((AgentDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentDetailTableRowDeleted != null)) {
                    this.AgentDetailTableRowDeleted(this, new AgentDetailTableRowChangeEvent(((AgentDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentDetailTableRowDeleting != null)) {
                    this.AgentDetailTableRowDeleting(this, new AgentDetailTableRowChangeEvent(((AgentDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentDetailTableRow(AgentDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentDetailTableRow : DataRow {
            
            private AgentDetailTableDataTable tableAgentDetailTable;
            
            internal AgentDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentDetailTable = ((AgentDetailTableDataTable)(this.Table));
            }
            
            public int AgentID {
                get {
                    try {
                        return ((int)(this[this.tableAgentDetailTable.AgentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.AgentIDColumn] = value;
                }
            }
            
            public string AgentName {
                get {
                    return ((string)(this[this.tableAgentDetailTable.AgentNameColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.AgentNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableAgentDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableAgentDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableAgentDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableAgentDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableAgentDetailTable.CityColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tableAgentDetailTable.CountryIDColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.CountryIDColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableAgentDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableAgentDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableAgentDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAgentDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsAgentIDNull() {
                return this.IsNull(this.tableAgentDetailTable.AgentIDColumn);
            }
            
            public void SetAgentIDNull() {
                this[this.tableAgentDetailTable.AgentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableAgentDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableAgentDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableAgentDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableAgentDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableAgentDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableAgentDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableAgentDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableAgentDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableAgentDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableAgentDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAgentDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAgentDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAgentDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAgentDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAgentDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAgentDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAgentDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAgentDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAgentDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAgentDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentDetailTableRowChangeEvent : EventArgs {
            
            private AgentDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AgentDetailTableRowChangeEvent(AgentDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAgentID;
            
            private DataColumn columnAgentName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AgentViewTableDataTable() : 
                    base("AgentViewTable") {
                this.InitClass();
            }
            
            internal AgentViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AgentViewTableRow this[int index] {
                get {
                    return ((AgentViewTableRow)(this.Rows[index]));
                }
            }
            
            public event AgentViewTableRowChangeEventHandler AgentViewTableRowChanged;
            
            public event AgentViewTableRowChangeEventHandler AgentViewTableRowChanging;
            
            public event AgentViewTableRowChangeEventHandler AgentViewTableRowDeleted;
            
            public event AgentViewTableRowChangeEventHandler AgentViewTableRowDeleting;
            
            public void AddAgentViewTableRow(AgentViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public AgentViewTableRow AddAgentViewTableRow(
                        int AgentID, 
                        string AgentName, 
                        string Number, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                AgentViewTableRow rowAgentViewTableRow = ((AgentViewTableRow)(this.NewRow()));
                rowAgentViewTableRow.ItemArray = new object[] {
                        AgentID,
                        AgentName,
                        Number,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAgentViewTableRow);
                return rowAgentViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AgentViewTableDataTable cln = ((AgentViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AgentViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnAgentID = this.Columns["AgentID"];
                this.columnAgentName = this.Columns["AgentName"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnAgentName = new DataColumn("AgentName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public AgentViewTableRow NewAgentViewTableRow() {
                return ((AgentViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AgentViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentViewTableRowChanged != null)) {
                    this.AgentViewTableRowChanged(this, new AgentViewTableRowChangeEvent(((AgentViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentViewTableRowChanging != null)) {
                    this.AgentViewTableRowChanging(this, new AgentViewTableRowChangeEvent(((AgentViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentViewTableRowDeleted != null)) {
                    this.AgentViewTableRowDeleted(this, new AgentViewTableRowChangeEvent(((AgentViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentViewTableRowDeleting != null)) {
                    this.AgentViewTableRowDeleting(this, new AgentViewTableRowChangeEvent(((AgentViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentViewTableRow(AgentViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentViewTableRow : DataRow {
            
            private AgentViewTableDataTable tableAgentViewTable;
            
            internal AgentViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentViewTable = ((AgentViewTableDataTable)(this.Table));
            }
            
            public int AgentID {
                get {
                    try {
                        return ((int)(this[this.tableAgentViewTable.AgentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.AgentIDColumn] = value;
                }
            }
            
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.AgentNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.AgentNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableAgentViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAgentViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableAgentViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAgentViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsAgentIDNull() {
                return this.IsNull(this.tableAgentViewTable.AgentIDColumn);
            }
            
            public void SetAgentIDNull() {
                this[this.tableAgentViewTable.AgentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableAgentViewTable.AgentNameColumn);
            }
            
            public void SetAgentNameNull() {
                this[this.tableAgentViewTable.AgentNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableAgentViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableAgentViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableAgentViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableAgentViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableAgentViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableAgentViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableAgentViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableAgentViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableAgentViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableAgentViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableAgentViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableAgentViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableAgentViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableAgentViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableAgentViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableAgentViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAgentViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAgentViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableAgentViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableAgentViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAgentViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAgentViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAgentViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAgentViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAgentViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAgentViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAgentViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAgentViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableAgentViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableAgentViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableAgentViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableAgentViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableAgentViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableAgentViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAgentViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAgentViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AgentViewTableRowChangeEvent : EventArgs {
            
            private AgentViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AgentViewTableRowChangeEvent(AgentViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnPaymentServiceID;
            
            private DataColumn columnPaymentServiceName;
            
            private DataColumn columnPaymentServiceNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnComments;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal CompanyPaymentServiceTableDataTable() : 
                    base("CompanyPaymentServiceTable") {
                this.InitClass();
            }
            
            internal CompanyPaymentServiceTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn PaymentServiceIDColumn {
                get {
                    return this.columnPaymentServiceID;
                }
            }
            
            internal DataColumn PaymentServiceNameColumn {
                get {
                    return this.columnPaymentServiceName;
                }
            }
            
            internal DataColumn PaymentServiceNumberColumn {
                get {
                    return this.columnPaymentServiceNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CompanyPaymentServiceTableRow this[int index] {
                get {
                    return ((CompanyPaymentServiceTableRow)(this.Rows[index]));
                }
            }
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanged;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanging;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleted;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleting;
            
            public void AddCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Add(row);
            }
            
            public CompanyPaymentServiceTableRow AddCompanyPaymentServiceTableRow(int CompanyID, int PaymentServiceID, string PaymentServiceName, string PaymentServiceNumber, bool IsActive, string Comments, System.DateTime LastUpdated, string UserID, string RowVersion) {
                CompanyPaymentServiceTableRow rowCompanyPaymentServiceTableRow = ((CompanyPaymentServiceTableRow)(this.NewRow()));
                rowCompanyPaymentServiceTableRow.ItemArray = new object[] {
                        CompanyID,
                        PaymentServiceID,
                        PaymentServiceName,
                        PaymentServiceNumber,
                        IsActive,
                        Comments,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowCompanyPaymentServiceTableRow);
                return rowCompanyPaymentServiceTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompanyPaymentServiceTableDataTable cln = ((CompanyPaymentServiceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompanyPaymentServiceTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnPaymentServiceID = this.Columns["PaymentServiceID"];
                this.columnPaymentServiceName = this.Columns["PaymentServiceName"];
                this.columnPaymentServiceNumber = this.Columns["PaymentServiceNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnComments = this.Columns["Comments"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnPaymentServiceID = new DataColumn("PaymentServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceID);
                this.columnPaymentServiceName = new DataColumn("PaymentServiceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceName);
                this.columnPaymentServiceNumber = new DataColumn("PaymentServiceNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnComments = new DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComments);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public CompanyPaymentServiceTableRow NewCompanyPaymentServiceTableRow() {
                return ((CompanyPaymentServiceTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompanyPaymentServiceTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompanyPaymentServiceTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyPaymentServiceTableRowChanged != null)) {
                    this.CompanyPaymentServiceTableRowChanged(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyPaymentServiceTableRowChanging != null)) {
                    this.CompanyPaymentServiceTableRowChanging(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyPaymentServiceTableRowDeleted != null)) {
                    this.CompanyPaymentServiceTableRowDeleted(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyPaymentServiceTableRowDeleting != null)) {
                    this.CompanyPaymentServiceTableRowDeleting(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRow : DataRow {
            
            private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
            
            internal CompanyPaymentServiceTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Table));
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = value;
                }
            }
            
            public int PaymentServiceID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = value;
                }
            }
            
            public string PaymentServiceName {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = value;
                }
            }
            
            public string PaymentServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCompanyPaymentServiceTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.CommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CommentsColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn);
            }
            
            public void SetPaymentServiceIDNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNameNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn);
            }
            
            public void SetPaymentServiceNameNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNumberNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn);
            }
            
            public void SetPaymentServiceNumberNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableCompanyPaymentServiceTable.CommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCompanyPaymentServiceTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRowChangeEvent : EventArgs {
            
            private CompanyPaymentServiceTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompanyPaymentServiceTableRowChangeEvent(CompanyPaymentServiceTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompanyPaymentServiceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
