//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AddressDS : DataSet {
        
        private AddressDetailTableDataTable tableAddressDetailTable;
        
        private AddressViewTableDataTable tableAddressViewTable;
        
        public AddressDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AddressDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AddressDetailTable"] != null)) {
                    this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
                }
                if ((ds.Tables["AddressViewTable"] != null)) {
                    this.Tables.Add(new AddressViewTableDataTable(ds.Tables["AddressViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDetailTableDataTable AddressDetailTable {
            get {
                return this.tableAddressDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressViewTableDataTable AddressViewTable {
            get {
                return this.tableAddressViewTable;
            }
        }
        
        public override DataSet Clone() {
            AddressDS cln = ((AddressDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AddressDetailTable"] != null)) {
                this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
            }
            if ((ds.Tables["AddressViewTable"] != null)) {
                this.Tables.Add(new AddressViewTableDataTable(ds.Tables["AddressViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Tables["AddressDetailTable"]));
            if ((this.tableAddressDetailTable != null)) {
                this.tableAddressDetailTable.InitVars();
            }
            this.tableAddressViewTable = ((AddressViewTableDataTable)(this.Tables["AddressViewTable"]));
            if ((this.tableAddressViewTable != null)) {
                this.tableAddressViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AddressDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/AddressDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAddressDetailTable = new AddressDetailTableDataTable();
            this.Tables.Add(this.tableAddressDetailTable);
            this.tableAddressViewTable = new AddressViewTableDataTable();
            this.Tables.Add(this.tableAddressViewTable);
        }
        
        private bool ShouldSerializeAddressDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeAddressViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AddressDetailTableRowChangeEventHandler(object sender, AddressDetailTableRowChangeEvent e);
        
        public delegate void AddressViewTableRowChangeEventHandler(object sender, AddressViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressType;
            
            private DataColumn columnLocationID;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AddressDetailTableDataTable() : 
                    base("AddressDetailTable") {
                this.InitClass();
            }
            
            internal AddressDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressTypeColumn {
                get {
                    return this.columnAddressType;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AddressDetailTableRow this[int index] {
                get {
                    return ((AddressDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanged;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanging;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleted;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleting;
            
            public void AddAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public AddressDetailTableRow AddAddressDetailTableRow(int AddressID, string AddressType, int LocationID, string AddressLine1, string AddressLine2, string City, string StateOrProvince, string PostalCode, string Region, int CountryID, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                AddressDetailTableRow rowAddressDetailTableRow = ((AddressDetailTableRow)(this.NewRow()));
                rowAddressDetailTableRow.ItemArray = new object[] {
                        AddressID,
                        AddressType,
                        LocationID,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAddressDetailTableRow);
                return rowAddressDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDetailTableDataTable cln = ((AddressDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressType = this.Columns["AddressType"];
                this.columnLocationID = this.Columns["LocationID"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressType = new DataColumn("AddressType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressType);
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public AddressDetailTableRow NewAddressDetailTableRow() {
                return ((AddressDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressDetailTableRowChanged != null)) {
                    this.AddressDetailTableRowChanged(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressDetailTableRowChanging != null)) {
                    this.AddressDetailTableRowChanging(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressDetailTableRowDeleted != null)) {
                    this.AddressDetailTableRowDeleted(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressDetailTableRowDeleting != null)) {
                    this.AddressDetailTableRowDeleting(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRow : DataRow {
            
            private AddressDetailTableDataTable tableAddressDetailTable;
            
            internal AddressDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Table));
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressType {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressTypeColumn] = value;
                }
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.LocationIDColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.CountryIDColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableAddressDetailTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableAddressDetailTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableAddressDetailTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableAddressDetailTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressTypeNull() {
                return this.IsNull(this.tableAddressDetailTable.AddressTypeColumn);
            }
            
            public void SetAddressTypeNull() {
                this[this.tableAddressDetailTable.AddressTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableAddressDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableAddressDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableAddressDetailTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableAddressDetailTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAddressDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAddressDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableAddressDetailTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableAddressDetailTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAddressDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAddressDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddressDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAddressDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAddressDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAddressDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAddressDetailTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAddressDetailTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableAddressDetailTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableAddressDetailTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableAddressDetailTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableAddressDetailTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableAddressDetailTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableAddressDetailTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAddressDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAddressDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRowChangeEvent : EventArgs {
            
            private AddressDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressDetailTableRowChangeEvent(AddressDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressType;
            
            private DataColumn columnLocationID;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnStateProvinceName;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AddressViewTableDataTable() : 
                    base("AddressViewTable") {
                this.InitClass();
            }
            
            internal AddressViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressTypeColumn {
                get {
                    return this.columnAddressType;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn StateProvinceNameColumn {
                get {
                    return this.columnStateProvinceName;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AddressViewTableRow this[int index] {
                get {
                    return ((AddressViewTableRow)(this.Rows[index]));
                }
            }
            
            public event AddressViewTableRowChangeEventHandler AddressViewTableRowChanged;
            
            public event AddressViewTableRowChangeEventHandler AddressViewTableRowChanging;
            
            public event AddressViewTableRowChangeEventHandler AddressViewTableRowDeleted;
            
            public event AddressViewTableRowChangeEventHandler AddressViewTableRowDeleting;
            
            public void AddAddressViewTableRow(AddressViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public AddressViewTableRow AddAddressViewTableRow(
                        int AddressID, 
                        string AddressType, 
                        int LocationID, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string StateProvinceName, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                AddressViewTableRow rowAddressViewTableRow = ((AddressViewTableRow)(this.NewRow()));
                rowAddressViewTableRow.ItemArray = new object[] {
                        AddressID,
                        AddressType,
                        LocationID,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        StateProvinceName,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAddressViewTableRow);
                return rowAddressViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressViewTableDataTable cln = ((AddressViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressType = this.Columns["AddressType"];
                this.columnLocationID = this.Columns["LocationID"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnStateProvinceName = this.Columns["StateProvinceName"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressType = new DataColumn("AddressType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressType);
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnStateProvinceName = new DataColumn("StateProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateProvinceName);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public AddressViewTableRow NewAddressViewTableRow() {
                return ((AddressViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressViewTableRowChanged != null)) {
                    this.AddressViewTableRowChanged(this, new AddressViewTableRowChangeEvent(((AddressViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressViewTableRowChanging != null)) {
                    this.AddressViewTableRowChanging(this, new AddressViewTableRowChangeEvent(((AddressViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressViewTableRowDeleted != null)) {
                    this.AddressViewTableRowDeleted(this, new AddressViewTableRowChangeEvent(((AddressViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressViewTableRowDeleting != null)) {
                    this.AddressViewTableRowDeleting(this, new AddressViewTableRowChangeEvent(((AddressViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressViewTableRow(AddressViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressViewTableRow : DataRow {
            
            private AddressViewTableDataTable tableAddressViewTable;
            
            internal AddressViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressViewTable = ((AddressViewTableDataTable)(this.Table));
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableAddressViewTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressType {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.AddressTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.AddressTypeColumn] = value;
                }
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableAddressViewTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.LocationIDColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string StateProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.StateProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.StateProvinceNameColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAddressViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.CountryColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableAddressViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableAddressViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAddressViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableAddressViewTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableAddressViewTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressTypeNull() {
                return this.IsNull(this.tableAddressViewTable.AddressTypeColumn);
            }
            
            public void SetAddressTypeNull() {
                this[this.tableAddressViewTable.AddressTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableAddressViewTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableAddressViewTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableAddressViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableAddressViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAddressViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAddressViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableAddressViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableAddressViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAddressViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAddressViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateProvinceNameNull() {
                return this.IsNull(this.tableAddressViewTable.StateProvinceNameColumn);
            }
            
            public void SetStateProvinceNameNull() {
                this[this.tableAddressViewTable.StateProvinceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddressViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAddressViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAddressViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAddressViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAddressViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAddressViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableAddressViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableAddressViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableAddressViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableAddressViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableAddressViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableAddressViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableAddressViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableAddressViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAddressViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAddressViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressViewTableRowChangeEvent : EventArgs {
            
            private AddressViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressViewTableRowChangeEvent(AddressViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
