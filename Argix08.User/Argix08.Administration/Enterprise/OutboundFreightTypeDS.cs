//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OutboundFreightTypeDS : DataSet {
        
        private OutboundFreightTypeTableDataTable tableOutboundFreightTypeTable;
        
        public OutboundFreightTypeDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OutboundFreightTypeDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["OutboundFreightTypeTable"] != null)) {
                    this.Tables.Add(new OutboundFreightTypeTableDataTable(ds.Tables["OutboundFreightTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutboundFreightTypeTableDataTable OutboundFreightTypeTable {
            get {
                return this.tableOutboundFreightTypeTable;
            }
        }
        
        public override DataSet Clone() {
            OutboundFreightTypeDS cln = ((OutboundFreightTypeDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["OutboundFreightTypeTable"] != null)) {
                this.Tables.Add(new OutboundFreightTypeTableDataTable(ds.Tables["OutboundFreightTypeTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOutboundFreightTypeTable = ((OutboundFreightTypeTableDataTable)(this.Tables["OutboundFreightTypeTable"]));
            if ((this.tableOutboundFreightTypeTable != null)) {
                this.tableOutboundFreightTypeTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "OutboundFreightTypeDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/OutboundFreightTypeDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOutboundFreightTypeTable = new OutboundFreightTypeTableDataTable();
            this.Tables.Add(this.tableOutboundFreightTypeTable);
        }
        
        private bool ShouldSerializeOutboundFreightTypeTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OutboundFreightTypeTableRowChangeEventHandler(object sender, OutboundFreightTypeTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutboundFreightTypeTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFreightType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnInboundFreightType;
            
            private DataColumn columnAgentID;
            
            private DataColumn columnAgentName;
            
            internal OutboundFreightTypeTableDataTable() : 
                    base("OutboundFreightTypeTable") {
                this.InitClass();
            }
            
            internal OutboundFreightTypeTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn InboundFreightTypeColumn {
                get {
                    return this.columnInboundFreightType;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            public OutboundFreightTypeTableRow this[int index] {
                get {
                    return ((OutboundFreightTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event OutboundFreightTypeTableRowChangeEventHandler OutboundFreightTypeTableRowChanged;
            
            public event OutboundFreightTypeTableRowChangeEventHandler OutboundFreightTypeTableRowChanging;
            
            public event OutboundFreightTypeTableRowChangeEventHandler OutboundFreightTypeTableRowDeleted;
            
            public event OutboundFreightTypeTableRowChangeEventHandler OutboundFreightTypeTableRowDeleting;
            
            public void AddOutboundFreightTypeTableRow(OutboundFreightTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            public OutboundFreightTypeTableRow AddOutboundFreightTypeTableRow(string FreightType, string Description, string InboundFreightType, int AgentID, string AgentName) {
                OutboundFreightTypeTableRow rowOutboundFreightTypeTableRow = ((OutboundFreightTypeTableRow)(this.NewRow()));
                rowOutboundFreightTypeTableRow.ItemArray = new object[] {
                        FreightType,
                        Description,
                        InboundFreightType,
                        AgentID,
                        AgentName};
                this.Rows.Add(rowOutboundFreightTypeTableRow);
                return rowOutboundFreightTypeTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OutboundFreightTypeTableDataTable cln = ((OutboundFreightTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OutboundFreightTypeTableDataTable();
            }
            
            internal void InitVars() {
                this.columnFreightType = this.Columns["FreightType"];
                this.columnDescription = this.Columns["Description"];
                this.columnInboundFreightType = this.Columns["InboundFreightType"];
                this.columnAgentID = this.Columns["AgentID"];
                this.columnAgentName = this.Columns["AgentName"];
            }
            
            private void InitClass() {
                this.columnFreightType = new DataColumn("FreightType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreightType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnInboundFreightType = new DataColumn("InboundFreightType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInboundFreightType);
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnAgentName = new DataColumn("AgentName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentName);
                this.columnFreightType.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnInboundFreightType.AllowDBNull = false;
            }
            
            public OutboundFreightTypeTableRow NewOutboundFreightTypeTableRow() {
                return ((OutboundFreightTypeTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OutboundFreightTypeTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OutboundFreightTypeTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutboundFreightTypeTableRowChanged != null)) {
                    this.OutboundFreightTypeTableRowChanged(this, new OutboundFreightTypeTableRowChangeEvent(((OutboundFreightTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutboundFreightTypeTableRowChanging != null)) {
                    this.OutboundFreightTypeTableRowChanging(this, new OutboundFreightTypeTableRowChangeEvent(((OutboundFreightTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutboundFreightTypeTableRowDeleted != null)) {
                    this.OutboundFreightTypeTableRowDeleted(this, new OutboundFreightTypeTableRowChangeEvent(((OutboundFreightTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutboundFreightTypeTableRowDeleting != null)) {
                    this.OutboundFreightTypeTableRowDeleting(this, new OutboundFreightTypeTableRowChangeEvent(((OutboundFreightTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOutboundFreightTypeTableRow(OutboundFreightTypeTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutboundFreightTypeTableRow : DataRow {
            
            private OutboundFreightTypeTableDataTable tableOutboundFreightTypeTable;
            
            internal OutboundFreightTypeTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutboundFreightTypeTable = ((OutboundFreightTypeTableDataTable)(this.Table));
            }
            
            public string FreightType {
                get {
                    return ((string)(this[this.tableOutboundFreightTypeTable.FreightTypeColumn]));
                }
                set {
                    this[this.tableOutboundFreightTypeTable.FreightTypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableOutboundFreightTypeTable.DescriptionColumn]));
                }
                set {
                    this[this.tableOutboundFreightTypeTable.DescriptionColumn] = value;
                }
            }
            
            public string InboundFreightType {
                get {
                    return ((string)(this[this.tableOutboundFreightTypeTable.InboundFreightTypeColumn]));
                }
                set {
                    this[this.tableOutboundFreightTypeTable.InboundFreightTypeColumn] = value;
                }
            }
            
            public int AgentID {
                get {
                    try {
                        return ((int)(this[this.tableOutboundFreightTypeTable.AgentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutboundFreightTypeTable.AgentIDColumn] = value;
                }
            }
            
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableOutboundFreightTypeTable.AgentNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutboundFreightTypeTable.AgentNameColumn] = value;
                }
            }
            
            public bool IsAgentIDNull() {
                return this.IsNull(this.tableOutboundFreightTypeTable.AgentIDColumn);
            }
            
            public void SetAgentIDNull() {
                this[this.tableOutboundFreightTypeTable.AgentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableOutboundFreightTypeTable.AgentNameColumn);
            }
            
            public void SetAgentNameNull() {
                this[this.tableOutboundFreightTypeTable.AgentNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutboundFreightTypeTableRowChangeEvent : EventArgs {
            
            private OutboundFreightTypeTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public OutboundFreightTypeTableRowChangeEvent(OutboundFreightTypeTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OutboundFreightTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
