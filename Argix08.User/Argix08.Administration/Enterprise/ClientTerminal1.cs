//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ClientTerminalDS : DataSet {
        
        private ClientTerminalTableDataTable tableClientTerminalTable;
        
        public ClientTerminalDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ClientTerminalDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientTerminalTable"] != null)) {
                    this.Tables.Add(new ClientTerminalTableDataTable(ds.Tables["ClientTerminalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientTerminalTableDataTable ClientTerminalTable {
            get {
                return this.tableClientTerminalTable;
            }
        }
        
        public override DataSet Clone() {
            ClientTerminalDS cln = ((ClientTerminalDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientTerminalTable"] != null)) {
                this.Tables.Add(new ClientTerminalTableDataTable(ds.Tables["ClientTerminalTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientTerminalTable = ((ClientTerminalTableDataTable)(this.Tables["ClientTerminalTable"]));
            if ((this.tableClientTerminalTable != null)) {
                this.tableClientTerminalTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ClientTerminalDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ClientTerminalDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientTerminalTable = new ClientTerminalTableDataTable();
            this.Tables.Add(this.tableClientTerminalTable);
        }
        
        private bool ShouldSerializeClientTerminalTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientTerminalTableRowChangeEventHandler(object sender, ClientTerminalTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSelected;
            
            private DataColumn columnClientID;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminalName;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            internal ClientTerminalTableDataTable() : 
                    base("ClientTerminalTable") {
                this.InitClass();
            }
            
            internal ClientTerminalTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            public ClientTerminalTableRow this[int index] {
                get {
                    return ((ClientTerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowChanged;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowChanging;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowDeleted;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowDeleting;
            
            public void AddClientTerminalTableRow(ClientTerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientTerminalTableRow AddClientTerminalTableRow(bool Selected, int ClientID, int TerminalID, string TerminalName, System.DateTime LastUpdated, string UserID) {
                ClientTerminalTableRow rowClientTerminalTableRow = ((ClientTerminalTableRow)(this.NewRow()));
                rowClientTerminalTableRow.ItemArray = new object[] {
                        Selected,
                        ClientID,
                        TerminalID,
                        TerminalName,
                        LastUpdated,
                        UserID};
                this.Rows.Add(rowClientTerminalTableRow);
                return rowClientTerminalTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientTerminalTableDataTable cln = ((ClientTerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientTerminalTableDataTable();
            }
            
            internal void InitVars() {
                this.columnSelected = this.Columns["Selected"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminalName = this.Columns["TerminalName"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
            }
            
            private void InitClass() {
                this.columnSelected = new DataColumn("Selected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSelected);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminalName = new DataColumn("TerminalName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalName);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
            }
            
            public ClientTerminalTableRow NewClientTerminalTableRow() {
                return ((ClientTerminalTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientTerminalTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientTerminalTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientTerminalTableRowChanged != null)) {
                    this.ClientTerminalTableRowChanged(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientTerminalTableRowChanging != null)) {
                    this.ClientTerminalTableRowChanging(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientTerminalTableRowDeleted != null)) {
                    this.ClientTerminalTableRowDeleted(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientTerminalTableRowDeleting != null)) {
                    this.ClientTerminalTableRowDeleting(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientTerminalTableRow(ClientTerminalTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableRow : DataRow {
            
            private ClientTerminalTableDataTable tableClientTerminalTable;
            
            internal ClientTerminalTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientTerminalTable = ((ClientTerminalTableDataTable)(this.Table));
            }
            
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableClientTerminalTable.SelectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.SelectedColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientTerminalTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.ClientIDColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableClientTerminalTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.TerminalIDColumn] = value;
                }
            }
            
            public string TerminalName {
                get {
                    try {
                        return ((string)(this[this.tableClientTerminalTable.TerminalNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.TerminalNameColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientTerminalTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableClientTerminalTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.UserIDColumn] = value;
                }
            }
            
            public bool IsSelectedNull() {
                return this.IsNull(this.tableClientTerminalTable.SelectedColumn);
            }
            
            public void SetSelectedNull() {
                this[this.tableClientTerminalTable.SelectedColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientTerminalTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableClientTerminalTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableClientTerminalTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableClientTerminalTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNameNull() {
                return this.IsNull(this.tableClientTerminalTable.TerminalNameColumn);
            }
            
            public void SetTerminalNameNull() {
                this[this.tableClientTerminalTable.TerminalNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableClientTerminalTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableClientTerminalTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableClientTerminalTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableClientTerminalTable.UserIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableRowChangeEvent : EventArgs {
            
            private ClientTerminalTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientTerminalTableRowChangeEvent(ClientTerminalTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientTerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
