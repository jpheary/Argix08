//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DeliveryLocationDS : DataSet {
        
        private DeliveryLocationMapTableDataTable tableDeliveryLocationMapTable;
        
        private DeliveryLocationOverrideViewTableDataTable tableDeliveryLocationOverrideViewTable;
        
        private DeliveryLocationOverrideDetailTableDataTable tableDeliveryLocationOverrideDetailTable;
        
        public DeliveryLocationDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DeliveryLocationDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DeliveryLocationMapTable"] != null)) {
                    this.Tables.Add(new DeliveryLocationMapTableDataTable(ds.Tables["DeliveryLocationMapTable"]));
                }
                if ((ds.Tables["DeliveryLocationOverrideViewTable"] != null)) {
                    this.Tables.Add(new DeliveryLocationOverrideViewTableDataTable(ds.Tables["DeliveryLocationOverrideViewTable"]));
                }
                if ((ds.Tables["DeliveryLocationOverrideDetailTable"] != null)) {
                    this.Tables.Add(new DeliveryLocationOverrideDetailTableDataTable(ds.Tables["DeliveryLocationOverrideDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryLocationMapTableDataTable DeliveryLocationMapTable {
            get {
                return this.tableDeliveryLocationMapTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryLocationOverrideViewTableDataTable DeliveryLocationOverrideViewTable {
            get {
                return this.tableDeliveryLocationOverrideViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryLocationOverrideDetailTableDataTable DeliveryLocationOverrideDetailTable {
            get {
                return this.tableDeliveryLocationOverrideDetailTable;
            }
        }
        
        public override DataSet Clone() {
            DeliveryLocationDS cln = ((DeliveryLocationDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DeliveryLocationMapTable"] != null)) {
                this.Tables.Add(new DeliveryLocationMapTableDataTable(ds.Tables["DeliveryLocationMapTable"]));
            }
            if ((ds.Tables["DeliveryLocationOverrideViewTable"] != null)) {
                this.Tables.Add(new DeliveryLocationOverrideViewTableDataTable(ds.Tables["DeliveryLocationOverrideViewTable"]));
            }
            if ((ds.Tables["DeliveryLocationOverrideDetailTable"] != null)) {
                this.Tables.Add(new DeliveryLocationOverrideDetailTableDataTable(ds.Tables["DeliveryLocationOverrideDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDeliveryLocationMapTable = ((DeliveryLocationMapTableDataTable)(this.Tables["DeliveryLocationMapTable"]));
            if ((this.tableDeliveryLocationMapTable != null)) {
                this.tableDeliveryLocationMapTable.InitVars();
            }
            this.tableDeliveryLocationOverrideViewTable = ((DeliveryLocationOverrideViewTableDataTable)(this.Tables["DeliveryLocationOverrideViewTable"]));
            if ((this.tableDeliveryLocationOverrideViewTable != null)) {
                this.tableDeliveryLocationOverrideViewTable.InitVars();
            }
            this.tableDeliveryLocationOverrideDetailTable = ((DeliveryLocationOverrideDetailTableDataTable)(this.Tables["DeliveryLocationOverrideDetailTable"]));
            if ((this.tableDeliveryLocationOverrideDetailTable != null)) {
                this.tableDeliveryLocationOverrideDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DeliveryLocationDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DeliveryLocationDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDeliveryLocationMapTable = new DeliveryLocationMapTableDataTable();
            this.Tables.Add(this.tableDeliveryLocationMapTable);
            this.tableDeliveryLocationOverrideViewTable = new DeliveryLocationOverrideViewTableDataTable();
            this.Tables.Add(this.tableDeliveryLocationOverrideViewTable);
            this.tableDeliveryLocationOverrideDetailTable = new DeliveryLocationOverrideDetailTableDataTable();
            this.Tables.Add(this.tableDeliveryLocationOverrideDetailTable);
        }
        
        private bool ShouldSerializeDeliveryLocationMapTable() {
            return false;
        }
        
        private bool ShouldSerializeDeliveryLocationOverrideViewTable() {
            return false;
        }
        
        private bool ShouldSerializeDeliveryLocationOverrideDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DeliveryLocationMapTableRowChangeEventHandler(object sender, DeliveryLocationMapTableRowChangeEvent e);
        
        public delegate void DeliveryLocationOverrideViewTableRowChangeEventHandler(object sender, DeliveryLocationOverrideViewTableRowChangeEvent e);
        
        public delegate void DeliveryLocationOverrideDetailTableRowChangeEventHandler(object sender, DeliveryLocationOverrideDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationMapTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMapID;
            
            private DataColumn columnSortCenter;
            
            private DataColumn columnClientName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPathID;
            
            private DataColumn columnPathMnemonic;
            
            private DataColumn columnPathLastStopMnemonic;
            
            private DataColumn columnServiceID;
            
            private DataColumn columnServiceMnemonic;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DeliveryLocationMapTableDataTable() : 
                    base("DeliveryLocationMapTable") {
                this.InitClass();
            }
            
            internal DeliveryLocationMapTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MapIDColumn {
                get {
                    return this.columnMapID;
                }
            }
            
            internal DataColumn SortCenterColumn {
                get {
                    return this.columnSortCenter;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn PathMnemonicColumn {
                get {
                    return this.columnPathMnemonic;
                }
            }
            
            internal DataColumn PathLastStopMnemonicColumn {
                get {
                    return this.columnPathLastStopMnemonic;
                }
            }
            
            internal DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            internal DataColumn ServiceMnemonicColumn {
                get {
                    return this.columnServiceMnemonic;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DeliveryLocationMapTableRow this[int index] {
                get {
                    return ((DeliveryLocationMapTableRow)(this.Rows[index]));
                }
            }
            
            public event DeliveryLocationMapTableRowChangeEventHandler DeliveryLocationMapTableRowChanged;
            
            public event DeliveryLocationMapTableRowChangeEventHandler DeliveryLocationMapTableRowChanging;
            
            public event DeliveryLocationMapTableRowChangeEventHandler DeliveryLocationMapTableRowDeleted;
            
            public event DeliveryLocationMapTableRowChangeEventHandler DeliveryLocationMapTableRowDeleting;
            
            public void AddDeliveryLocationMapTableRow(DeliveryLocationMapTableRow row) {
                this.Rows.Add(row);
            }
            
            public DeliveryLocationMapTableRow AddDeliveryLocationMapTableRow(
                        string MapID, 
                        string SortCenter, 
                        string ClientName, 
                        string Description, 
                        bool IsActive, 
                        int CountryID, 
                        string Country, 
                        string PostalCode, 
                        string StateOrProvince, 
                        string PathID, 
                        string PathMnemonic, 
                        string PathLastStopMnemonic, 
                        int ServiceID, 
                        string ServiceMnemonic, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                DeliveryLocationMapTableRow rowDeliveryLocationMapTableRow = ((DeliveryLocationMapTableRow)(this.NewRow()));
                rowDeliveryLocationMapTableRow.ItemArray = new object[] {
                        MapID,
                        SortCenter,
                        ClientName,
                        Description,
                        IsActive,
                        CountryID,
                        Country,
                        PostalCode,
                        StateOrProvince,
                        PathID,
                        PathMnemonic,
                        PathLastStopMnemonic,
                        ServiceID,
                        ServiceMnemonic,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDeliveryLocationMapTableRow);
                return rowDeliveryLocationMapTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DeliveryLocationMapTableDataTable cln = ((DeliveryLocationMapTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DeliveryLocationMapTableDataTable();
            }
            
            internal void InitVars() {
                this.columnMapID = this.Columns["MapID"];
                this.columnSortCenter = this.Columns["SortCenter"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPathID = this.Columns["PathID"];
                this.columnPathMnemonic = this.Columns["PathMnemonic"];
                this.columnPathLastStopMnemonic = this.Columns["PathLastStopMnemonic"];
                this.columnServiceID = this.Columns["ServiceID"];
                this.columnServiceMnemonic = this.Columns["ServiceMnemonic"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnMapID = new DataColumn("MapID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMapID);
                this.columnSortCenter = new DataColumn("SortCenter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenter);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPathID = new DataColumn("PathID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnPathMnemonic = new DataColumn("PathMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathMnemonic);
                this.columnPathLastStopMnemonic = new DataColumn("PathLastStopMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathLastStopMnemonic);
                this.columnServiceID = new DataColumn("ServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceID);
                this.columnServiceMnemonic = new DataColumn("ServiceMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceMnemonic);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnMapID.AllowDBNull = false;
                this.columnSortCenter.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnCountry.AllowDBNull = false;
                this.columnPostalCode.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public DeliveryLocationMapTableRow NewDeliveryLocationMapTableRow() {
                return ((DeliveryLocationMapTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DeliveryLocationMapTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DeliveryLocationMapTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeliveryLocationMapTableRowChanged != null)) {
                    this.DeliveryLocationMapTableRowChanged(this, new DeliveryLocationMapTableRowChangeEvent(((DeliveryLocationMapTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeliveryLocationMapTableRowChanging != null)) {
                    this.DeliveryLocationMapTableRowChanging(this, new DeliveryLocationMapTableRowChangeEvent(((DeliveryLocationMapTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeliveryLocationMapTableRowDeleted != null)) {
                    this.DeliveryLocationMapTableRowDeleted(this, new DeliveryLocationMapTableRowChangeEvent(((DeliveryLocationMapTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeliveryLocationMapTableRowDeleting != null)) {
                    this.DeliveryLocationMapTableRowDeleting(this, new DeliveryLocationMapTableRowChangeEvent(((DeliveryLocationMapTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDeliveryLocationMapTableRow(DeliveryLocationMapTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationMapTableRow : DataRow {
            
            private DeliveryLocationMapTableDataTable tableDeliveryLocationMapTable;
            
            internal DeliveryLocationMapTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeliveryLocationMapTable = ((DeliveryLocationMapTableDataTable)(this.Table));
            }
            
            public string MapID {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.MapIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.MapIDColumn] = value;
                }
            }
            
            public string SortCenter {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.SortCenterColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.SortCenterColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.ClientNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.DescriptionColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableDeliveryLocationMapTable.IsActiveColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.IsActiveColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tableDeliveryLocationMapTable.CountryIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.CountryColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.CountryColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.PostalCodeColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.PostalCodeColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PathID {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.PathIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.PathIDColumn] = value;
                }
            }
            
            public string PathMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.PathMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.PathMnemonicColumn] = value;
                }
            }
            
            public string PathLastStopMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.PathLastStopMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.PathLastStopMnemonicColumn] = value;
                }
            }
            
            public int ServiceID {
                get {
                    try {
                        return ((int)(this[this.tableDeliveryLocationMapTable.ServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.ServiceIDColumn] = value;
                }
            }
            
            public string ServiceMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.ServiceMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.ServiceMnemonicColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableDeliveryLocationMapTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableDeliveryLocationMapTable.UserIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationMapTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationMapTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationMapTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableDeliveryLocationMapTable.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableDeliveryLocationMapTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPathIDNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.PathIDColumn);
            }
            
            public void SetPathIDNull() {
                this[this.tableDeliveryLocationMapTable.PathIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPathMnemonicNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.PathMnemonicColumn);
            }
            
            public void SetPathMnemonicNull() {
                this[this.tableDeliveryLocationMapTable.PathMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsPathLastStopMnemonicNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.PathLastStopMnemonicColumn);
            }
            
            public void SetPathLastStopMnemonicNull() {
                this[this.tableDeliveryLocationMapTable.PathLastStopMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsServiceIDNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.ServiceIDColumn);
            }
            
            public void SetServiceIDNull() {
                this[this.tableDeliveryLocationMapTable.ServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsServiceMnemonicNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.ServiceMnemonicColumn);
            }
            
            public void SetServiceMnemonicNull() {
                this[this.tableDeliveryLocationMapTable.ServiceMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDeliveryLocationMapTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableDeliveryLocationMapTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationMapTableRowChangeEvent : EventArgs {
            
            private DeliveryLocationMapTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DeliveryLocationMapTableRowChangeEvent(DeliveryLocationMapTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DeliveryLocationMapTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLocationType;
            
            private DataColumn columnVendorName;
            
            private DataColumn columnAddress;
            
            private DataColumn columnHasOverride;
            
            internal DeliveryLocationOverrideViewTableDataTable() : 
                    base("DeliveryLocationOverrideViewTable") {
                this.InitClass();
            }
            
            internal DeliveryLocationOverrideViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LocationTypeColumn {
                get {
                    return this.columnLocationType;
                }
            }
            
            internal DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn HasOverrideColumn {
                get {
                    return this.columnHasOverride;
                }
            }
            
            public DeliveryLocationOverrideViewTableRow this[int index] {
                get {
                    return ((DeliveryLocationOverrideViewTableRow)(this.Rows[index]));
                }
            }
            
            public event DeliveryLocationOverrideViewTableRowChangeEventHandler DeliveryLocationOverrideViewTableRowChanged;
            
            public event DeliveryLocationOverrideViewTableRowChangeEventHandler DeliveryLocationOverrideViewTableRowChanging;
            
            public event DeliveryLocationOverrideViewTableRowChangeEventHandler DeliveryLocationOverrideViewTableRowDeleted;
            
            public event DeliveryLocationOverrideViewTableRowChangeEventHandler DeliveryLocationOverrideViewTableRowDeleting;
            
            public void AddDeliveryLocationOverrideViewTableRow(DeliveryLocationOverrideViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public DeliveryLocationOverrideViewTableRow AddDeliveryLocationOverrideViewTableRow(int LocationID, string Number, string Description, string LocationType, string VendorName, string Address, int HasOverride) {
                DeliveryLocationOverrideViewTableRow rowDeliveryLocationOverrideViewTableRow = ((DeliveryLocationOverrideViewTableRow)(this.NewRow()));
                rowDeliveryLocationOverrideViewTableRow.ItemArray = new object[] {
                        LocationID,
                        Number,
                        Description,
                        LocationType,
                        VendorName,
                        Address,
                        HasOverride};
                this.Rows.Add(rowDeliveryLocationOverrideViewTableRow);
                return rowDeliveryLocationOverrideViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DeliveryLocationOverrideViewTableDataTable cln = ((DeliveryLocationOverrideViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DeliveryLocationOverrideViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnLocationType = this.Columns["LocationType"];
                this.columnVendorName = this.Columns["VendorName"];
                this.columnAddress = this.Columns["Address"];
                this.columnHasOverride = this.Columns["HasOverride"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLocationType = new DataColumn("LocationType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationType);
                this.columnVendorName = new DataColumn("VendorName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorName);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnHasOverride = new DataColumn("HasOverride", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasOverride);
                this.columnLocationID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnLocationType.AllowDBNull = false;
            }
            
            public DeliveryLocationOverrideViewTableRow NewDeliveryLocationOverrideViewTableRow() {
                return ((DeliveryLocationOverrideViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DeliveryLocationOverrideViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DeliveryLocationOverrideViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeliveryLocationOverrideViewTableRowChanged != null)) {
                    this.DeliveryLocationOverrideViewTableRowChanged(this, new DeliveryLocationOverrideViewTableRowChangeEvent(((DeliveryLocationOverrideViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeliveryLocationOverrideViewTableRowChanging != null)) {
                    this.DeliveryLocationOverrideViewTableRowChanging(this, new DeliveryLocationOverrideViewTableRowChangeEvent(((DeliveryLocationOverrideViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeliveryLocationOverrideViewTableRowDeleted != null)) {
                    this.DeliveryLocationOverrideViewTableRowDeleted(this, new DeliveryLocationOverrideViewTableRowChangeEvent(((DeliveryLocationOverrideViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeliveryLocationOverrideViewTableRowDeleting != null)) {
                    this.DeliveryLocationOverrideViewTableRowDeleting(this, new DeliveryLocationOverrideViewTableRowChangeEvent(((DeliveryLocationOverrideViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDeliveryLocationOverrideViewTableRow(DeliveryLocationOverrideViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideViewTableRow : DataRow {
            
            private DeliveryLocationOverrideViewTableDataTable tableDeliveryLocationOverrideViewTable;
            
            internal DeliveryLocationOverrideViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeliveryLocationOverrideViewTable = ((DeliveryLocationOverrideViewTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    return ((int)(this[this.tableDeliveryLocationOverrideViewTable.LocationIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.LocationIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideViewTable.NumberColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideViewTable.DescriptionColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.DescriptionColumn] = value;
                }
            }
            
            public string LocationType {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideViewTable.LocationTypeColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.LocationTypeColumn] = value;
                }
            }
            
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideViewTable.VendorNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.VendorNameColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideViewTable.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.AddressColumn] = value;
                }
            }
            
            public int HasOverride {
                get {
                    try {
                        return ((int)(this[this.tableDeliveryLocationOverrideViewTable.HasOverrideColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideViewTable.HasOverrideColumn] = value;
                }
            }
            
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideViewTable.VendorNameColumn);
            }
            
            public void SetVendorNameNull() {
                this[this.tableDeliveryLocationOverrideViewTable.VendorNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideViewTable.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableDeliveryLocationOverrideViewTable.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasOverrideNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideViewTable.HasOverrideColumn);
            }
            
            public void SetHasOverrideNull() {
                this[this.tableDeliveryLocationOverrideViewTable.HasOverrideColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideViewTableRowChangeEvent : EventArgs {
            
            private DeliveryLocationOverrideViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DeliveryLocationOverrideViewTableRowChangeEvent(DeliveryLocationOverrideViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DeliveryLocationOverrideViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSelected;
            
            private DataColumn columnSortCenterID;
            
            private DataColumn columnSortCenter;
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnLocationID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnAddress;
            
            private DataColumn columnOldPathMnemonic;
            
            private DataColumn columnOldServiceMnemonic;
            
            private DataColumn columnPathID;
            
            private DataColumn columnPathMnemonic;
            
            private DataColumn columnPathLastStopMnemonic;
            
            private DataColumn columnServiceID;
            
            private DataColumn columnServiceMnemonic;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DeliveryLocationOverrideDetailTableDataTable() : 
                    base("DeliveryLocationOverrideDetailTable") {
                this.InitClass();
            }
            
            internal DeliveryLocationOverrideDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            internal DataColumn SortCenterIDColumn {
                get {
                    return this.columnSortCenterID;
                }
            }
            
            internal DataColumn SortCenterColumn {
                get {
                    return this.columnSortCenter;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn OldPathMnemonicColumn {
                get {
                    return this.columnOldPathMnemonic;
                }
            }
            
            internal DataColumn OldServiceMnemonicColumn {
                get {
                    return this.columnOldServiceMnemonic;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn PathMnemonicColumn {
                get {
                    return this.columnPathMnemonic;
                }
            }
            
            internal DataColumn PathLastStopMnemonicColumn {
                get {
                    return this.columnPathLastStopMnemonic;
                }
            }
            
            internal DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            internal DataColumn ServiceMnemonicColumn {
                get {
                    return this.columnServiceMnemonic;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DeliveryLocationOverrideDetailTableRow this[int index] {
                get {
                    return ((DeliveryLocationOverrideDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event DeliveryLocationOverrideDetailTableRowChangeEventHandler DeliveryLocationOverrideDetailTableRowChanged;
            
            public event DeliveryLocationOverrideDetailTableRowChangeEventHandler DeliveryLocationOverrideDetailTableRowChanging;
            
            public event DeliveryLocationOverrideDetailTableRowChangeEventHandler DeliveryLocationOverrideDetailTableRowDeleted;
            
            public event DeliveryLocationOverrideDetailTableRowChangeEventHandler DeliveryLocationOverrideDetailTableRowDeleting;
            
            public void AddDeliveryLocationOverrideDetailTableRow(DeliveryLocationOverrideDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public DeliveryLocationOverrideDetailTableRow AddDeliveryLocationOverrideDetailTableRow(
                        bool Selected, 
                        int SortCenterID, 
                        string SortCenter, 
                        int ClientID, 
                        string ClientName, 
                        int LocationID, 
                        string Number, 
                        string Description, 
                        string Address, 
                        string OldPathMnemonic, 
                        string OldServiceMnemonic, 
                        string PathID, 
                        string PathMnemonic, 
                        string PathLastStopMnemonic, 
                        int ServiceID, 
                        string ServiceMnemonic, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                DeliveryLocationOverrideDetailTableRow rowDeliveryLocationOverrideDetailTableRow = ((DeliveryLocationOverrideDetailTableRow)(this.NewRow()));
                rowDeliveryLocationOverrideDetailTableRow.ItemArray = new object[] {
                        Selected,
                        SortCenterID,
                        SortCenter,
                        ClientID,
                        ClientName,
                        LocationID,
                        Number,
                        Description,
                        Address,
                        OldPathMnemonic,
                        OldServiceMnemonic,
                        PathID,
                        PathMnemonic,
                        PathLastStopMnemonic,
                        ServiceID,
                        ServiceMnemonic,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDeliveryLocationOverrideDetailTableRow);
                return rowDeliveryLocationOverrideDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DeliveryLocationOverrideDetailTableDataTable cln = ((DeliveryLocationOverrideDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DeliveryLocationOverrideDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnSelected = this.Columns["Selected"];
                this.columnSortCenterID = this.Columns["SortCenterID"];
                this.columnSortCenter = this.Columns["SortCenter"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnLocationID = this.Columns["LocationID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnAddress = this.Columns["Address"];
                this.columnOldPathMnemonic = this.Columns["OldPathMnemonic"];
                this.columnOldServiceMnemonic = this.Columns["OldServiceMnemonic"];
                this.columnPathID = this.Columns["PathID"];
                this.columnPathMnemonic = this.Columns["PathMnemonic"];
                this.columnPathLastStopMnemonic = this.Columns["PathLastStopMnemonic"];
                this.columnServiceID = this.Columns["ServiceID"];
                this.columnServiceMnemonic = this.Columns["ServiceMnemonic"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnSelected = new DataColumn("Selected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSelected);
                this.columnSortCenterID = new DataColumn("SortCenterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenterID);
                this.columnSortCenter = new DataColumn("SortCenter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenter);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnOldPathMnemonic = new DataColumn("OldPathMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOldPathMnemonic);
                this.columnOldServiceMnemonic = new DataColumn("OldServiceMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOldServiceMnemonic);
                this.columnPathID = new DataColumn("PathID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnPathMnemonic = new DataColumn("PathMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathMnemonic);
                this.columnPathLastStopMnemonic = new DataColumn("PathLastStopMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathLastStopMnemonic);
                this.columnServiceID = new DataColumn("ServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceID);
                this.columnServiceMnemonic = new DataColumn("ServiceMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceMnemonic);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnSortCenterID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnLocationID.AllowDBNull = false;
                this.columnOldPathMnemonic.AllowDBNull = false;
                this.columnOldServiceMnemonic.AllowDBNull = false;
                this.columnPathID.AllowDBNull = false;
                this.columnPathMnemonic.AllowDBNull = false;
                this.columnPathLastStopMnemonic.AllowDBNull = false;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceMnemonic.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public DeliveryLocationOverrideDetailTableRow NewDeliveryLocationOverrideDetailTableRow() {
                return ((DeliveryLocationOverrideDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DeliveryLocationOverrideDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DeliveryLocationOverrideDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeliveryLocationOverrideDetailTableRowChanged != null)) {
                    this.DeliveryLocationOverrideDetailTableRowChanged(this, new DeliveryLocationOverrideDetailTableRowChangeEvent(((DeliveryLocationOverrideDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeliveryLocationOverrideDetailTableRowChanging != null)) {
                    this.DeliveryLocationOverrideDetailTableRowChanging(this, new DeliveryLocationOverrideDetailTableRowChangeEvent(((DeliveryLocationOverrideDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeliveryLocationOverrideDetailTableRowDeleted != null)) {
                    this.DeliveryLocationOverrideDetailTableRowDeleted(this, new DeliveryLocationOverrideDetailTableRowChangeEvent(((DeliveryLocationOverrideDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeliveryLocationOverrideDetailTableRowDeleting != null)) {
                    this.DeliveryLocationOverrideDetailTableRowDeleting(this, new DeliveryLocationOverrideDetailTableRowChangeEvent(((DeliveryLocationOverrideDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDeliveryLocationOverrideDetailTableRow(DeliveryLocationOverrideDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideDetailTableRow : DataRow {
            
            private DeliveryLocationOverrideDetailTableDataTable tableDeliveryLocationOverrideDetailTable;
            
            internal DeliveryLocationOverrideDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeliveryLocationOverrideDetailTable = ((DeliveryLocationOverrideDetailTableDataTable)(this.Table));
            }
            
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDeliveryLocationOverrideDetailTable.SelectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.SelectedColumn] = value;
                }
            }
            
            public int SortCenterID {
                get {
                    return ((int)(this[this.tableDeliveryLocationOverrideDetailTable.SortCenterIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.SortCenterIDColumn] = value;
                }
            }
            
            public string SortCenter {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.SortCenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.SortCenterColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableDeliveryLocationOverrideDetailTable.ClientIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.ClientIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.ClientNameColumn] = value;
                }
            }
            
            public int LocationID {
                get {
                    return ((int)(this[this.tableDeliveryLocationOverrideDetailTable.LocationIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.LocationIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.DescriptionColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.AddressColumn] = value;
                }
            }
            
            public string OldPathMnemonic {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.OldPathMnemonicColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.OldPathMnemonicColumn] = value;
                }
            }
            
            public string OldServiceMnemonic {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.OldServiceMnemonicColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.OldServiceMnemonicColumn] = value;
                }
            }
            
            public string PathID {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.PathIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.PathIDColumn] = value;
                }
            }
            
            public string PathMnemonic {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.PathMnemonicColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.PathMnemonicColumn] = value;
                }
            }
            
            public string PathLastStopMnemonic {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.PathLastStopMnemonicColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.PathLastStopMnemonicColumn] = value;
                }
            }
            
            public int ServiceID {
                get {
                    return ((int)(this[this.tableDeliveryLocationOverrideDetailTable.ServiceIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.ServiceIDColumn] = value;
                }
            }
            
            public string ServiceMnemonic {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.ServiceMnemonicColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.ServiceMnemonicColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableDeliveryLocationOverrideDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableDeliveryLocationOverrideDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeliveryLocationOverrideDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.SelectedColumn);
            }
            
            public void SetSelectedNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.SelectedColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortCenterNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.SortCenterColumn);
            }
            
            public void SetSortCenterNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.SortCenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDeliveryLocationOverrideDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableDeliveryLocationOverrideDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeliveryLocationOverrideDetailTableRowChangeEvent : EventArgs {
            
            private DeliveryLocationOverrideDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DeliveryLocationOverrideDetailTableRowChangeEvent(DeliveryLocationOverrideDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DeliveryLocationOverrideDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
