//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class EnterpriseDS : DataSet {
        
        private EnterpriseListTableDataTable tableEnterpriseListTable;
        
        private EntTerminalViewTableDataTable tableEntTerminalViewTable;
        
        private EntTerminalDetailTableDataTable tableEntTerminalDetailTable;
        
        private AddressDetailTableDataTable tableAddressDetailTable;
        
        public EnterpriseDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected EnterpriseDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EnterpriseListTable"] != null)) {
                    this.Tables.Add(new EnterpriseListTableDataTable(ds.Tables["EnterpriseListTable"]));
                }
                if ((ds.Tables["EntTerminalViewTable"] != null)) {
                    this.Tables.Add(new EntTerminalViewTableDataTable(ds.Tables["EntTerminalViewTable"]));
                }
                if ((ds.Tables["EntTerminalDetailTable"] != null)) {
                    this.Tables.Add(new EntTerminalDetailTableDataTable(ds.Tables["EntTerminalDetailTable"]));
                }
                if ((ds.Tables["AddressDetailTable"] != null)) {
                    this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnterpriseListTableDataTable EnterpriseListTable {
            get {
                return this.tableEnterpriseListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntTerminalViewTableDataTable EntTerminalViewTable {
            get {
                return this.tableEntTerminalViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntTerminalDetailTableDataTable EntTerminalDetailTable {
            get {
                return this.tableEntTerminalDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDetailTableDataTable AddressDetailTable {
            get {
                return this.tableAddressDetailTable;
            }
        }
        
        public override DataSet Clone() {
            EnterpriseDS cln = ((EnterpriseDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["EnterpriseListTable"] != null)) {
                this.Tables.Add(new EnterpriseListTableDataTable(ds.Tables["EnterpriseListTable"]));
            }
            if ((ds.Tables["EntTerminalViewTable"] != null)) {
                this.Tables.Add(new EntTerminalViewTableDataTable(ds.Tables["EntTerminalViewTable"]));
            }
            if ((ds.Tables["EntTerminalDetailTable"] != null)) {
                this.Tables.Add(new EntTerminalDetailTableDataTable(ds.Tables["EntTerminalDetailTable"]));
            }
            if ((ds.Tables["AddressDetailTable"] != null)) {
                this.Tables.Add(new AddressDetailTableDataTable(ds.Tables["AddressDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableEnterpriseListTable = ((EnterpriseListTableDataTable)(this.Tables["EnterpriseListTable"]));
            if ((this.tableEnterpriseListTable != null)) {
                this.tableEnterpriseListTable.InitVars();
            }
            this.tableEntTerminalViewTable = ((EntTerminalViewTableDataTable)(this.Tables["EntTerminalViewTable"]));
            if ((this.tableEntTerminalViewTable != null)) {
                this.tableEntTerminalViewTable.InitVars();
            }
            this.tableEntTerminalDetailTable = ((EntTerminalDetailTableDataTable)(this.Tables["EntTerminalDetailTable"]));
            if ((this.tableEntTerminalDetailTable != null)) {
                this.tableEntTerminalDetailTable.InitVars();
            }
            this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Tables["AddressDetailTable"]));
            if ((this.tableAddressDetailTable != null)) {
                this.tableAddressDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "EnterpriseDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/EnterpriseDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableEnterpriseListTable = new EnterpriseListTableDataTable();
            this.Tables.Add(this.tableEnterpriseListTable);
            this.tableEntTerminalViewTable = new EntTerminalViewTableDataTable();
            this.Tables.Add(this.tableEntTerminalViewTable);
            this.tableEntTerminalDetailTable = new EntTerminalDetailTableDataTable();
            this.Tables.Add(this.tableEntTerminalDetailTable);
            this.tableAddressDetailTable = new AddressDetailTableDataTable();
            this.Tables.Add(this.tableAddressDetailTable);
        }
        
        private bool ShouldSerializeEnterpriseListTable() {
            return false;
        }
        
        private bool ShouldSerializeEntTerminalViewTable() {
            return false;
        }
        
        private bool ShouldSerializeEntTerminalDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeAddressDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void EnterpriseListTableRowChangeEventHandler(object sender, EnterpriseListTableRowChangeEvent e);
        
        public delegate void EntTerminalViewTableRowChangeEventHandler(object sender, EntTerminalViewTableRowChangeEvent e);
        
        public delegate void EntTerminalDetailTableRowChangeEventHandler(object sender, EntTerminalDetailTableRowChangeEvent e);
        
        public delegate void AddressDetailTableRowChangeEventHandler(object sender, AddressDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EnterpriseListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnCompanyName;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal EnterpriseListTableDataTable() : 
                    base("EnterpriseListTable") {
                this.InitClass();
            }
            
            internal EnterpriseListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public EnterpriseListTableRow this[int index] {
                get {
                    return ((EnterpriseListTableRow)(this.Rows[index]));
                }
            }
            
            public event EnterpriseListTableRowChangeEventHandler EnterpriseListTableRowChanged;
            
            public event EnterpriseListTableRowChangeEventHandler EnterpriseListTableRowChanging;
            
            public event EnterpriseListTableRowChangeEventHandler EnterpriseListTableRowDeleted;
            
            public event EnterpriseListTableRowChangeEventHandler EnterpriseListTableRowDeleting;
            
            public void AddEnterpriseListTableRow(EnterpriseListTableRow row) {
                this.Rows.Add(row);
            }
            
            public EnterpriseListTableRow AddEnterpriseListTableRow(int CompanyID, string CompanyName, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                EnterpriseListTableRow rowEnterpriseListTableRow = ((EnterpriseListTableRow)(this.NewRow()));
                rowEnterpriseListTableRow.ItemArray = new object[] {
                        CompanyID,
                        CompanyName,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowEnterpriseListTableRow);
                return rowEnterpriseListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EnterpriseListTableDataTable cln = ((EnterpriseListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EnterpriseListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnCompanyName = this.Columns["CompanyName"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyName);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public EnterpriseListTableRow NewEnterpriseListTableRow() {
                return ((EnterpriseListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EnterpriseListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EnterpriseListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnterpriseListTableRowChanged != null)) {
                    this.EnterpriseListTableRowChanged(this, new EnterpriseListTableRowChangeEvent(((EnterpriseListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnterpriseListTableRowChanging != null)) {
                    this.EnterpriseListTableRowChanging(this, new EnterpriseListTableRowChangeEvent(((EnterpriseListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnterpriseListTableRowDeleted != null)) {
                    this.EnterpriseListTableRowDeleted(this, new EnterpriseListTableRowChangeEvent(((EnterpriseListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnterpriseListTableRowDeleting != null)) {
                    this.EnterpriseListTableRowDeleting(this, new EnterpriseListTableRowChangeEvent(((EnterpriseListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEnterpriseListTableRow(EnterpriseListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EnterpriseListTableRow : DataRow {
            
            private EnterpriseListTableDataTable tableEnterpriseListTable;
            
            internal EnterpriseListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnterpriseListTable = ((EnterpriseListTableDataTable)(this.Table));
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableEnterpriseListTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.CompanyIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableEnterpriseListTable.CompanyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.CompanyNameColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableEnterpriseListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEnterpriseListTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableEnterpriseListTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableEnterpriseListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnterpriseListTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableEnterpriseListTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableEnterpriseListTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableEnterpriseListTable.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tableEnterpriseListTable.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableEnterpriseListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableEnterpriseListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableEnterpriseListTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableEnterpriseListTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableEnterpriseListTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableEnterpriseListTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableEnterpriseListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableEnterpriseListTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EnterpriseListTableRowChangeEvent : EventArgs {
            
            private EnterpriseListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public EnterpriseListTableRowChangeEvent(EnterpriseListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EnterpriseListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnStateProvinceName;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            internal EntTerminalViewTableDataTable() : 
                    base("EntTerminalViewTable") {
                this.InitClass();
            }
            
            internal EntTerminalViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn StateProvinceNameColumn {
                get {
                    return this.columnStateProvinceName;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            public EntTerminalViewTableRow this[int index] {
                get {
                    return ((EntTerminalViewTableRow)(this.Rows[index]));
                }
            }
            
            public event EntTerminalViewTableRowChangeEventHandler EntTerminalViewTableRowChanged;
            
            public event EntTerminalViewTableRowChangeEventHandler EntTerminalViewTableRowChanging;
            
            public event EntTerminalViewTableRowChangeEventHandler EntTerminalViewTableRowDeleted;
            
            public event EntTerminalViewTableRowChangeEventHandler EntTerminalViewTableRowDeleting;
            
            public void AddEntTerminalViewTableRow(EntTerminalViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public EntTerminalViewTableRow AddEntTerminalViewTableRow(
                        int LocationID, 
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        bool IsActive, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion, 
                        int AddressID, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string StateProvinceName, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country) {
                EntTerminalViewTableRow rowEntTerminalViewTableRow = ((EntTerminalViewTableRow)(this.NewRow()));
                rowEntTerminalViewTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        IsActive,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        AddressID,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        StateProvinceName,
                        PostalCode,
                        Region,
                        CountryID,
                        Country};
                this.Rows.Add(rowEntTerminalViewTableRow);
                return rowEntTerminalViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EntTerminalViewTableDataTable cln = ((EntTerminalViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EntTerminalViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnStateProvinceName = this.Columns["StateProvinceName"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnStateProvinceName = new DataColumn("StateProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateProvinceName);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
            }
            
            public EntTerminalViewTableRow NewEntTerminalViewTableRow() {
                return ((EntTerminalViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EntTerminalViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EntTerminalViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntTerminalViewTableRowChanged != null)) {
                    this.EntTerminalViewTableRowChanged(this, new EntTerminalViewTableRowChangeEvent(((EntTerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntTerminalViewTableRowChanging != null)) {
                    this.EntTerminalViewTableRowChanging(this, new EntTerminalViewTableRowChangeEvent(((EntTerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntTerminalViewTableRowDeleted != null)) {
                    this.EntTerminalViewTableRowDeleted(this, new EntTerminalViewTableRowChangeEvent(((EntTerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntTerminalViewTableRowDeleting != null)) {
                    this.EntTerminalViewTableRowDeleting(this, new EntTerminalViewTableRowChangeEvent(((EntTerminalViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEntTerminalViewTableRow(EntTerminalViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalViewTableRow : DataRow {
            
            private EntTerminalViewTableDataTable tableEntTerminalViewTable;
            
            internal EntTerminalViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntTerminalViewTable = ((EntTerminalViewTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalViewTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalViewTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalViewTable.LocationTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEntTerminalViewTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEntTerminalViewTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.EmailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableEntTerminalViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.IsActiveColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.MnemonicColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEntTerminalViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.RowVersionColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalViewTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string StateProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.StateProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.StateProvinceNameColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalViewTable.CountryColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableEntTerminalViewTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableEntTerminalViewTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableEntTerminalViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableEntTerminalViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationTypeIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.LocationTypeIDColumn);
            }
            
            public void SetLocationTypeIDNull() {
                this[this.tableEntTerminalViewTable.LocationTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableEntTerminalViewTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableEntTerminalViewTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableEntTerminalViewTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableEntTerminalViewTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableEntTerminalViewTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableEntTerminalViewTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableEntTerminalViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableEntTerminalViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableEntTerminalViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableEntTerminalViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableEntTerminalViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableEntTerminalViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableEntTerminalViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableEntTerminalViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableEntTerminalViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableEntTerminalViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableEntTerminalViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableEntTerminalViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableEntTerminalViewTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableEntTerminalViewTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableEntTerminalViewTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableEntTerminalViewTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableEntTerminalViewTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableEntTerminalViewTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableEntTerminalViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableEntTerminalViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableEntTerminalViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableEntTerminalViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableEntTerminalViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableEntTerminalViewTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableEntTerminalViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableEntTerminalViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableEntTerminalViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableEntTerminalViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableEntTerminalViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableEntTerminalViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableEntTerminalViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableEntTerminalViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateProvinceNameNull() {
                return this.IsNull(this.tableEntTerminalViewTable.StateProvinceNameColumn);
            }
            
            public void SetStateProvinceNameNull() {
                this[this.tableEntTerminalViewTable.StateProvinceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableEntTerminalViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableEntTerminalViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableEntTerminalViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableEntTerminalViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableEntTerminalViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableEntTerminalViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableEntTerminalViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableEntTerminalViewTable.CountryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalViewTableRowChangeEvent : EventArgs {
            
            private EntTerminalViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public EntTerminalViewTableRowChangeEvent(EntTerminalViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EntTerminalViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnOpenTime;
            
            private DataColumn columnCloseTime;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnSpecialInstructions;
            
            private DataColumn columnUserLabelData;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal EntTerminalDetailTableDataTable() : 
                    base("EntTerminalDetailTable") {
                this.InitClass();
            }
            
            internal EntTerminalDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OpenTimeColumn {
                get {
                    return this.columnOpenTime;
                }
            }
            
            internal DataColumn CloseTimeColumn {
                get {
                    return this.columnCloseTime;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn SpecialInstructionsColumn {
                get {
                    return this.columnSpecialInstructions;
                }
            }
            
            internal DataColumn UserLabelDataColumn {
                get {
                    return this.columnUserLabelData;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public EntTerminalDetailTableRow this[int index] {
                get {
                    return ((EntTerminalDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event EntTerminalDetailTableRowChangeEventHandler EntTerminalDetailTableRowChanged;
            
            public event EntTerminalDetailTableRowChangeEventHandler EntTerminalDetailTableRowChanging;
            
            public event EntTerminalDetailTableRowChangeEventHandler EntTerminalDetailTableRowDeleted;
            
            public event EntTerminalDetailTableRowChangeEventHandler EntTerminalDetailTableRowDeleting;
            
            public void AddEntTerminalDetailTableRow(EntTerminalDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public EntTerminalDetailTableRow AddEntTerminalDetailTableRow(
                        int LocationID, 
                        int CompanyID, 
                        string Number, 
                        int LocationTypeID, 
                        string Description, 
                        System.DateTime OpenTime, 
                        System.DateTime CloseTime, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        bool IsActive, 
                        string SpecialInstructions, 
                        string UserLabelData, 
                        string Mnemonic, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                EntTerminalDetailTableRow rowEntTerminalDetailTableRow = ((EntTerminalDetailTableRow)(this.NewRow()));
                rowEntTerminalDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        CompanyID,
                        Number,
                        LocationTypeID,
                        Description,
                        OpenTime,
                        CloseTime,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        IsActive,
                        SpecialInstructions,
                        UserLabelData,
                        Mnemonic,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowEntTerminalDetailTableRow);
                return rowEntTerminalDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EntTerminalDetailTableDataTable cln = ((EntTerminalDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EntTerminalDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnOpenTime = this.Columns["OpenTime"];
                this.columnCloseTime = this.Columns["CloseTime"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnSpecialInstructions = this.Columns["SpecialInstructions"];
                this.columnUserLabelData = this.Columns["UserLabelData"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnOpenTime = new DataColumn("OpenTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenTime);
                this.columnCloseTime = new DataColumn("CloseTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseTime);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnSpecialInstructions = new DataColumn("SpecialInstructions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialInstructions);
                this.columnUserLabelData = new DataColumn("UserLabelData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserLabelData);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public EntTerminalDetailTableRow NewEntTerminalDetailTableRow() {
                return ((EntTerminalDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EntTerminalDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EntTerminalDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntTerminalDetailTableRowChanged != null)) {
                    this.EntTerminalDetailTableRowChanged(this, new EntTerminalDetailTableRowChangeEvent(((EntTerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntTerminalDetailTableRowChanging != null)) {
                    this.EntTerminalDetailTableRowChanging(this, new EntTerminalDetailTableRowChangeEvent(((EntTerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntTerminalDetailTableRowDeleted != null)) {
                    this.EntTerminalDetailTableRowDeleted(this, new EntTerminalDetailTableRowChangeEvent(((EntTerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntTerminalDetailTableRowDeleting != null)) {
                    this.EntTerminalDetailTableRowDeleting(this, new EntTerminalDetailTableRowChangeEvent(((EntTerminalDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEntTerminalDetailTableRow(EntTerminalDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalDetailTableRow : DataRow {
            
            private EntTerminalDetailTableDataTable tableEntTerminalDetailTable;
            
            internal EntTerminalDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntTerminalDetailTable = ((EntTerminalDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableEntTerminalDetailTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.NumberColumn] = value;
                }
            }
            
            public int LocationTypeID {
                get {
                    return ((int)(this[this.tableEntTerminalDetailTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableEntTerminalDetailTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime OpenTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEntTerminalDetailTable.OpenTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.OpenTimeColumn] = value;
                }
            }
            
            public System.DateTime CloseTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEntTerminalDetailTable.CloseTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.CloseTimeColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.EmailColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableEntTerminalDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableEntTerminalDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string SpecialInstructions {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.SpecialInstructionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.SpecialInstructionsColumn] = value;
                }
            }
            
            public string UserLabelData {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.UserLabelDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.UserLabelDataColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.MnemonicColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableEntTerminalDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableEntTerminalDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableEntTerminalDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableEntTerminalDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableEntTerminalDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntTerminalDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableEntTerminalDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableEntTerminalDetailTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableEntTerminalDetailTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableEntTerminalDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenTimeNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.OpenTimeColumn);
            }
            
            public void SetOpenTimeNull() {
                this[this.tableEntTerminalDetailTable.OpenTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseTimeNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.CloseTimeColumn);
            }
            
            public void SetCloseTimeNull() {
                this[this.tableEntTerminalDetailTable.CloseTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableEntTerminalDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableEntTerminalDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableEntTerminalDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableEntTerminalDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableEntTerminalDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialInstructionsNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.SpecialInstructionsColumn);
            }
            
            public void SetSpecialInstructionsNull() {
                this[this.tableEntTerminalDetailTable.SpecialInstructionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLabelDataNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.UserLabelDataColumn);
            }
            
            public void SetUserLabelDataNull() {
                this[this.tableEntTerminalDetailTable.UserLabelDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableEntTerminalDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableEntTerminalDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableEntTerminalDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntTerminalDetailTableRowChangeEvent : EventArgs {
            
            private EntTerminalDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public EntTerminalDetailTableRowChangeEvent(EntTerminalDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EntTerminalDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationID;
            
            private DataColumn columnAddressID;
            
            private DataColumn columnAddressType;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal AddressDetailTableDataTable() : 
                    base("AddressDetailTable") {
                this.InitClass();
            }
            
            internal AddressDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn AddressTypeColumn {
                get {
                    return this.columnAddressType;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public AddressDetailTableRow this[int index] {
                get {
                    return ((AddressDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanged;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowChanging;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleted;
            
            public event AddressDetailTableRowChangeEventHandler AddressDetailTableRowDeleting;
            
            public void AddAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public AddressDetailTableRow AddAddressDetailTableRow(int LocationID, int AddressID, string AddressType, string AddressLine1, string AddressLine2, string City, string StateOrProvince, string PostalCode, string Region, int CountryID, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                AddressDetailTableRow rowAddressDetailTableRow = ((AddressDetailTableRow)(this.NewRow()));
                rowAddressDetailTableRow.ItemArray = new object[] {
                        LocationID,
                        AddressID,
                        AddressType,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowAddressDetailTableRow);
                return rowAddressDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDetailTableDataTable cln = ((AddressDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationID = this.Columns["LocationID"];
                this.columnAddressID = this.Columns["AddressID"];
                this.columnAddressType = this.Columns["AddressType"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnAddressType = new DataColumn("AddressType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressType);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnAddressType.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public AddressDetailTableRow NewAddressDetailTableRow() {
                return ((AddressDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressDetailTableRowChanged != null)) {
                    this.AddressDetailTableRowChanged(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressDetailTableRowChanging != null)) {
                    this.AddressDetailTableRowChanging(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressDetailTableRowDeleted != null)) {
                    this.AddressDetailTableRowDeleted(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressDetailTableRowDeleting != null)) {
                    this.AddressDetailTableRowDeleting(this, new AddressDetailTableRowChangeEvent(((AddressDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressDetailTableRow(AddressDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRow : DataRow {
            
            private AddressDetailTableDataTable tableAddressDetailTable;
            
            internal AddressDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressDetailTable = ((AddressDetailTableDataTable)(this.Table));
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.LocationIDColumn] = value;
                }
            }
            
            public int AddressID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.AddressIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressIDColumn] = value;
                }
            }
            
            public string AddressType {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressTypeColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressTypeColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableAddressDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableAddressDetailTable.CityColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableAddressDetailTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.CountryIDColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableAddressDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableAddressDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableAddressDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableAddressDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableAddressDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableAddressDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableAddressDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIDNull() {
                return this.IsNull(this.tableAddressDetailTable.AddressIDColumn);
            }
            
            public void SetAddressIDNull() {
                this[this.tableAddressDetailTable.AddressIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableAddressDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableAddressDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableAddressDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableAddressDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddressDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableAddressDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableAddressDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableAddressDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableAddressDetailTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableAddressDetailTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAddressDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableAddressDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDetailTableRowChangeEvent : EventArgs {
            
            private AddressDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressDetailTableRowChangeEvent(AddressDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
