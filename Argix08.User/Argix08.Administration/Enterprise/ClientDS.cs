//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ClientDS : DataSet {
        
        private ClientDetailTableDataTable tableClientDetailTable;
        
        private ClientListTableDataTable tableClientListTable;
        
        private ClientViewTableDataTable tableClientViewTable;
        
        private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
        
        private CVLocationDetailTableDataTable tableCVLocationDetailTable;
        
        private CVLocationSortProfileTableDataTable tableCVLocationSortProfileTable;
        
        private CVLocationSortProfileTerminalTableDataTable tableCVLocationSortProfileTerminalTable;
        
        private CVLocationNumberTableDataTable tableCVLocationNumberTable;
        
        private ClientTerminalTableDataTable tableClientTerminalTable;
        
        private DataRelation relationCVLocationSortProfileTable_CVLocationSortProfileTerminalTable;
        
        private DataRelation relationCVLocationDetailTable_CVLocationSortProfileTable;
        
        private DataRelation relationCVLocationDetailTable_CVLocationNumberTable;
        
        public ClientDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ClientDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientDetailTable"] != null)) {
                    this.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
                }
                if ((ds.Tables["ClientListTable"] != null)) {
                    this.Tables.Add(new ClientListTableDataTable(ds.Tables["ClientListTable"]));
                }
                if ((ds.Tables["ClientViewTable"] != null)) {
                    this.Tables.Add(new ClientViewTableDataTable(ds.Tables["ClientViewTable"]));
                }
                if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                    this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
                }
                if ((ds.Tables["CVLocationDetailTable"] != null)) {
                    this.Tables.Add(new CVLocationDetailTableDataTable(ds.Tables["CVLocationDetailTable"]));
                }
                if ((ds.Tables["CVLocationSortProfileTable"] != null)) {
                    this.Tables.Add(new CVLocationSortProfileTableDataTable(ds.Tables["CVLocationSortProfileTable"]));
                }
                if ((ds.Tables["CVLocationSortProfileTerminalTable"] != null)) {
                    this.Tables.Add(new CVLocationSortProfileTerminalTableDataTable(ds.Tables["CVLocationSortProfileTerminalTable"]));
                }
                if ((ds.Tables["CVLocationNumberTable"] != null)) {
                    this.Tables.Add(new CVLocationNumberTableDataTable(ds.Tables["CVLocationNumberTable"]));
                }
                if ((ds.Tables["ClientTerminalTable"] != null)) {
                    this.Tables.Add(new ClientTerminalTableDataTable(ds.Tables["ClientTerminalTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientDetailTableDataTable ClientDetailTable {
            get {
                return this.tableClientDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientListTableDataTable ClientListTable {
            get {
                return this.tableClientListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientViewTableDataTable ClientViewTable {
            get {
                return this.tableClientViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyPaymentServiceTableDataTable CompanyPaymentServiceTable {
            get {
                return this.tableCompanyPaymentServiceTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CVLocationDetailTableDataTable CVLocationDetailTable {
            get {
                return this.tableCVLocationDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CVLocationSortProfileTableDataTable CVLocationSortProfileTable {
            get {
                return this.tableCVLocationSortProfileTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CVLocationSortProfileTerminalTableDataTable CVLocationSortProfileTerminalTable {
            get {
                return this.tableCVLocationSortProfileTerminalTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CVLocationNumberTableDataTable CVLocationNumberTable {
            get {
                return this.tableCVLocationNumberTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientTerminalTableDataTable ClientTerminalTable {
            get {
                return this.tableClientTerminalTable;
            }
        }
        
        public override DataSet Clone() {
            ClientDS cln = ((ClientDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientDetailTable"] != null)) {
                this.Tables.Add(new ClientDetailTableDataTable(ds.Tables["ClientDetailTable"]));
            }
            if ((ds.Tables["ClientListTable"] != null)) {
                this.Tables.Add(new ClientListTableDataTable(ds.Tables["ClientListTable"]));
            }
            if ((ds.Tables["ClientViewTable"] != null)) {
                this.Tables.Add(new ClientViewTableDataTable(ds.Tables["ClientViewTable"]));
            }
            if ((ds.Tables["CompanyPaymentServiceTable"] != null)) {
                this.Tables.Add(new CompanyPaymentServiceTableDataTable(ds.Tables["CompanyPaymentServiceTable"]));
            }
            if ((ds.Tables["CVLocationDetailTable"] != null)) {
                this.Tables.Add(new CVLocationDetailTableDataTable(ds.Tables["CVLocationDetailTable"]));
            }
            if ((ds.Tables["CVLocationSortProfileTable"] != null)) {
                this.Tables.Add(new CVLocationSortProfileTableDataTable(ds.Tables["CVLocationSortProfileTable"]));
            }
            if ((ds.Tables["CVLocationSortProfileTerminalTable"] != null)) {
                this.Tables.Add(new CVLocationSortProfileTerminalTableDataTable(ds.Tables["CVLocationSortProfileTerminalTable"]));
            }
            if ((ds.Tables["CVLocationNumberTable"] != null)) {
                this.Tables.Add(new CVLocationNumberTableDataTable(ds.Tables["CVLocationNumberTable"]));
            }
            if ((ds.Tables["ClientTerminalTable"] != null)) {
                this.Tables.Add(new ClientTerminalTableDataTable(ds.Tables["ClientTerminalTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientDetailTable = ((ClientDetailTableDataTable)(this.Tables["ClientDetailTable"]));
            if ((this.tableClientDetailTable != null)) {
                this.tableClientDetailTable.InitVars();
            }
            this.tableClientListTable = ((ClientListTableDataTable)(this.Tables["ClientListTable"]));
            if ((this.tableClientListTable != null)) {
                this.tableClientListTable.InitVars();
            }
            this.tableClientViewTable = ((ClientViewTableDataTable)(this.Tables["ClientViewTable"]));
            if ((this.tableClientViewTable != null)) {
                this.tableClientViewTable.InitVars();
            }
            this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Tables["CompanyPaymentServiceTable"]));
            if ((this.tableCompanyPaymentServiceTable != null)) {
                this.tableCompanyPaymentServiceTable.InitVars();
            }
            this.tableCVLocationDetailTable = ((CVLocationDetailTableDataTable)(this.Tables["CVLocationDetailTable"]));
            if ((this.tableCVLocationDetailTable != null)) {
                this.tableCVLocationDetailTable.InitVars();
            }
            this.tableCVLocationSortProfileTable = ((CVLocationSortProfileTableDataTable)(this.Tables["CVLocationSortProfileTable"]));
            if ((this.tableCVLocationSortProfileTable != null)) {
                this.tableCVLocationSortProfileTable.InitVars();
            }
            this.tableCVLocationSortProfileTerminalTable = ((CVLocationSortProfileTerminalTableDataTable)(this.Tables["CVLocationSortProfileTerminalTable"]));
            if ((this.tableCVLocationSortProfileTerminalTable != null)) {
                this.tableCVLocationSortProfileTerminalTable.InitVars();
            }
            this.tableCVLocationNumberTable = ((CVLocationNumberTableDataTable)(this.Tables["CVLocationNumberTable"]));
            if ((this.tableCVLocationNumberTable != null)) {
                this.tableCVLocationNumberTable.InitVars();
            }
            this.tableClientTerminalTable = ((ClientTerminalTableDataTable)(this.Tables["ClientTerminalTable"]));
            if ((this.tableClientTerminalTable != null)) {
                this.tableClientTerminalTable.InitVars();
            }
            this.relationCVLocationSortProfileTable_CVLocationSortProfileTerminalTable = this.Relations["CVLocationSortProfileTable_CVLocationSortProfileTerminalTable"];
            this.relationCVLocationDetailTable_CVLocationSortProfileTable = this.Relations["CVLocationDetailTable_CVLocationSortProfileTable"];
            this.relationCVLocationDetailTable_CVLocationNumberTable = this.Relations["CVLocationDetailTable_CVLocationNumberTable"];
        }
        
        private void InitClass() {
            this.DataSetName = "ClientDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ClientDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientDetailTable = new ClientDetailTableDataTable();
            this.Tables.Add(this.tableClientDetailTable);
            this.tableClientListTable = new ClientListTableDataTable();
            this.Tables.Add(this.tableClientListTable);
            this.tableClientViewTable = new ClientViewTableDataTable();
            this.Tables.Add(this.tableClientViewTable);
            this.tableCompanyPaymentServiceTable = new CompanyPaymentServiceTableDataTable();
            this.Tables.Add(this.tableCompanyPaymentServiceTable);
            this.tableCVLocationDetailTable = new CVLocationDetailTableDataTable();
            this.Tables.Add(this.tableCVLocationDetailTable);
            this.tableCVLocationSortProfileTable = new CVLocationSortProfileTableDataTable();
            this.Tables.Add(this.tableCVLocationSortProfileTable);
            this.tableCVLocationSortProfileTerminalTable = new CVLocationSortProfileTerminalTableDataTable();
            this.Tables.Add(this.tableCVLocationSortProfileTerminalTable);
            this.tableCVLocationNumberTable = new CVLocationNumberTableDataTable();
            this.Tables.Add(this.tableCVLocationNumberTable);
            this.tableClientTerminalTable = new ClientTerminalTableDataTable();
            this.Tables.Add(this.tableClientTerminalTable);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("CVLocationDetailTable_CVLocationSortProfileTable", new DataColumn[] {
                        this.tableCVLocationDetailTable.CVLocationDetailTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationSortProfileTable.CVLocationDetailTable_IdColumn});
            this.tableCVLocationSortProfileTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CVLocationSortProfileTable_CVLocationSortProfileTerminalTable", new DataColumn[] {
                        this.tableCVLocationSortProfileTable.CVLocationSortProfileTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationSortProfileTerminalTable.CVLocationSortProfileTable_IdColumn});
            this.tableCVLocationSortProfileTerminalTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CVLocationDetailTable_CVLocationNumberTable", new DataColumn[] {
                        this.tableCVLocationDetailTable.CVLocationDetailTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationNumberTable.CVLocationDetailTable_IdColumn});
            this.tableCVLocationNumberTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationCVLocationSortProfileTable_CVLocationSortProfileTerminalTable = new DataRelation("CVLocationSortProfileTable_CVLocationSortProfileTerminalTable", new DataColumn[] {
                        this.tableCVLocationSortProfileTable.CVLocationSortProfileTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationSortProfileTerminalTable.CVLocationSortProfileTable_IdColumn}, false);
            this.relationCVLocationSortProfileTable_CVLocationSortProfileTerminalTable.Nested = true;
            this.Relations.Add(this.relationCVLocationSortProfileTable_CVLocationSortProfileTerminalTable);
            this.relationCVLocationDetailTable_CVLocationSortProfileTable = new DataRelation("CVLocationDetailTable_CVLocationSortProfileTable", new DataColumn[] {
                        this.tableCVLocationDetailTable.CVLocationDetailTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationSortProfileTable.CVLocationDetailTable_IdColumn}, false);
            this.relationCVLocationDetailTable_CVLocationSortProfileTable.Nested = true;
            this.Relations.Add(this.relationCVLocationDetailTable_CVLocationSortProfileTable);
            this.relationCVLocationDetailTable_CVLocationNumberTable = new DataRelation("CVLocationDetailTable_CVLocationNumberTable", new DataColumn[] {
                        this.tableCVLocationDetailTable.CVLocationDetailTable_IdColumn}, new DataColumn[] {
                        this.tableCVLocationNumberTable.CVLocationDetailTable_IdColumn}, false);
            this.relationCVLocationDetailTable_CVLocationNumberTable.Nested = true;
            this.Relations.Add(this.relationCVLocationDetailTable_CVLocationNumberTable);
        }
        
        private bool ShouldSerializeClientDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeClientListTable() {
            return false;
        }
        
        private bool ShouldSerializeClientViewTable() {
            return false;
        }
        
        private bool ShouldSerializeCompanyPaymentServiceTable() {
            return false;
        }
        
        private bool ShouldSerializeCVLocationDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeCVLocationSortProfileTable() {
            return false;
        }
        
        private bool ShouldSerializeCVLocationSortProfileTerminalTable() {
            return false;
        }
        
        private bool ShouldSerializeCVLocationNumberTable() {
            return false;
        }
        
        private bool ShouldSerializeClientTerminalTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientDetailTableRowChangeEventHandler(object sender, ClientDetailTableRowChangeEvent e);
        
        public delegate void ClientListTableRowChangeEventHandler(object sender, ClientListTableRowChangeEvent e);
        
        public delegate void ClientViewTableRowChangeEventHandler(object sender, ClientViewTableRowChangeEvent e);
        
        public delegate void CompanyPaymentServiceTableRowChangeEventHandler(object sender, CompanyPaymentServiceTableRowChangeEvent e);
        
        public delegate void CVLocationDetailTableRowChangeEventHandler(object sender, CVLocationDetailTableRowChangeEvent e);
        
        public delegate void CVLocationSortProfileTableRowChangeEventHandler(object sender, CVLocationSortProfileTableRowChangeEvent e);
        
        public delegate void CVLocationSortProfileTerminalTableRowChangeEventHandler(object sender, CVLocationSortProfileTerminalTableRowChangeEvent e);
        
        public delegate void CVLocationNumberTableRowChangeEventHandler(object sender, CVLocationNumberTableRowChangeEvent e);
        
        public delegate void ClientTerminalTableRowChangeEventHandler(object sender, ClientTerminalTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal ClientDetailTableDataTable() : 
                    base("ClientDetailTable") {
                this.InitClass();
            }
            
            internal ClientDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public ClientDetailTableRow this[int index] {
                get {
                    return ((ClientDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanged;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowChanging;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleted;
            
            public event ClientDetailTableRowChangeEventHandler ClientDetailTableRowDeleting;
            
            public void AddClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientDetailTableRow AddClientDetailTableRow(
                        int ClientID, 
                        string ClientName, 
                        string Number, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Mnemonic, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                ClientDetailTableRow rowClientDetailTableRow = ((ClientDetailTableRow)(this.NewRow()));
                rowClientDetailTableRow.ItemArray = new object[] {
                        ClientID,
                        ClientName,
                        Number,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Mnemonic,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowClientDetailTableRow);
                return rowClientDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientDetailTableDataTable cln = ((ClientDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnNumber = this.Columns["Number"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnClientName.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public ClientDetailTableRow NewClientDetailTableRow() {
                return ((ClientDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientDetailTableRowChanged != null)) {
                    this.ClientDetailTableRowChanged(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientDetailTableRowChanging != null)) {
                    this.ClientDetailTableRowChanging(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientDetailTableRowDeleted != null)) {
                    this.ClientDetailTableRowDeleted(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientDetailTableRowDeleting != null)) {
                    this.ClientDetailTableRowDeleting(this, new ClientDetailTableRowChangeEvent(((ClientDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientDetailTableRow(ClientDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableRow : DataRow {
            
            private ClientDetailTableDataTable tableClientDetailTable;
            
            internal ClientDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientDetailTable = ((ClientDetailTableDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientDetailTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ClientIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    return ((string)(this[this.tableClientDetailTable.ClientNameColumn]));
                }
                set {
                    this[this.tableClientDetailTable.ClientNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableClientDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableClientDetailTable.NumberColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableClientDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableClientDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableClientDetailTable.CityColumn]));
                }
                set {
                    this[this.tableClientDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tableClientDetailTable.CountryIDColumn]));
                }
                set {
                    this[this.tableClientDetailTable.CountryIDColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.MnemonicColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableClientDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableClientDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableClientDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableClientDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableClientDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableClientDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableClientDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientDetailTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableClientDetailTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableClientDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableClientDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableClientDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableClientDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableClientDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableClientDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableClientDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableClientDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableClientDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableClientDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableClientDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableClientDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableClientDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableClientDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableClientDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableClientDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableClientDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableClientDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableClientDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableClientDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableClientDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableClientDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientDetailTableRowChangeEvent : EventArgs {
            
            private ClientDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientDetailTableRowChangeEvent(ClientDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnCompanyName;
            
            internal ClientListTableDataTable() : 
                    base("ClientListTable") {
                this.InitClass();
            }
            
            internal ClientListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            public ClientListTableRow this[int index] {
                get {
                    return ((ClientListTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientListTableRowChangeEventHandler ClientListTableRowChanged;
            
            public event ClientListTableRowChangeEventHandler ClientListTableRowChanging;
            
            public event ClientListTableRowChangeEventHandler ClientListTableRowDeleted;
            
            public event ClientListTableRowChangeEventHandler ClientListTableRowDeleting;
            
            public void AddClientListTableRow(ClientListTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientListTableRow AddClientListTableRow(int CompanyID, string Number, string CompanyName) {
                ClientListTableRow rowClientListTableRow = ((ClientListTableRow)(this.NewRow()));
                rowClientListTableRow.ItemArray = new object[] {
                        CompanyID,
                        Number,
                        CompanyName};
                this.Rows.Add(rowClientListTableRow);
                return rowClientListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientListTableDataTable cln = ((ClientListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnNumber = this.Columns["Number"];
                this.columnCompanyName = this.Columns["CompanyName"];
            }
            
            private void InitClass() {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyName);
            }
            
            public ClientListTableRow NewClientListTableRow() {
                return ((ClientListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientListTableRowChanged != null)) {
                    this.ClientListTableRowChanged(this, new ClientListTableRowChangeEvent(((ClientListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientListTableRowChanging != null)) {
                    this.ClientListTableRowChanging(this, new ClientListTableRowChangeEvent(((ClientListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientListTableRowDeleted != null)) {
                    this.ClientListTableRowDeleted(this, new ClientListTableRowChangeEvent(((ClientListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientListTableRowDeleting != null)) {
                    this.ClientListTableRowDeleting(this, new ClientListTableRowChangeEvent(((ClientListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientListTableRow(ClientListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientListTableRow : DataRow {
            
            private ClientListTableDataTable tableClientListTable;
            
            internal ClientListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientListTable = ((ClientListTableDataTable)(this.Table));
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableClientListTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientListTable.CompanyIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableClientListTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientListTable.NumberColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableClientListTable.CompanyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientListTable.CompanyNameColumn] = value;
                }
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableClientListTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableClientListTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableClientListTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableClientListTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableClientListTable.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tableClientListTable.CompanyNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientListTableRowChangeEvent : EventArgs {
            
            private ClientListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientListTableRowChangeEvent(ClientListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal ClientViewTableDataTable() : 
                    base("ClientViewTable") {
                this.InitClass();
            }
            
            internal ClientViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public ClientViewTableRow this[int index] {
                get {
                    return ((ClientViewTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientViewTableRowChangeEventHandler ClientViewTableRowChanged;
            
            public event ClientViewTableRowChangeEventHandler ClientViewTableRowChanging;
            
            public event ClientViewTableRowChangeEventHandler ClientViewTableRowDeleted;
            
            public event ClientViewTableRowChangeEventHandler ClientViewTableRowDeleting;
            
            public void AddClientViewTableRow(ClientViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientViewTableRow AddClientViewTableRow(
                        int ClientID, 
                        string ClientName, 
                        string Number, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                ClientViewTableRow rowClientViewTableRow = ((ClientViewTableRow)(this.NewRow()));
                rowClientViewTableRow.ItemArray = new object[] {
                        ClientID,
                        ClientName,
                        Number,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowClientViewTableRow);
                return rowClientViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientViewTableDataTable cln = ((ClientViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public ClientViewTableRow NewClientViewTableRow() {
                return ((ClientViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientViewTableRowChanged != null)) {
                    this.ClientViewTableRowChanged(this, new ClientViewTableRowChangeEvent(((ClientViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientViewTableRowChanging != null)) {
                    this.ClientViewTableRowChanging(this, new ClientViewTableRowChangeEvent(((ClientViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientViewTableRowDeleted != null)) {
                    this.ClientViewTableRowDeleted(this, new ClientViewTableRowChangeEvent(((ClientViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientViewTableRowDeleting != null)) {
                    this.ClientViewTableRowDeleting(this, new ClientViewTableRowChangeEvent(((ClientViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientViewTableRow(ClientViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientViewTableRow : DataRow {
            
            private ClientViewTableDataTable tableClientViewTable;
            
            internal ClientViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientViewTable = ((ClientViewTableDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientViewTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.ClientIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.ClientNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableClientViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableClientViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableClientViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientViewTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableClientViewTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableClientViewTable.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableClientViewTable.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableClientViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableClientViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableClientViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableClientViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableClientViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableClientViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableClientViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableClientViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableClientViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableClientViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableClientViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableClientViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableClientViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableClientViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableClientViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableClientViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableClientViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableClientViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableClientViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableClientViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableClientViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableClientViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableClientViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableClientViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableClientViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableClientViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableClientViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableClientViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableClientViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableClientViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableClientViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableClientViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableClientViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableClientViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableClientViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableClientViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientViewTableRowChangeEvent : EventArgs {
            
            private ClientViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientViewTableRowChangeEvent(ClientViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnPaymentServiceID;
            
            private DataColumn columnPaymentServiceName;
            
            private DataColumn columnPaymentServiceNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnComments;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal CompanyPaymentServiceTableDataTable() : 
                    base("CompanyPaymentServiceTable") {
                this.InitClass();
            }
            
            internal CompanyPaymentServiceTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn PaymentServiceIDColumn {
                get {
                    return this.columnPaymentServiceID;
                }
            }
            
            internal DataColumn PaymentServiceNameColumn {
                get {
                    return this.columnPaymentServiceName;
                }
            }
            
            internal DataColumn PaymentServiceNumberColumn {
                get {
                    return this.columnPaymentServiceNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CompanyPaymentServiceTableRow this[int index] {
                get {
                    return ((CompanyPaymentServiceTableRow)(this.Rows[index]));
                }
            }
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanged;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowChanging;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleted;
            
            public event CompanyPaymentServiceTableRowChangeEventHandler CompanyPaymentServiceTableRowDeleting;
            
            public void AddCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Add(row);
            }
            
            public CompanyPaymentServiceTableRow AddCompanyPaymentServiceTableRow(int CompanyID, int PaymentServiceID, string PaymentServiceName, string PaymentServiceNumber, bool IsActive, string Comments, System.DateTime LastUpdated, string UserID, string RowVersion) {
                CompanyPaymentServiceTableRow rowCompanyPaymentServiceTableRow = ((CompanyPaymentServiceTableRow)(this.NewRow()));
                rowCompanyPaymentServiceTableRow.ItemArray = new object[] {
                        CompanyID,
                        PaymentServiceID,
                        PaymentServiceName,
                        PaymentServiceNumber,
                        IsActive,
                        Comments,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowCompanyPaymentServiceTableRow);
                return rowCompanyPaymentServiceTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompanyPaymentServiceTableDataTable cln = ((CompanyPaymentServiceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompanyPaymentServiceTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnPaymentServiceID = this.Columns["PaymentServiceID"];
                this.columnPaymentServiceName = this.Columns["PaymentServiceName"];
                this.columnPaymentServiceNumber = this.Columns["PaymentServiceNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnComments = this.Columns["Comments"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnPaymentServiceID = new DataColumn("PaymentServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceID);
                this.columnPaymentServiceName = new DataColumn("PaymentServiceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceName);
                this.columnPaymentServiceNumber = new DataColumn("PaymentServiceNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnComments = new DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComments);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public CompanyPaymentServiceTableRow NewCompanyPaymentServiceTableRow() {
                return ((CompanyPaymentServiceTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompanyPaymentServiceTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompanyPaymentServiceTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyPaymentServiceTableRowChanged != null)) {
                    this.CompanyPaymentServiceTableRowChanged(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyPaymentServiceTableRowChanging != null)) {
                    this.CompanyPaymentServiceTableRowChanging(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyPaymentServiceTableRowDeleted != null)) {
                    this.CompanyPaymentServiceTableRowDeleted(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyPaymentServiceTableRowDeleting != null)) {
                    this.CompanyPaymentServiceTableRowDeleting(this, new CompanyPaymentServiceTableRowChangeEvent(((CompanyPaymentServiceTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompanyPaymentServiceTableRow(CompanyPaymentServiceTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRow : DataRow {
            
            private CompanyPaymentServiceTableDataTable tableCompanyPaymentServiceTable;
            
            internal CompanyPaymentServiceTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanyPaymentServiceTable = ((CompanyPaymentServiceTableDataTable)(this.Table));
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = value;
                }
            }
            
            public int PaymentServiceID {
                get {
                    try {
                        return ((int)(this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = value;
                }
            }
            
            public string PaymentServiceName {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = value;
                }
            }
            
            public string PaymentServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCompanyPaymentServiceTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.CommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.CommentsColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPaymentServiceTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableCompanyPaymentServiceTable.CompanyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn);
            }
            
            public void SetPaymentServiceIDNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNameNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn);
            }
            
            public void SetPaymentServiceNameNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNumberNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn);
            }
            
            public void SetPaymentServiceNumberNull() {
                this[this.tableCompanyPaymentServiceTable.PaymentServiceNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCompanyPaymentServiceTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableCompanyPaymentServiceTable.CommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCompanyPaymentServiceTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCompanyPaymentServiceTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCompanyPaymentServiceTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCompanyPaymentServiceTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompanyPaymentServiceTableRowChangeEvent : EventArgs {
            
            private CompanyPaymentServiceTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompanyPaymentServiceTableRowChangeEvent(CompanyPaymentServiceTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompanyPaymentServiceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLinkID;
            
            private DataColumn columnClientID;
            
            private DataColumn columnVendorID;
            
            private DataColumn columnVendorName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnCVLocationDetailTable_Id;
            
            internal CVLocationDetailTableDataTable() : 
                    base("CVLocationDetailTable") {
                this.InitClass();
            }
            
            internal CVLocationDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn VendorIDColumn {
                get {
                    return this.columnVendorID;
                }
            }
            
            internal DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn CVLocationDetailTable_IdColumn {
                get {
                    return this.columnCVLocationDetailTable_Id;
                }
            }
            
            public CVLocationDetailTableRow this[int index] {
                get {
                    return ((CVLocationDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event CVLocationDetailTableRowChangeEventHandler CVLocationDetailTableRowChanged;
            
            public event CVLocationDetailTableRowChangeEventHandler CVLocationDetailTableRowChanging;
            
            public event CVLocationDetailTableRowChangeEventHandler CVLocationDetailTableRowDeleted;
            
            public event CVLocationDetailTableRowChangeEventHandler CVLocationDetailTableRowDeleting;
            
            public void AddCVLocationDetailTableRow(CVLocationDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public CVLocationDetailTableRow AddCVLocationDetailTableRow(int LinkID, int ClientID, int VendorID, string VendorName, string Number, int LocationID, string Description, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                CVLocationDetailTableRow rowCVLocationDetailTableRow = ((CVLocationDetailTableRow)(this.NewRow()));
                rowCVLocationDetailTableRow.ItemArray = new object[] {
                        LinkID,
                        ClientID,
                        VendorID,
                        VendorName,
                        Number,
                        LocationID,
                        Description,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        null};
                this.Rows.Add(rowCVLocationDetailTableRow);
                return rowCVLocationDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CVLocationDetailTableDataTable cln = ((CVLocationDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CVLocationDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLinkID = this.Columns["LinkID"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnVendorID = this.Columns["VendorID"];
                this.columnVendorName = this.Columns["VendorName"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationID = this.Columns["LocationID"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnCVLocationDetailTable_Id = this.Columns["CVLocationDetailTable_Id"];
            }
            
            private void InitClass() {
                this.columnLinkID = new DataColumn("LinkID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinkID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnVendorID = new DataColumn("VendorID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorID);
                this.columnVendorName = new DataColumn("VendorName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVendorName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCVLocationDetailTable_Id = new DataColumn("CVLocationDetailTable_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCVLocationDetailTable_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCVLocationDetailTable_Id}, true));
                this.columnCVLocationDetailTable_Id.AutoIncrement = true;
                this.columnCVLocationDetailTable_Id.AllowDBNull = false;
                this.columnCVLocationDetailTable_Id.Unique = true;
            }
            
            public CVLocationDetailTableRow NewCVLocationDetailTableRow() {
                return ((CVLocationDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CVLocationDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CVLocationDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CVLocationDetailTableRowChanged != null)) {
                    this.CVLocationDetailTableRowChanged(this, new CVLocationDetailTableRowChangeEvent(((CVLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CVLocationDetailTableRowChanging != null)) {
                    this.CVLocationDetailTableRowChanging(this, new CVLocationDetailTableRowChangeEvent(((CVLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CVLocationDetailTableRowDeleted != null)) {
                    this.CVLocationDetailTableRowDeleted(this, new CVLocationDetailTableRowChangeEvent(((CVLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CVLocationDetailTableRowDeleting != null)) {
                    this.CVLocationDetailTableRowDeleting(this, new CVLocationDetailTableRowChangeEvent(((CVLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCVLocationDetailTableRow(CVLocationDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationDetailTableRow : DataRow {
            
            private CVLocationDetailTableDataTable tableCVLocationDetailTable;
            
            internal CVLocationDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCVLocationDetailTable = ((CVLocationDetailTableDataTable)(this.Table));
            }
            
            public int LinkID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationDetailTable.LinkIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.LinkIDColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationDetailTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.ClientIDColumn] = value;
                }
            }
            
            public int VendorID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationDetailTable.VendorIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.VendorIDColumn] = value;
                }
            }
            
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationDetailTable.VendorNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.VendorNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationDetailTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.NumberColumn] = value;
                }
            }
            
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationDetailTable.LocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.LocationIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCVLocationDetailTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCVLocationDetailTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationDetailTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLinkIDNull() {
                return this.IsNull(this.tableCVLocationDetailTable.LinkIDColumn);
            }
            
            public void SetLinkIDNull() {
                this[this.tableCVLocationDetailTable.LinkIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCVLocationDetailTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableCVLocationDetailTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendorIDNull() {
                return this.IsNull(this.tableCVLocationDetailTable.VendorIDColumn);
            }
            
            public void SetVendorIDNull() {
                this[this.tableCVLocationDetailTable.VendorIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableCVLocationDetailTable.VendorNameColumn);
            }
            
            public void SetVendorNameNull() {
                this[this.tableCVLocationDetailTable.VendorNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableCVLocationDetailTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableCVLocationDetailTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableCVLocationDetailTable.LocationIDColumn);
            }
            
            public void SetLocationIDNull() {
                this[this.tableCVLocationDetailTable.LocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCVLocationDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableCVLocationDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCVLocationDetailTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCVLocationDetailTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCVLocationDetailTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCVLocationDetailTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCVLocationDetailTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCVLocationDetailTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCVLocationDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCVLocationDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public CVLocationSortProfileTableRow[] GetCVLocationSortProfileTableRows() {
                return ((CVLocationSortProfileTableRow[])(this.GetChildRows(this.Table.ChildRelations["CVLocationDetailTable_CVLocationSortProfileTable"])));
            }
            
            public CVLocationNumberTableRow[] GetCVLocationNumberTableRows() {
                return ((CVLocationNumberTableRow[])(this.GetChildRows(this.Table.ChildRelations["CVLocationDetailTable_CVLocationNumberTable"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationDetailTableRowChangeEvent : EventArgs {
            
            private CVLocationDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CVLocationDetailTableRowChangeEvent(CVLocationDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CVLocationDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProfileID;
            
            private DataColumn columnLinkID;
            
            private DataColumn columnLabelID;
            
            private DataColumn columnSortType;
            
            private DataColumn columnSortTypeID;
            
            private DataColumn columnIsElectronic;
            
            private DataColumn columnManifestPerTrailer;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnCVLocationSortProfileTable_Id;
            
            private DataColumn columnCVLocationDetailTable_Id;
            
            internal CVLocationSortProfileTableDataTable() : 
                    base("CVLocationSortProfileTable") {
                this.InitClass();
            }
            
            internal CVLocationSortProfileTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProfileIDColumn {
                get {
                    return this.columnProfileID;
                }
            }
            
            internal DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn SortTypeColumn {
                get {
                    return this.columnSortType;
                }
            }
            
            internal DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            internal DataColumn IsElectronicColumn {
                get {
                    return this.columnIsElectronic;
                }
            }
            
            internal DataColumn ManifestPerTrailerColumn {
                get {
                    return this.columnManifestPerTrailer;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn CVLocationSortProfileTable_IdColumn {
                get {
                    return this.columnCVLocationSortProfileTable_Id;
                }
            }
            
            internal DataColumn CVLocationDetailTable_IdColumn {
                get {
                    return this.columnCVLocationDetailTable_Id;
                }
            }
            
            public CVLocationSortProfileTableRow this[int index] {
                get {
                    return ((CVLocationSortProfileTableRow)(this.Rows[index]));
                }
            }
            
            public event CVLocationSortProfileTableRowChangeEventHandler CVLocationSortProfileTableRowChanged;
            
            public event CVLocationSortProfileTableRowChangeEventHandler CVLocationSortProfileTableRowChanging;
            
            public event CVLocationSortProfileTableRowChangeEventHandler CVLocationSortProfileTableRowDeleted;
            
            public event CVLocationSortProfileTableRowChangeEventHandler CVLocationSortProfileTableRowDeleting;
            
            public void AddCVLocationSortProfileTableRow(CVLocationSortProfileTableRow row) {
                this.Rows.Add(row);
            }
            
            public CVLocationSortProfileTableRow AddCVLocationSortProfileTableRow(long ProfileID, int LinkID, int LabelID, string SortType, int SortTypeID, bool IsElectronic, string ManifestPerTrailer, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion, CVLocationDetailTableRow parentCVLocationDetailTableRowByCVLocationDetailTable_CVLocationSortProfileTable) {
                CVLocationSortProfileTableRow rowCVLocationSortProfileTableRow = ((CVLocationSortProfileTableRow)(this.NewRow()));
                rowCVLocationSortProfileTableRow.ItemArray = new object[] {
                        ProfileID,
                        LinkID,
                        LabelID,
                        SortType,
                        SortTypeID,
                        IsElectronic,
                        ManifestPerTrailer,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        null,
                        parentCVLocationDetailTableRowByCVLocationDetailTable_CVLocationSortProfileTable[11]};
                this.Rows.Add(rowCVLocationSortProfileTableRow);
                return rowCVLocationSortProfileTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CVLocationSortProfileTableDataTable cln = ((CVLocationSortProfileTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CVLocationSortProfileTableDataTable();
            }
            
            internal void InitVars() {
                this.columnProfileID = this.Columns["ProfileID"];
                this.columnLinkID = this.Columns["LinkID"];
                this.columnLabelID = this.Columns["LabelID"];
                this.columnSortType = this.Columns["SortType"];
                this.columnSortTypeID = this.Columns["SortTypeID"];
                this.columnIsElectronic = this.Columns["IsElectronic"];
                this.columnManifestPerTrailer = this.Columns["ManifestPerTrailer"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnCVLocationSortProfileTable_Id = this.Columns["CVLocationSortProfileTable_Id"];
                this.columnCVLocationDetailTable_Id = this.Columns["CVLocationDetailTable_Id"];
            }
            
            private void InitClass() {
                this.columnProfileID = new DataColumn("ProfileID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProfileID);
                this.columnLinkID = new DataColumn("LinkID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinkID);
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnSortType = new DataColumn("SortType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortType);
                this.columnSortTypeID = new DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortTypeID);
                this.columnIsElectronic = new DataColumn("IsElectronic", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsElectronic);
                this.columnManifestPerTrailer = new DataColumn("ManifestPerTrailer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnManifestPerTrailer);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCVLocationSortProfileTable_Id = new DataColumn("CVLocationSortProfileTable_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCVLocationSortProfileTable_Id);
                this.columnCVLocationDetailTable_Id = new DataColumn("CVLocationDetailTable_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCVLocationDetailTable_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCVLocationSortProfileTable_Id}, true));
                this.columnCVLocationSortProfileTable_Id.AutoIncrement = true;
                this.columnCVLocationSortProfileTable_Id.AllowDBNull = false;
                this.columnCVLocationSortProfileTable_Id.Unique = true;
            }
            
            public CVLocationSortProfileTableRow NewCVLocationSortProfileTableRow() {
                return ((CVLocationSortProfileTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CVLocationSortProfileTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CVLocationSortProfileTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CVLocationSortProfileTableRowChanged != null)) {
                    this.CVLocationSortProfileTableRowChanged(this, new CVLocationSortProfileTableRowChangeEvent(((CVLocationSortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CVLocationSortProfileTableRowChanging != null)) {
                    this.CVLocationSortProfileTableRowChanging(this, new CVLocationSortProfileTableRowChangeEvent(((CVLocationSortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CVLocationSortProfileTableRowDeleted != null)) {
                    this.CVLocationSortProfileTableRowDeleted(this, new CVLocationSortProfileTableRowChangeEvent(((CVLocationSortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CVLocationSortProfileTableRowDeleting != null)) {
                    this.CVLocationSortProfileTableRowDeleting(this, new CVLocationSortProfileTableRowChangeEvent(((CVLocationSortProfileTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCVLocationSortProfileTableRow(CVLocationSortProfileTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTableRow : DataRow {
            
            private CVLocationSortProfileTableDataTable tableCVLocationSortProfileTable;
            
            internal CVLocationSortProfileTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCVLocationSortProfileTable = ((CVLocationSortProfileTableDataTable)(this.Table));
            }
            
            public long ProfileID {
                get {
                    try {
                        return ((long)(this[this.tableCVLocationSortProfileTable.ProfileIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.ProfileIDColumn] = value;
                }
            }
            
            public int LinkID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationSortProfileTable.LinkIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.LinkIDColumn] = value;
                }
            }
            
            public int LabelID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationSortProfileTable.LabelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.LabelIDColumn] = value;
                }
            }
            
            public string SortType {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationSortProfileTable.SortTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.SortTypeColumn] = value;
                }
            }
            
            public int SortTypeID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationSortProfileTable.SortTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.SortTypeIDColumn] = value;
                }
            }
            
            public bool IsElectronic {
                get {
                    try {
                        return ((bool)(this[this.tableCVLocationSortProfileTable.IsElectronicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.IsElectronicColumn] = value;
                }
            }
            
            public string ManifestPerTrailer {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationSortProfileTable.ManifestPerTrailerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.ManifestPerTrailerColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCVLocationSortProfileTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCVLocationSortProfileTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationSortProfileTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationSortProfileTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTable.RowVersionColumn] = value;
                }
            }
            
            public CVLocationDetailTableRow CVLocationDetailTableRow {
                get {
                    return ((CVLocationDetailTableRow)(this.GetParentRow(this.Table.ParentRelations["CVLocationDetailTable_CVLocationSortProfileTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CVLocationDetailTable_CVLocationSortProfileTable"]);
                }
            }
            
            public bool IsProfileIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.ProfileIDColumn);
            }
            
            public void SetProfileIDNull() {
                this[this.tableCVLocationSortProfileTable.ProfileIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLinkIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.LinkIDColumn);
            }
            
            public void SetLinkIDNull() {
                this[this.tableCVLocationSortProfileTable.LinkIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLabelIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.LabelIDColumn);
            }
            
            public void SetLabelIDNull() {
                this[this.tableCVLocationSortProfileTable.LabelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortTypeNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.SortTypeColumn);
            }
            
            public void SetSortTypeNull() {
                this[this.tableCVLocationSortProfileTable.SortTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSortTypeIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.SortTypeIDColumn);
            }
            
            public void SetSortTypeIDNull() {
                this[this.tableCVLocationSortProfileTable.SortTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsElectronicNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.IsElectronicColumn);
            }
            
            public void SetIsElectronicNull() {
                this[this.tableCVLocationSortProfileTable.IsElectronicColumn] = System.Convert.DBNull;
            }
            
            public bool IsManifestPerTrailerNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.ManifestPerTrailerColumn);
            }
            
            public void SetManifestPerTrailerNull() {
                this[this.tableCVLocationSortProfileTable.ManifestPerTrailerColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCVLocationSortProfileTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCVLocationSortProfileTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCVLocationSortProfileTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCVLocationSortProfileTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCVLocationSortProfileTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public CVLocationSortProfileTerminalTableRow[] GetCVLocationSortProfileTerminalTableRows() {
                return ((CVLocationSortProfileTerminalTableRow[])(this.GetChildRows(this.Table.ChildRelations["CVLocationSortProfileTable_CVLocationSortProfileTerminalTable"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTableRowChangeEvent : EventArgs {
            
            private CVLocationSortProfileTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CVLocationSortProfileTableRowChangeEvent(CVLocationSortProfileTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CVLocationSortProfileTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTerminalTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProfileID;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnCVLocationSortProfileTable_Id;
            
            internal CVLocationSortProfileTerminalTableDataTable() : 
                    base("CVLocationSortProfileTerminalTable") {
                this.InitClass();
            }
            
            internal CVLocationSortProfileTerminalTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProfileIDColumn {
                get {
                    return this.columnProfileID;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn CVLocationSortProfileTable_IdColumn {
                get {
                    return this.columnCVLocationSortProfileTable_Id;
                }
            }
            
            public CVLocationSortProfileTerminalTableRow this[int index] {
                get {
                    return ((CVLocationSortProfileTerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event CVLocationSortProfileTerminalTableRowChangeEventHandler CVLocationSortProfileTerminalTableRowChanged;
            
            public event CVLocationSortProfileTerminalTableRowChangeEventHandler CVLocationSortProfileTerminalTableRowChanging;
            
            public event CVLocationSortProfileTerminalTableRowChangeEventHandler CVLocationSortProfileTerminalTableRowDeleted;
            
            public event CVLocationSortProfileTerminalTableRowChangeEventHandler CVLocationSortProfileTerminalTableRowDeleting;
            
            public void AddCVLocationSortProfileTerminalTableRow(CVLocationSortProfileTerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            public CVLocationSortProfileTerminalTableRow AddCVLocationSortProfileTerminalTableRow(long ProfileID, int TerminalID, string Terminal, CVLocationSortProfileTableRow parentCVLocationSortProfileTableRowByCVLocationSortProfileTable_CVLocationSortProfileTerminalTable) {
                CVLocationSortProfileTerminalTableRow rowCVLocationSortProfileTerminalTableRow = ((CVLocationSortProfileTerminalTableRow)(this.NewRow()));
                rowCVLocationSortProfileTerminalTableRow.ItemArray = new object[] {
                        ProfileID,
                        TerminalID,
                        Terminal,
                        parentCVLocationSortProfileTableRowByCVLocationSortProfileTable_CVLocationSortProfileTerminalTable[11]};
                this.Rows.Add(rowCVLocationSortProfileTerminalTableRow);
                return rowCVLocationSortProfileTerminalTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CVLocationSortProfileTerminalTableDataTable cln = ((CVLocationSortProfileTerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CVLocationSortProfileTerminalTableDataTable();
            }
            
            internal void InitVars() {
                this.columnProfileID = this.Columns["ProfileID"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnCVLocationSortProfileTable_Id = this.Columns["CVLocationSortProfileTable_Id"];
            }
            
            private void InitClass() {
                this.columnProfileID = new DataColumn("ProfileID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProfileID);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnCVLocationSortProfileTable_Id = new DataColumn("CVLocationSortProfileTable_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCVLocationSortProfileTable_Id);
            }
            
            public CVLocationSortProfileTerminalTableRow NewCVLocationSortProfileTerminalTableRow() {
                return ((CVLocationSortProfileTerminalTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CVLocationSortProfileTerminalTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CVLocationSortProfileTerminalTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CVLocationSortProfileTerminalTableRowChanged != null)) {
                    this.CVLocationSortProfileTerminalTableRowChanged(this, new CVLocationSortProfileTerminalTableRowChangeEvent(((CVLocationSortProfileTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CVLocationSortProfileTerminalTableRowChanging != null)) {
                    this.CVLocationSortProfileTerminalTableRowChanging(this, new CVLocationSortProfileTerminalTableRowChangeEvent(((CVLocationSortProfileTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CVLocationSortProfileTerminalTableRowDeleted != null)) {
                    this.CVLocationSortProfileTerminalTableRowDeleted(this, new CVLocationSortProfileTerminalTableRowChangeEvent(((CVLocationSortProfileTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CVLocationSortProfileTerminalTableRowDeleting != null)) {
                    this.CVLocationSortProfileTerminalTableRowDeleting(this, new CVLocationSortProfileTerminalTableRowChangeEvent(((CVLocationSortProfileTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCVLocationSortProfileTerminalTableRow(CVLocationSortProfileTerminalTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTerminalTableRow : DataRow {
            
            private CVLocationSortProfileTerminalTableDataTable tableCVLocationSortProfileTerminalTable;
            
            internal CVLocationSortProfileTerminalTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCVLocationSortProfileTerminalTable = ((CVLocationSortProfileTerminalTableDataTable)(this.Table));
            }
            
            public long ProfileID {
                get {
                    try {
                        return ((long)(this[this.tableCVLocationSortProfileTerminalTable.ProfileIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTerminalTable.ProfileIDColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationSortProfileTerminalTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTerminalTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationSortProfileTerminalTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationSortProfileTerminalTable.TerminalColumn] = value;
                }
            }
            
            public CVLocationSortProfileTableRow CVLocationSortProfileTableRow {
                get {
                    return ((CVLocationSortProfileTableRow)(this.GetParentRow(this.Table.ParentRelations["CVLocationSortProfileTable_CVLocationSortProfileTerminalTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CVLocationSortProfileTable_CVLocationSortProfileTerminalTable"]);
                }
            }
            
            public bool IsProfileIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTerminalTable.ProfileIDColumn);
            }
            
            public void SetProfileIDNull() {
                this[this.tableCVLocationSortProfileTerminalTable.ProfileIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableCVLocationSortProfileTerminalTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableCVLocationSortProfileTerminalTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableCVLocationSortProfileTerminalTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableCVLocationSortProfileTerminalTable.TerminalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationSortProfileTerminalTableRowChangeEvent : EventArgs {
            
            private CVLocationSortProfileTerminalTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CVLocationSortProfileTerminalTableRowChangeEvent(CVLocationSortProfileTerminalTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CVLocationSortProfileTerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationNumberTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLinkID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnCVLocationDetailTable_Id;
            
            internal CVLocationNumberTableDataTable() : 
                    base("CVLocationNumberTable") {
                this.InitClass();
            }
            
            internal CVLocationNumberTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn CVLocationDetailTable_IdColumn {
                get {
                    return this.columnCVLocationDetailTable_Id;
                }
            }
            
            public CVLocationNumberTableRow this[int index] {
                get {
                    return ((CVLocationNumberTableRow)(this.Rows[index]));
                }
            }
            
            public event CVLocationNumberTableRowChangeEventHandler CVLocationNumberTableRowChanged;
            
            public event CVLocationNumberTableRowChangeEventHandler CVLocationNumberTableRowChanging;
            
            public event CVLocationNumberTableRowChangeEventHandler CVLocationNumberTableRowDeleted;
            
            public event CVLocationNumberTableRowChangeEventHandler CVLocationNumberTableRowDeleting;
            
            public void AddCVLocationNumberTableRow(CVLocationNumberTableRow row) {
                this.Rows.Add(row);
            }
            
            public CVLocationNumberTableRow AddCVLocationNumberTableRow(int LinkID, string Number, CVLocationDetailTableRow parentCVLocationDetailTableRowByCVLocationDetailTable_CVLocationNumberTable) {
                CVLocationNumberTableRow rowCVLocationNumberTableRow = ((CVLocationNumberTableRow)(this.NewRow()));
                rowCVLocationNumberTableRow.ItemArray = new object[] {
                        LinkID,
                        Number,
                        parentCVLocationDetailTableRowByCVLocationDetailTable_CVLocationNumberTable[11]};
                this.Rows.Add(rowCVLocationNumberTableRow);
                return rowCVLocationNumberTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CVLocationNumberTableDataTable cln = ((CVLocationNumberTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CVLocationNumberTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLinkID = this.Columns["LinkID"];
                this.columnNumber = this.Columns["Number"];
                this.columnCVLocationDetailTable_Id = this.Columns["CVLocationDetailTable_Id"];
            }
            
            private void InitClass() {
                this.columnLinkID = new DataColumn("LinkID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinkID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnCVLocationDetailTable_Id = new DataColumn("CVLocationDetailTable_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCVLocationDetailTable_Id);
            }
            
            public CVLocationNumberTableRow NewCVLocationNumberTableRow() {
                return ((CVLocationNumberTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CVLocationNumberTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CVLocationNumberTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CVLocationNumberTableRowChanged != null)) {
                    this.CVLocationNumberTableRowChanged(this, new CVLocationNumberTableRowChangeEvent(((CVLocationNumberTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CVLocationNumberTableRowChanging != null)) {
                    this.CVLocationNumberTableRowChanging(this, new CVLocationNumberTableRowChangeEvent(((CVLocationNumberTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CVLocationNumberTableRowDeleted != null)) {
                    this.CVLocationNumberTableRowDeleted(this, new CVLocationNumberTableRowChangeEvent(((CVLocationNumberTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CVLocationNumberTableRowDeleting != null)) {
                    this.CVLocationNumberTableRowDeleting(this, new CVLocationNumberTableRowChangeEvent(((CVLocationNumberTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCVLocationNumberTableRow(CVLocationNumberTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationNumberTableRow : DataRow {
            
            private CVLocationNumberTableDataTable tableCVLocationNumberTable;
            
            internal CVLocationNumberTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCVLocationNumberTable = ((CVLocationNumberTableDataTable)(this.Table));
            }
            
            public int LinkID {
                get {
                    try {
                        return ((int)(this[this.tableCVLocationNumberTable.LinkIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationNumberTable.LinkIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableCVLocationNumberTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCVLocationNumberTable.NumberColumn] = value;
                }
            }
            
            public CVLocationDetailTableRow CVLocationDetailTableRow {
                get {
                    return ((CVLocationDetailTableRow)(this.GetParentRow(this.Table.ParentRelations["CVLocationDetailTable_CVLocationNumberTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CVLocationDetailTable_CVLocationNumberTable"]);
                }
            }
            
            public bool IsLinkIDNull() {
                return this.IsNull(this.tableCVLocationNumberTable.LinkIDColumn);
            }
            
            public void SetLinkIDNull() {
                this[this.tableCVLocationNumberTable.LinkIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableCVLocationNumberTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableCVLocationNumberTable.NumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CVLocationNumberTableRowChangeEvent : EventArgs {
            
            private CVLocationNumberTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CVLocationNumberTableRowChangeEvent(CVLocationNumberTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CVLocationNumberTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminalName;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            internal ClientTerminalTableDataTable() : 
                    base("ClientTerminalTable") {
                this.InitClass();
            }
            
            internal ClientTerminalTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            public ClientTerminalTableRow this[int index] {
                get {
                    return ((ClientTerminalTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowChanged;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowChanging;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowDeleted;
            
            public event ClientTerminalTableRowChangeEventHandler ClientTerminalTableRowDeleting;
            
            public void AddClientTerminalTableRow(ClientTerminalTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClientTerminalTableRow AddClientTerminalTableRow(int ClientID, int TerminalID, string TerminalName, System.DateTime LastUpdated, string UserID) {
                ClientTerminalTableRow rowClientTerminalTableRow = ((ClientTerminalTableRow)(this.NewRow()));
                rowClientTerminalTableRow.ItemArray = new object[] {
                        ClientID,
                        TerminalID,
                        TerminalName,
                        LastUpdated,
                        UserID};
                this.Rows.Add(rowClientTerminalTableRow);
                return rowClientTerminalTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientTerminalTableDataTable cln = ((ClientTerminalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientTerminalTableDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminalName = this.Columns["TerminalName"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminalName = new DataColumn("TerminalName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalName);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
            }
            
            public ClientTerminalTableRow NewClientTerminalTableRow() {
                return ((ClientTerminalTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientTerminalTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientTerminalTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientTerminalTableRowChanged != null)) {
                    this.ClientTerminalTableRowChanged(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientTerminalTableRowChanging != null)) {
                    this.ClientTerminalTableRowChanging(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientTerminalTableRowDeleted != null)) {
                    this.ClientTerminalTableRowDeleted(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientTerminalTableRowDeleting != null)) {
                    this.ClientTerminalTableRowDeleting(this, new ClientTerminalTableRowChangeEvent(((ClientTerminalTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientTerminalTableRow(ClientTerminalTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableRow : DataRow {
            
            private ClientTerminalTableDataTable tableClientTerminalTable;
            
            internal ClientTerminalTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientTerminalTable = ((ClientTerminalTableDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableClientTerminalTable.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.ClientIDColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableClientTerminalTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.TerminalIDColumn] = value;
                }
            }
            
            public string TerminalName {
                get {
                    try {
                        return ((string)(this[this.tableClientTerminalTable.TerminalNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.TerminalNameColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientTerminalTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableClientTerminalTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTerminalTable.UserIDColumn] = value;
                }
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableClientTerminalTable.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableClientTerminalTable.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableClientTerminalTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableClientTerminalTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNameNull() {
                return this.IsNull(this.tableClientTerminalTable.TerminalNameColumn);
            }
            
            public void SetTerminalNameNull() {
                this[this.tableClientTerminalTable.TerminalNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableClientTerminalTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableClientTerminalTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableClientTerminalTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableClientTerminalTable.UserIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientTerminalTableRowChangeEvent : EventArgs {
            
            private ClientTerminalTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientTerminalTableRowChangeEvent(ClientTerminalTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientTerminalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
