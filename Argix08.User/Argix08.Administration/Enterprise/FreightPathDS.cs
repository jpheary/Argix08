//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class FreightPathDS : DataSet {
        
        private FreightPathViewTableDataTable tableFreightPathViewTable;
        
        private FreightPathDetailTableDataTable tableFreightPathDetailTable;
        
        private FreightPathStopDetailTableDataTable tableFreightPathStopDetailTable;
        
        public FreightPathDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected FreightPathDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FreightPathViewTable"] != null)) {
                    this.Tables.Add(new FreightPathViewTableDataTable(ds.Tables["FreightPathViewTable"]));
                }
                if ((ds.Tables["FreightPathDetailTable"] != null)) {
                    this.Tables.Add(new FreightPathDetailTableDataTable(ds.Tables["FreightPathDetailTable"]));
                }
                if ((ds.Tables["FreightPathStopDetailTable"] != null)) {
                    this.Tables.Add(new FreightPathStopDetailTableDataTable(ds.Tables["FreightPathStopDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FreightPathViewTableDataTable FreightPathViewTable {
            get {
                return this.tableFreightPathViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FreightPathDetailTableDataTable FreightPathDetailTable {
            get {
                return this.tableFreightPathDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FreightPathStopDetailTableDataTable FreightPathStopDetailTable {
            get {
                return this.tableFreightPathStopDetailTable;
            }
        }
        
        public override DataSet Clone() {
            FreightPathDS cln = ((FreightPathDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FreightPathViewTable"] != null)) {
                this.Tables.Add(new FreightPathViewTableDataTable(ds.Tables["FreightPathViewTable"]));
            }
            if ((ds.Tables["FreightPathDetailTable"] != null)) {
                this.Tables.Add(new FreightPathDetailTableDataTable(ds.Tables["FreightPathDetailTable"]));
            }
            if ((ds.Tables["FreightPathStopDetailTable"] != null)) {
                this.Tables.Add(new FreightPathStopDetailTableDataTable(ds.Tables["FreightPathStopDetailTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFreightPathViewTable = ((FreightPathViewTableDataTable)(this.Tables["FreightPathViewTable"]));
            if ((this.tableFreightPathViewTable != null)) {
                this.tableFreightPathViewTable.InitVars();
            }
            this.tableFreightPathDetailTable = ((FreightPathDetailTableDataTable)(this.Tables["FreightPathDetailTable"]));
            if ((this.tableFreightPathDetailTable != null)) {
                this.tableFreightPathDetailTable.InitVars();
            }
            this.tableFreightPathStopDetailTable = ((FreightPathStopDetailTableDataTable)(this.Tables["FreightPathStopDetailTable"]));
            if ((this.tableFreightPathStopDetailTable != null)) {
                this.tableFreightPathStopDetailTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "FreightPathDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/FreightPathDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFreightPathViewTable = new FreightPathViewTableDataTable();
            this.Tables.Add(this.tableFreightPathViewTable);
            this.tableFreightPathDetailTable = new FreightPathDetailTableDataTable();
            this.Tables.Add(this.tableFreightPathDetailTable);
            this.tableFreightPathStopDetailTable = new FreightPathStopDetailTableDataTable();
            this.Tables.Add(this.tableFreightPathStopDetailTable);
        }
        
        private bool ShouldSerializeFreightPathViewTable() {
            return false;
        }
        
        private bool ShouldSerializeFreightPathDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeFreightPathStopDetailTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FreightPathViewTableRowChangeEventHandler(object sender, FreightPathViewTableRowChangeEvent e);
        
        public delegate void FreightPathDetailTableRowChangeEventHandler(object sender, FreightPathDetailTableRowChangeEvent e);
        
        public delegate void FreightPathStopDetailTableRowChangeEventHandler(object sender, FreightPathStopDetailTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPathID;
            
            private DataColumn columnSortCenterID;
            
            private DataColumn columnSortCenter;
            
            private DataColumn columnPathType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnSecondaryMnemonic;
            
            private DataColumn columnFinalStop;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal FreightPathViewTableDataTable() : 
                    base("FreightPathViewTable") {
                this.InitClass();
            }
            
            internal FreightPathViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn SortCenterIDColumn {
                get {
                    return this.columnSortCenterID;
                }
            }
            
            internal DataColumn SortCenterColumn {
                get {
                    return this.columnSortCenter;
                }
            }
            
            internal DataColumn PathTypeColumn {
                get {
                    return this.columnPathType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn SecondaryMnemonicColumn {
                get {
                    return this.columnSecondaryMnemonic;
                }
            }
            
            internal DataColumn FinalStopColumn {
                get {
                    return this.columnFinalStop;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public FreightPathViewTableRow this[int index] {
                get {
                    return ((FreightPathViewTableRow)(this.Rows[index]));
                }
            }
            
            public event FreightPathViewTableRowChangeEventHandler FreightPathViewTableRowChanged;
            
            public event FreightPathViewTableRowChangeEventHandler FreightPathViewTableRowChanging;
            
            public event FreightPathViewTableRowChangeEventHandler FreightPathViewTableRowDeleted;
            
            public event FreightPathViewTableRowChangeEventHandler FreightPathViewTableRowDeleting;
            
            public void AddFreightPathViewTableRow(FreightPathViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public FreightPathViewTableRow AddFreightPathViewTableRow(string PathID, int SortCenterID, string SortCenter, string PathType, string Description, string Mnemonic, string SecondaryMnemonic, string FinalStop, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                FreightPathViewTableRow rowFreightPathViewTableRow = ((FreightPathViewTableRow)(this.NewRow()));
                rowFreightPathViewTableRow.ItemArray = new object[] {
                        PathID,
                        SortCenterID,
                        SortCenter,
                        PathType,
                        Description,
                        Mnemonic,
                        SecondaryMnemonic,
                        FinalStop,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowFreightPathViewTableRow);
                return rowFreightPathViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FreightPathViewTableDataTable cln = ((FreightPathViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FreightPathViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnPathID = this.Columns["PathID"];
                this.columnSortCenterID = this.Columns["SortCenterID"];
                this.columnSortCenter = this.Columns["SortCenter"];
                this.columnPathType = this.Columns["PathType"];
                this.columnDescription = this.Columns["Description"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnSecondaryMnemonic = this.Columns["SecondaryMnemonic"];
                this.columnFinalStop = this.Columns["FinalStop"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnPathID = new DataColumn("PathID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnSortCenterID = new DataColumn("SortCenterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenterID);
                this.columnSortCenter = new DataColumn("SortCenter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenter);
                this.columnPathType = new DataColumn("PathType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnSecondaryMnemonic = new DataColumn("SecondaryMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondaryMnemonic);
                this.columnFinalStop = new DataColumn("FinalStop", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFinalStop);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnPathID.AllowDBNull = false;
                this.columnSortCenterID.AllowDBNull = false;
                this.columnSortCenter.AllowDBNull = false;
                this.columnPathType.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnFinalStop.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            public FreightPathViewTableRow NewFreightPathViewTableRow() {
                return ((FreightPathViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FreightPathViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FreightPathViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FreightPathViewTableRowChanged != null)) {
                    this.FreightPathViewTableRowChanged(this, new FreightPathViewTableRowChangeEvent(((FreightPathViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FreightPathViewTableRowChanging != null)) {
                    this.FreightPathViewTableRowChanging(this, new FreightPathViewTableRowChangeEvent(((FreightPathViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FreightPathViewTableRowDeleted != null)) {
                    this.FreightPathViewTableRowDeleted(this, new FreightPathViewTableRowChangeEvent(((FreightPathViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FreightPathViewTableRowDeleting != null)) {
                    this.FreightPathViewTableRowDeleting(this, new FreightPathViewTableRowChangeEvent(((FreightPathViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFreightPathViewTableRow(FreightPathViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathViewTableRow : DataRow {
            
            private FreightPathViewTableDataTable tableFreightPathViewTable;
            
            internal FreightPathViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFreightPathViewTable = ((FreightPathViewTableDataTable)(this.Table));
            }
            
            public string PathID {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.PathIDColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.PathIDColumn] = value;
                }
            }
            
            public int SortCenterID {
                get {
                    return ((int)(this[this.tableFreightPathViewTable.SortCenterIDColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.SortCenterIDColumn] = value;
                }
            }
            
            public string SortCenter {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.SortCenterColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.SortCenterColumn] = value;
                }
            }
            
            public string PathType {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.PathTypeColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.PathTypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.DescriptionColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.DescriptionColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.MnemonicColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.MnemonicColumn] = value;
                }
            }
            
            public string SecondaryMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableFreightPathViewTable.SecondaryMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathViewTable.SecondaryMnemonicColumn] = value;
                }
            }
            
            public string FinalStop {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.FinalStopColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.FinalStopColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableFreightPathViewTable.IsActiveColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableFreightPathViewTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableFreightPathViewTable.UserIDColumn]));
                }
                set {
                    this[this.tableFreightPathViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableFreightPathViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsSecondaryMnemonicNull() {
                return this.IsNull(this.tableFreightPathViewTable.SecondaryMnemonicColumn);
            }
            
            public void SetSecondaryMnemonicNull() {
                this[this.tableFreightPathViewTable.SecondaryMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFreightPathViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableFreightPathViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathViewTableRowChangeEvent : EventArgs {
            
            private FreightPathViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public FreightPathViewTableRowChangeEvent(FreightPathViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FreightPathViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPathID;
            
            private DataColumn columnSortCenterID;
            
            private DataColumn columnPathType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal FreightPathDetailTableDataTable() : 
                    base("FreightPathDetailTable") {
                this.InitClass();
            }
            
            internal FreightPathDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn SortCenterIDColumn {
                get {
                    return this.columnSortCenterID;
                }
            }
            
            internal DataColumn PathTypeColumn {
                get {
                    return this.columnPathType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public FreightPathDetailTableRow this[int index] {
                get {
                    return ((FreightPathDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event FreightPathDetailTableRowChangeEventHandler FreightPathDetailTableRowChanged;
            
            public event FreightPathDetailTableRowChangeEventHandler FreightPathDetailTableRowChanging;
            
            public event FreightPathDetailTableRowChangeEventHandler FreightPathDetailTableRowDeleted;
            
            public event FreightPathDetailTableRowChangeEventHandler FreightPathDetailTableRowDeleting;
            
            public void AddFreightPathDetailTableRow(FreightPathDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public FreightPathDetailTableRow AddFreightPathDetailTableRow(string PathID, int SortCenterID, string PathType, string Description, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                FreightPathDetailTableRow rowFreightPathDetailTableRow = ((FreightPathDetailTableRow)(this.NewRow()));
                rowFreightPathDetailTableRow.ItemArray = new object[] {
                        PathID,
                        SortCenterID,
                        PathType,
                        Description,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowFreightPathDetailTableRow);
                return rowFreightPathDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FreightPathDetailTableDataTable cln = ((FreightPathDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FreightPathDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnPathID = this.Columns["PathID"];
                this.columnSortCenterID = this.Columns["SortCenterID"];
                this.columnPathType = this.Columns["PathType"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnPathID = new DataColumn("PathID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnSortCenterID = new DataColumn("SortCenterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortCenterID);
                this.columnPathType = new DataColumn("PathType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnPathID.AllowDBNull = false;
                this.columnSortCenterID.AllowDBNull = false;
                this.columnPathType.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            public FreightPathDetailTableRow NewFreightPathDetailTableRow() {
                return ((FreightPathDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FreightPathDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FreightPathDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FreightPathDetailTableRowChanged != null)) {
                    this.FreightPathDetailTableRowChanged(this, new FreightPathDetailTableRowChangeEvent(((FreightPathDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FreightPathDetailTableRowChanging != null)) {
                    this.FreightPathDetailTableRowChanging(this, new FreightPathDetailTableRowChangeEvent(((FreightPathDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FreightPathDetailTableRowDeleted != null)) {
                    this.FreightPathDetailTableRowDeleted(this, new FreightPathDetailTableRowChangeEvent(((FreightPathDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FreightPathDetailTableRowDeleting != null)) {
                    this.FreightPathDetailTableRowDeleting(this, new FreightPathDetailTableRowChangeEvent(((FreightPathDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFreightPathDetailTableRow(FreightPathDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathDetailTableRow : DataRow {
            
            private FreightPathDetailTableDataTable tableFreightPathDetailTable;
            
            internal FreightPathDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFreightPathDetailTable = ((FreightPathDetailTableDataTable)(this.Table));
            }
            
            public string PathID {
                get {
                    return ((string)(this[this.tableFreightPathDetailTable.PathIDColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.PathIDColumn] = value;
                }
            }
            
            public int SortCenterID {
                get {
                    return ((int)(this[this.tableFreightPathDetailTable.SortCenterIDColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.SortCenterIDColumn] = value;
                }
            }
            
            public string PathType {
                get {
                    return ((string)(this[this.tableFreightPathDetailTable.PathTypeColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.PathTypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableFreightPathDetailTable.DescriptionColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableFreightPathDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableFreightPathDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableFreightPathDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableFreightPathDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableFreightPathDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFreightPathDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableFreightPathDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathDetailTableRowChangeEvent : EventArgs {
            
            private FreightPathDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public FreightPathDetailTableRowChangeEvent(FreightPathDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FreightPathDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathStopDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPathStopID;
            
            private DataColumn columnPathID;
            
            private DataColumn columnStopNumber;
            
            private DataColumn columnLocationID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLocationType;
            
            private DataColumn columnMnemonic;
            
            private DataColumn columnAddress;
            
            private DataColumn columnCompanyID;
            
            private DataColumn columnCompanyName;
            
            private DataColumn columnIsFinal;
            
            private DataColumn columnUseMnemonic;
            
            private DataColumn columnUseMnemonic2;
            
            internal FreightPathStopDetailTableDataTable() : 
                    base("FreightPathStopDetailTable") {
                this.InitClass();
            }
            
            internal FreightPathStopDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PathStopIDColumn {
                get {
                    return this.columnPathStopID;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn StopNumberColumn {
                get {
                    return this.columnStopNumber;
                }
            }
            
            internal DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LocationTypeColumn {
                get {
                    return this.columnLocationType;
                }
            }
            
            internal DataColumn MnemonicColumn {
                get {
                    return this.columnMnemonic;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            internal DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal DataColumn IsFinalColumn {
                get {
                    return this.columnIsFinal;
                }
            }
            
            internal DataColumn UseMnemonicColumn {
                get {
                    return this.columnUseMnemonic;
                }
            }
            
            internal DataColumn UseMnemonic2Column {
                get {
                    return this.columnUseMnemonic2;
                }
            }
            
            public FreightPathStopDetailTableRow this[int index] {
                get {
                    return ((FreightPathStopDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event FreightPathStopDetailTableRowChangeEventHandler FreightPathStopDetailTableRowChanged;
            
            public event FreightPathStopDetailTableRowChangeEventHandler FreightPathStopDetailTableRowChanging;
            
            public event FreightPathStopDetailTableRowChangeEventHandler FreightPathStopDetailTableRowDeleted;
            
            public event FreightPathStopDetailTableRowChangeEventHandler FreightPathStopDetailTableRowDeleting;
            
            public void AddFreightPathStopDetailTableRow(FreightPathStopDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public FreightPathStopDetailTableRow AddFreightPathStopDetailTableRow(string PathStopID, string PathID, short StopNumber, int LocationID, string Number, string Description, string LocationType, string Mnemonic, string Address, int CompanyID, string CompanyName, bool IsFinal, bool UseMnemonic, bool UseMnemonic2) {
                FreightPathStopDetailTableRow rowFreightPathStopDetailTableRow = ((FreightPathStopDetailTableRow)(this.NewRow()));
                rowFreightPathStopDetailTableRow.ItemArray = new object[] {
                        PathStopID,
                        PathID,
                        StopNumber,
                        LocationID,
                        Number,
                        Description,
                        LocationType,
                        Mnemonic,
                        Address,
                        CompanyID,
                        CompanyName,
                        IsFinal,
                        UseMnemonic,
                        UseMnemonic2};
                this.Rows.Add(rowFreightPathStopDetailTableRow);
                return rowFreightPathStopDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FreightPathStopDetailTableDataTable cln = ((FreightPathStopDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FreightPathStopDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnPathStopID = this.Columns["PathStopID"];
                this.columnPathID = this.Columns["PathID"];
                this.columnStopNumber = this.Columns["StopNumber"];
                this.columnLocationID = this.Columns["LocationID"];
                this.columnNumber = this.Columns["Number"];
                this.columnDescription = this.Columns["Description"];
                this.columnLocationType = this.Columns["LocationType"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnAddress = this.Columns["Address"];
                this.columnCompanyID = this.Columns["CompanyID"];
                this.columnCompanyName = this.Columns["CompanyName"];
                this.columnIsFinal = this.Columns["IsFinal"];
                this.columnUseMnemonic = this.Columns["UseMnemonic"];
                this.columnUseMnemonic2 = this.Columns["UseMnemonic2"];
            }
            
            private void InitClass() {
                this.columnPathStopID = new DataColumn("PathStopID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathStopID);
                this.columnPathID = new DataColumn("PathID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnStopNumber = new DataColumn("StopNumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopNumber);
                this.columnLocationID = new DataColumn("LocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLocationType = new DataColumn("LocationType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationType);
                this.columnMnemonic = new DataColumn("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyID);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyName);
                this.columnIsFinal = new DataColumn("IsFinal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsFinal);
                this.columnUseMnemonic = new DataColumn("UseMnemonic", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseMnemonic);
                this.columnUseMnemonic2 = new DataColumn("UseMnemonic2", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseMnemonic2);
                this.columnPathStopID.AllowDBNull = false;
                this.columnPathID.AllowDBNull = false;
                this.columnStopNumber.AllowDBNull = false;
                this.columnLocationID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnLocationType.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnIsFinal.AllowDBNull = false;
                this.columnUseMnemonic.AllowDBNull = false;
                this.columnUseMnemonic2.AllowDBNull = false;
            }
            
            public FreightPathStopDetailTableRow NewFreightPathStopDetailTableRow() {
                return ((FreightPathStopDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FreightPathStopDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FreightPathStopDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FreightPathStopDetailTableRowChanged != null)) {
                    this.FreightPathStopDetailTableRowChanged(this, new FreightPathStopDetailTableRowChangeEvent(((FreightPathStopDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FreightPathStopDetailTableRowChanging != null)) {
                    this.FreightPathStopDetailTableRowChanging(this, new FreightPathStopDetailTableRowChangeEvent(((FreightPathStopDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FreightPathStopDetailTableRowDeleted != null)) {
                    this.FreightPathStopDetailTableRowDeleted(this, new FreightPathStopDetailTableRowChangeEvent(((FreightPathStopDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FreightPathStopDetailTableRowDeleting != null)) {
                    this.FreightPathStopDetailTableRowDeleting(this, new FreightPathStopDetailTableRowChangeEvent(((FreightPathStopDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFreightPathStopDetailTableRow(FreightPathStopDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathStopDetailTableRow : DataRow {
            
            private FreightPathStopDetailTableDataTable tableFreightPathStopDetailTable;
            
            internal FreightPathStopDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFreightPathStopDetailTable = ((FreightPathStopDetailTableDataTable)(this.Table));
            }
            
            public string PathStopID {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.PathStopIDColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.PathStopIDColumn] = value;
                }
            }
            
            public string PathID {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.PathIDColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.PathIDColumn] = value;
                }
            }
            
            public short StopNumber {
                get {
                    return ((short)(this[this.tableFreightPathStopDetailTable.StopNumberColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.StopNumberColumn] = value;
                }
            }
            
            public int LocationID {
                get {
                    return ((int)(this[this.tableFreightPathStopDetailTable.LocationIDColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.LocationIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.NumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.DescriptionColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.DescriptionColumn] = value;
                }
            }
            
            public string LocationType {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.LocationTypeColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.LocationTypeColumn] = value;
                }
            }
            
            public string Mnemonic {
                get {
                    try {
                        return ((string)(this[this.tableFreightPathStopDetailTable.MnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathStopDetailTable.MnemonicColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableFreightPathStopDetailTable.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathStopDetailTable.AddressColumn] = value;
                }
            }
            
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableFreightPathStopDetailTable.CompanyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFreightPathStopDetailTable.CompanyIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    return ((string)(this[this.tableFreightPathStopDetailTable.CompanyNameColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.CompanyNameColumn] = value;
                }
            }
            
            public bool IsFinal {
                get {
                    return ((bool)(this[this.tableFreightPathStopDetailTable.IsFinalColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.IsFinalColumn] = value;
                }
            }
            
            public bool UseMnemonic {
                get {
                    return ((bool)(this[this.tableFreightPathStopDetailTable.UseMnemonicColumn]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.UseMnemonicColumn] = value;
                }
            }
            
            public bool UseMnemonic2 {
                get {
                    return ((bool)(this[this.tableFreightPathStopDetailTable.UseMnemonic2Column]));
                }
                set {
                    this[this.tableFreightPathStopDetailTable.UseMnemonic2Column] = value;
                }
            }
            
            public bool IsMnemonicNull() {
                return this.IsNull(this.tableFreightPathStopDetailTable.MnemonicColumn);
            }
            
            public void SetMnemonicNull() {
                this[this.tableFreightPathStopDetailTable.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableFreightPathStopDetailTable.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableFreightPathStopDetailTable.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableFreightPathStopDetailTable.CompanyIDColumn);
            }
            
            public void SetCompanyIDNull() {
                this[this.tableFreightPathStopDetailTable.CompanyIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FreightPathStopDetailTableRowChangeEvent : EventArgs {
            
            private FreightPathStopDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public FreightPathStopDetailTableRowChangeEvent(FreightPathStopDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FreightPathStopDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
