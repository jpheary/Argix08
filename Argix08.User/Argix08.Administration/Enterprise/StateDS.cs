//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class StateDS : DataSet {
        
        private StateDetailTableDataTable tableStateDetailTable;
        
        private StateListTableDataTable tableStateListTable;
        
        public StateDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected StateDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["StateDetailTable"] != null)) {
                    this.Tables.Add(new StateDetailTableDataTable(ds.Tables["StateDetailTable"]));
                }
                if ((ds.Tables["StateListTable"] != null)) {
                    this.Tables.Add(new StateListTableDataTable(ds.Tables["StateListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateDetailTableDataTable StateDetailTable {
            get {
                return this.tableStateDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateListTableDataTable StateListTable {
            get {
                return this.tableStateListTable;
            }
        }
        
        public override DataSet Clone() {
            StateDS cln = ((StateDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["StateDetailTable"] != null)) {
                this.Tables.Add(new StateDetailTableDataTable(ds.Tables["StateDetailTable"]));
            }
            if ((ds.Tables["StateListTable"] != null)) {
                this.Tables.Add(new StateListTableDataTable(ds.Tables["StateListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableStateDetailTable = ((StateDetailTableDataTable)(this.Tables["StateDetailTable"]));
            if ((this.tableStateDetailTable != null)) {
                this.tableStateDetailTable.InitVars();
            }
            this.tableStateListTable = ((StateListTableDataTable)(this.Tables["StateListTable"]));
            if ((this.tableStateListTable != null)) {
                this.tableStateListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "StateDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/StateDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableStateDetailTable = new StateDetailTableDataTable();
            this.Tables.Add(this.tableStateDetailTable);
            this.tableStateListTable = new StateListTableDataTable();
            this.Tables.Add(this.tableStateListTable);
        }
        
        private bool ShouldSerializeStateDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeStateListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void StateDetailTableRowChangeEventHandler(object sender, StateDetailTableRowChangeEvent e);
        
        public delegate void StateListTableRowChangeEventHandler(object sender, StateListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnState;
            
            private DataColumn columnName;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersionID;
            
            internal StateDetailTableDataTable() : 
                    base("StateDetailTable") {
                this.InitClass();
            }
            
            internal StateDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionIDColumn {
                get {
                    return this.columnRowVersionID;
                }
            }
            
            public StateDetailTableRow this[int index] {
                get {
                    return ((StateDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event StateDetailTableRowChangeEventHandler StateDetailTableRowChanged;
            
            public event StateDetailTableRowChangeEventHandler StateDetailTableRowChanging;
            
            public event StateDetailTableRowChangeEventHandler StateDetailTableRowDeleted;
            
            public event StateDetailTableRowChangeEventHandler StateDetailTableRowDeleting;
            
            public void AddStateDetailTableRow(StateDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public StateDetailTableRow AddStateDetailTableRow(string State, string Name, System.DateTime LastUpdated, string UserID, System.Byte[] RowVersionID) {
                StateDetailTableRow rowStateDetailTableRow = ((StateDetailTableRow)(this.NewRow()));
                rowStateDetailTableRow.ItemArray = new object[] {
                        State,
                        Name,
                        LastUpdated,
                        UserID,
                        RowVersionID};
                this.Rows.Add(rowStateDetailTableRow);
                return rowStateDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StateDetailTableDataTable cln = ((StateDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StateDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnState = this.Columns["State"];
                this.columnName = this.Columns["Name"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersionID = this.Columns["RowVersionID"];
            }
            
            private void InitClass() {
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersionID = new DataColumn("RowVersionID", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersionID);
                this.columnState.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public StateDetailTableRow NewStateDetailTableRow() {
                return ((StateDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StateDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StateDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateDetailTableRowChanged != null)) {
                    this.StateDetailTableRowChanged(this, new StateDetailTableRowChangeEvent(((StateDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateDetailTableRowChanging != null)) {
                    this.StateDetailTableRowChanging(this, new StateDetailTableRowChangeEvent(((StateDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateDetailTableRowDeleted != null)) {
                    this.StateDetailTableRowDeleted(this, new StateDetailTableRowChangeEvent(((StateDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateDetailTableRowDeleting != null)) {
                    this.StateDetailTableRowDeleting(this, new StateDetailTableRowChangeEvent(((StateDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStateDetailTableRow(StateDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateDetailTableRow : DataRow {
            
            private StateDetailTableDataTable tableStateDetailTable;
            
            internal StateDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStateDetailTable = ((StateDetailTableDataTable)(this.Table));
            }
            
            public string State {
                get {
                    return ((string)(this[this.tableStateDetailTable.StateColumn]));
                }
                set {
                    this[this.tableStateDetailTable.StateColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableStateDetailTable.NameColumn]));
                }
                set {
                    this[this.tableStateDetailTable.NameColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableStateDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableStateDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableStateDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableStateDetailTable.UserIDColumn] = value;
                }
            }
            
            public System.Byte[] RowVersionID {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableStateDetailTable.RowVersionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStateDetailTable.RowVersionIDColumn] = value;
                }
            }
            
            public bool IsRowVersionIDNull() {
                return this.IsNull(this.tableStateDetailTable.RowVersionIDColumn);
            }
            
            public void SetRowVersionIDNull() {
                this[this.tableStateDetailTable.RowVersionIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateDetailTableRowChangeEvent : EventArgs {
            
            private StateDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public StateDetailTableRowChangeEvent(StateDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StateDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSTATE;
            
            private DataColumn columnNAME;
            
            internal StateListTableDataTable() : 
                    base("StateListTable") {
                this.InitClass();
            }
            
            internal StateListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            internal DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            public StateListTableRow this[int index] {
                get {
                    return ((StateListTableRow)(this.Rows[index]));
                }
            }
            
            public event StateListTableRowChangeEventHandler StateListTableRowChanged;
            
            public event StateListTableRowChangeEventHandler StateListTableRowChanging;
            
            public event StateListTableRowChangeEventHandler StateListTableRowDeleted;
            
            public event StateListTableRowChangeEventHandler StateListTableRowDeleting;
            
            public void AddStateListTableRow(StateListTableRow row) {
                this.Rows.Add(row);
            }
            
            public StateListTableRow AddStateListTableRow(string STATE, string NAME) {
                StateListTableRow rowStateListTableRow = ((StateListTableRow)(this.NewRow()));
                rowStateListTableRow.ItemArray = new object[] {
                        STATE,
                        NAME};
                this.Rows.Add(rowStateListTableRow);
                return rowStateListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StateListTableDataTable cln = ((StateListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StateListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnSTATE = this.Columns["STATE"];
                this.columnNAME = this.Columns["NAME"];
            }
            
            private void InitClass() {
                this.columnSTATE = new DataColumn("STATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTATE);
                this.columnNAME = new DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNAME);
                this.columnSTATE.AllowDBNull = false;
                this.columnNAME.AllowDBNull = false;
            }
            
            public StateListTableRow NewStateListTableRow() {
                return ((StateListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StateListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StateListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateListTableRowChanged != null)) {
                    this.StateListTableRowChanged(this, new StateListTableRowChangeEvent(((StateListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateListTableRowChanging != null)) {
                    this.StateListTableRowChanging(this, new StateListTableRowChangeEvent(((StateListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateListTableRowDeleted != null)) {
                    this.StateListTableRowDeleted(this, new StateListTableRowChangeEvent(((StateListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateListTableRowDeleting != null)) {
                    this.StateListTableRowDeleting(this, new StateListTableRowChangeEvent(((StateListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStateListTableRow(StateListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateListTableRow : DataRow {
            
            private StateListTableDataTable tableStateListTable;
            
            internal StateListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStateListTable = ((StateListTableDataTable)(this.Table));
            }
            
            public string STATE {
                get {
                    return ((string)(this[this.tableStateListTable.STATEColumn]));
                }
                set {
                    this[this.tableStateListTable.STATEColumn] = value;
                }
            }
            
            public string NAME {
                get {
                    return ((string)(this[this.tableStateListTable.NAMEColumn]));
                }
                set {
                    this[this.tableStateListTable.NAMEColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateListTableRowChangeEvent : EventArgs {
            
            private StateListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public StateListTableRowChangeEvent(StateListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StateListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
