//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Enterprise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PaymentServiceDS : DataSet {
        
        private PaymentServiceDetailTableDataTable tablePaymentServiceDetailTable;
        
        private PaymentServiceViewTableDataTable tablePaymentServiceViewTable;
        
        public PaymentServiceDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PaymentServiceDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PaymentServiceDetailTable"] != null)) {
                    this.Tables.Add(new PaymentServiceDetailTableDataTable(ds.Tables["PaymentServiceDetailTable"]));
                }
                if ((ds.Tables["PaymentServiceViewTable"] != null)) {
                    this.Tables.Add(new PaymentServiceViewTableDataTable(ds.Tables["PaymentServiceViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentServiceDetailTableDataTable PaymentServiceDetailTable {
            get {
                return this.tablePaymentServiceDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentServiceViewTableDataTable PaymentServiceViewTable {
            get {
                return this.tablePaymentServiceViewTable;
            }
        }
        
        public override DataSet Clone() {
            PaymentServiceDS cln = ((PaymentServiceDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PaymentServiceDetailTable"] != null)) {
                this.Tables.Add(new PaymentServiceDetailTableDataTable(ds.Tables["PaymentServiceDetailTable"]));
            }
            if ((ds.Tables["PaymentServiceViewTable"] != null)) {
                this.Tables.Add(new PaymentServiceViewTableDataTable(ds.Tables["PaymentServiceViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePaymentServiceDetailTable = ((PaymentServiceDetailTableDataTable)(this.Tables["PaymentServiceDetailTable"]));
            if ((this.tablePaymentServiceDetailTable != null)) {
                this.tablePaymentServiceDetailTable.InitVars();
            }
            this.tablePaymentServiceViewTable = ((PaymentServiceViewTableDataTable)(this.Tables["PaymentServiceViewTable"]));
            if ((this.tablePaymentServiceViewTable != null)) {
                this.tablePaymentServiceViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PaymentServiceDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PaymentServiceDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePaymentServiceDetailTable = new PaymentServiceDetailTableDataTable();
            this.Tables.Add(this.tablePaymentServiceDetailTable);
            this.tablePaymentServiceViewTable = new PaymentServiceViewTableDataTable();
            this.Tables.Add(this.tablePaymentServiceViewTable);
        }
        
        private bool ShouldSerializePaymentServiceDetailTable() {
            return false;
        }
        
        private bool ShouldSerializePaymentServiceViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PaymentServiceDetailTableRowChangeEventHandler(object sender, PaymentServiceDetailTableRowChangeEvent e);
        
        public delegate void PaymentServiceViewTableRowChangeEventHandler(object sender, PaymentServiceViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPaymentServiceID;
            
            private DataColumn columnPaymentServiceName;
            
            private DataColumn columnPaymentServiceNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal PaymentServiceDetailTableDataTable() : 
                    base("PaymentServiceDetailTable") {
                this.InitClass();
            }
            
            internal PaymentServiceDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PaymentServiceIDColumn {
                get {
                    return this.columnPaymentServiceID;
                }
            }
            
            internal DataColumn PaymentServiceNameColumn {
                get {
                    return this.columnPaymentServiceName;
                }
            }
            
            internal DataColumn PaymentServiceNumberColumn {
                get {
                    return this.columnPaymentServiceNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public PaymentServiceDetailTableRow this[int index] {
                get {
                    return ((PaymentServiceDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event PaymentServiceDetailTableRowChangeEventHandler PaymentServiceDetailTableRowChanged;
            
            public event PaymentServiceDetailTableRowChangeEventHandler PaymentServiceDetailTableRowChanging;
            
            public event PaymentServiceDetailTableRowChangeEventHandler PaymentServiceDetailTableRowDeleted;
            
            public event PaymentServiceDetailTableRowChangeEventHandler PaymentServiceDetailTableRowDeleting;
            
            public void AddPaymentServiceDetailTableRow(PaymentServiceDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public PaymentServiceDetailTableRow AddPaymentServiceDetailTableRow(
                        int PaymentServiceID, 
                        string PaymentServiceName, 
                        string PaymentServiceNumber, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                PaymentServiceDetailTableRow rowPaymentServiceDetailTableRow = ((PaymentServiceDetailTableRow)(this.NewRow()));
                rowPaymentServiceDetailTableRow.ItemArray = new object[] {
                        PaymentServiceID,
                        PaymentServiceName,
                        PaymentServiceNumber,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowPaymentServiceDetailTableRow);
                return rowPaymentServiceDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PaymentServiceDetailTableDataTable cln = ((PaymentServiceDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PaymentServiceDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnPaymentServiceID = this.Columns["PaymentServiceID"];
                this.columnPaymentServiceName = this.Columns["PaymentServiceName"];
                this.columnPaymentServiceNumber = this.Columns["PaymentServiceNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnPaymentServiceID = new DataColumn("PaymentServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceID);
                this.columnPaymentServiceName = new DataColumn("PaymentServiceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceName);
                this.columnPaymentServiceNumber = new DataColumn("PaymentServiceNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnPaymentServiceName.AllowDBNull = false;
                this.columnPaymentServiceNumber.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public PaymentServiceDetailTableRow NewPaymentServiceDetailTableRow() {
                return ((PaymentServiceDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PaymentServiceDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentServiceDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentServiceDetailTableRowChanged != null)) {
                    this.PaymentServiceDetailTableRowChanged(this, new PaymentServiceDetailTableRowChangeEvent(((PaymentServiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentServiceDetailTableRowChanging != null)) {
                    this.PaymentServiceDetailTableRowChanging(this, new PaymentServiceDetailTableRowChangeEvent(((PaymentServiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentServiceDetailTableRowDeleted != null)) {
                    this.PaymentServiceDetailTableRowDeleted(this, new PaymentServiceDetailTableRowChangeEvent(((PaymentServiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentServiceDetailTableRowDeleting != null)) {
                    this.PaymentServiceDetailTableRowDeleting(this, new PaymentServiceDetailTableRowChangeEvent(((PaymentServiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePaymentServiceDetailTableRow(PaymentServiceDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceDetailTableRow : DataRow {
            
            private PaymentServiceDetailTableDataTable tablePaymentServiceDetailTable;
            
            internal PaymentServiceDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentServiceDetailTable = ((PaymentServiceDetailTableDataTable)(this.Table));
            }
            
            public int PaymentServiceID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentServiceDetailTable.PaymentServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.PaymentServiceIDColumn] = value;
                }
            }
            
            public string PaymentServiceName {
                get {
                    return ((string)(this[this.tablePaymentServiceDetailTable.PaymentServiceNameColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.PaymentServiceNameColumn] = value;
                }
            }
            
            public string PaymentServiceNumber {
                get {
                    return ((string)(this[this.tablePaymentServiceDetailTable.PaymentServiceNumberColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.PaymentServiceNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentServiceDetailTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tablePaymentServiceDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tablePaymentServiceDetailTable.CityColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tablePaymentServiceDetailTable.CountryIDColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.CountryIDColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tablePaymentServiceDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tablePaymentServiceDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tablePaymentServiceDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsPaymentServiceIDNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.PaymentServiceIDColumn);
            }
            
            public void SetPaymentServiceIDNull() {
                this[this.tablePaymentServiceDetailTable.PaymentServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tablePaymentServiceDetailTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tablePaymentServiceDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tablePaymentServiceDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tablePaymentServiceDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tablePaymentServiceDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tablePaymentServiceDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tablePaymentServiceDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tablePaymentServiceDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tablePaymentServiceDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tablePaymentServiceDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tablePaymentServiceDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePaymentServiceDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tablePaymentServiceDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceDetailTableRowChangeEvent : EventArgs {
            
            private PaymentServiceDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public PaymentServiceDetailTableRowChangeEvent(PaymentServiceDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PaymentServiceDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPaymentServiceID;
            
            private DataColumn columnPaymentServiceName;
            
            private DataColumn columnPaymentServiceNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal PaymentServiceViewTableDataTable() : 
                    base("PaymentServiceViewTable") {
                this.InitClass();
            }
            
            internal PaymentServiceViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PaymentServiceIDColumn {
                get {
                    return this.columnPaymentServiceID;
                }
            }
            
            internal DataColumn PaymentServiceNameColumn {
                get {
                    return this.columnPaymentServiceName;
                }
            }
            
            internal DataColumn PaymentServiceNumberColumn {
                get {
                    return this.columnPaymentServiceNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public PaymentServiceViewTableRow this[int index] {
                get {
                    return ((PaymentServiceViewTableRow)(this.Rows[index]));
                }
            }
            
            public event PaymentServiceViewTableRowChangeEventHandler PaymentServiceViewTableRowChanged;
            
            public event PaymentServiceViewTableRowChangeEventHandler PaymentServiceViewTableRowChanging;
            
            public event PaymentServiceViewTableRowChangeEventHandler PaymentServiceViewTableRowDeleted;
            
            public event PaymentServiceViewTableRowChangeEventHandler PaymentServiceViewTableRowDeleting;
            
            public void AddPaymentServiceViewTableRow(PaymentServiceViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public PaymentServiceViewTableRow AddPaymentServiceViewTableRow(
                        int PaymentServiceID, 
                        string PaymentServiceName, 
                        string PaymentServiceNumber, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                PaymentServiceViewTableRow rowPaymentServiceViewTableRow = ((PaymentServiceViewTableRow)(this.NewRow()));
                rowPaymentServiceViewTableRow.ItemArray = new object[] {
                        PaymentServiceID,
                        PaymentServiceName,
                        PaymentServiceNumber,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowPaymentServiceViewTableRow);
                return rowPaymentServiceViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PaymentServiceViewTableDataTable cln = ((PaymentServiceViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PaymentServiceViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnPaymentServiceID = this.Columns["PaymentServiceID"];
                this.columnPaymentServiceName = this.Columns["PaymentServiceName"];
                this.columnPaymentServiceNumber = this.Columns["PaymentServiceNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnPaymentServiceID = new DataColumn("PaymentServiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceID);
                this.columnPaymentServiceName = new DataColumn("PaymentServiceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceName);
                this.columnPaymentServiceNumber = new DataColumn("PaymentServiceNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentServiceNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public PaymentServiceViewTableRow NewPaymentServiceViewTableRow() {
                return ((PaymentServiceViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PaymentServiceViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentServiceViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentServiceViewTableRowChanged != null)) {
                    this.PaymentServiceViewTableRowChanged(this, new PaymentServiceViewTableRowChangeEvent(((PaymentServiceViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentServiceViewTableRowChanging != null)) {
                    this.PaymentServiceViewTableRowChanging(this, new PaymentServiceViewTableRowChangeEvent(((PaymentServiceViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentServiceViewTableRowDeleted != null)) {
                    this.PaymentServiceViewTableRowDeleted(this, new PaymentServiceViewTableRowChangeEvent(((PaymentServiceViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentServiceViewTableRowDeleting != null)) {
                    this.PaymentServiceViewTableRowDeleting(this, new PaymentServiceViewTableRowChangeEvent(((PaymentServiceViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePaymentServiceViewTableRow(PaymentServiceViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceViewTableRow : DataRow {
            
            private PaymentServiceViewTableDataTable tablePaymentServiceViewTable;
            
            internal PaymentServiceViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentServiceViewTable = ((PaymentServiceViewTableDataTable)(this.Table));
            }
            
            public int PaymentServiceID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentServiceViewTable.PaymentServiceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.PaymentServiceIDColumn] = value;
                }
            }
            
            public string PaymentServiceName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.PaymentServiceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.PaymentServiceNameColumn] = value;
                }
            }
            
            public string PaymentServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.PaymentServiceNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.PaymentServiceNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentServiceViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentServiceViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePaymentServiceViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tablePaymentServiceViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentServiceViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsPaymentServiceIDNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.PaymentServiceIDColumn);
            }
            
            public void SetPaymentServiceIDNull() {
                this[this.tablePaymentServiceViewTable.PaymentServiceIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNameNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.PaymentServiceNameColumn);
            }
            
            public void SetPaymentServiceNameNull() {
                this[this.tablePaymentServiceViewTable.PaymentServiceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentServiceNumberNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.PaymentServiceNumberColumn);
            }
            
            public void SetPaymentServiceNumberNull() {
                this[this.tablePaymentServiceViewTable.PaymentServiceNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tablePaymentServiceViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tablePaymentServiceViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tablePaymentServiceViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tablePaymentServiceViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tablePaymentServiceViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tablePaymentServiceViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tablePaymentServiceViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tablePaymentServiceViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tablePaymentServiceViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tablePaymentServiceViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tablePaymentServiceViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tablePaymentServiceViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tablePaymentServiceViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tablePaymentServiceViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tablePaymentServiceViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tablePaymentServiceViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tablePaymentServiceViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tablePaymentServiceViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePaymentServiceViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tablePaymentServiceViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentServiceViewTableRowChangeEvent : EventArgs {
            
            private PaymentServiceViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public PaymentServiceViewTableRowChangeEvent(PaymentServiceViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PaymentServiceViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
