//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Freight {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class InboundLabelDS : DataSet {
        
        private InboundLabelViewTableDataTable tableInboundLabelViewTable;
        
        private InboundLabelDetailTableDataTable tableInboundLabelDetailTable;
        
        private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
        
        public InboundLabelDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected InboundLabelDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["InboundLabelViewTable"] != null)) {
                    this.Tables.Add(new InboundLabelViewTableDataTable(ds.Tables["InboundLabelViewTable"]));
                }
                if ((ds.Tables["InboundLabelDetailTable"] != null)) {
                    this.Tables.Add(new InboundLabelDetailTableDataTable(ds.Tables["InboundLabelDetailTable"]));
                }
                if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                    this.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelViewTableDataTable InboundLabelViewTable {
            get {
                return this.tableInboundLabelViewTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelDetailTableDataTable InboundLabelDetailTable {
            get {
                return this.tableInboundLabelDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InboundLabelDataElementTableDataTable InboundLabelDataElementTable {
            get {
                return this.tableInboundLabelDataElementTable;
            }
        }
        
        public override DataSet Clone() {
            InboundLabelDS cln = ((InboundLabelDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["InboundLabelViewTable"] != null)) {
                this.Tables.Add(new InboundLabelViewTableDataTable(ds.Tables["InboundLabelViewTable"]));
            }
            if ((ds.Tables["InboundLabelDetailTable"] != null)) {
                this.Tables.Add(new InboundLabelDetailTableDataTable(ds.Tables["InboundLabelDetailTable"]));
            }
            if ((ds.Tables["InboundLabelDataElementTable"] != null)) {
                this.Tables.Add(new InboundLabelDataElementTableDataTable(ds.Tables["InboundLabelDataElementTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInboundLabelViewTable = ((InboundLabelViewTableDataTable)(this.Tables["InboundLabelViewTable"]));
            if ((this.tableInboundLabelViewTable != null)) {
                this.tableInboundLabelViewTable.InitVars();
            }
            this.tableInboundLabelDetailTable = ((InboundLabelDetailTableDataTable)(this.Tables["InboundLabelDetailTable"]));
            if ((this.tableInboundLabelDetailTable != null)) {
                this.tableInboundLabelDetailTable.InitVars();
            }
            this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(this.Tables["InboundLabelDataElementTable"]));
            if ((this.tableInboundLabelDataElementTable != null)) {
                this.tableInboundLabelDataElementTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "InboundLabelDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/InboundLabelDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInboundLabelViewTable = new InboundLabelViewTableDataTable();
            this.Tables.Add(this.tableInboundLabelViewTable);
            this.tableInboundLabelDetailTable = new InboundLabelDetailTableDataTable();
            this.Tables.Add(this.tableInboundLabelDetailTable);
            this.tableInboundLabelDataElementTable = new InboundLabelDataElementTableDataTable();
            this.Tables.Add(this.tableInboundLabelDataElementTable);
        }
        
        private bool ShouldSerializeInboundLabelViewTable() {
            return false;
        }
        
        private bool ShouldSerializeInboundLabelDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeInboundLabelDataElementTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InboundLabelViewTableRowChangeEventHandler(object sender, InboundLabelViewTableRowChangeEvent e);
        
        public delegate void InboundLabelDetailTableRowChangeEventHandler(object sender, InboundLabelDetailTableRowChangeEvent e);
        
        public delegate void InboundLabelDataElementTableRowChangeEventHandler(object sender, InboundLabelDataElementTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLabelID;
            
            private DataColumn columnSortTypeID;
            
            private DataColumn columnSortType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnInput1Len;
            
            private DataColumn columnInput1ValidString;
            
            private DataColumn columnInput1ValidStart;
            
            private DataColumn columnInput2Len;
            
            private DataColumn columnInput2ValidString;
            
            private DataColumn columnInput2ValidStart;
            
            private DataColumn columnInput3Len;
            
            private DataColumn columnInput3ValidString;
            
            private DataColumn columnInput3ValidStart;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal InboundLabelViewTableDataTable() : 
                    base("InboundLabelViewTable") {
                this.InitClass();
            }
            
            internal InboundLabelViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            internal DataColumn SortTypeColumn {
                get {
                    return this.columnSortType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Input1LenColumn {
                get {
                    return this.columnInput1Len;
                }
            }
            
            internal DataColumn Input1ValidStringColumn {
                get {
                    return this.columnInput1ValidString;
                }
            }
            
            internal DataColumn Input1ValidStartColumn {
                get {
                    return this.columnInput1ValidStart;
                }
            }
            
            internal DataColumn Input2LenColumn {
                get {
                    return this.columnInput2Len;
                }
            }
            
            internal DataColumn Input2ValidStringColumn {
                get {
                    return this.columnInput2ValidString;
                }
            }
            
            internal DataColumn Input2ValidStartColumn {
                get {
                    return this.columnInput2ValidStart;
                }
            }
            
            internal DataColumn Input3LenColumn {
                get {
                    return this.columnInput3Len;
                }
            }
            
            internal DataColumn Input3ValidStringColumn {
                get {
                    return this.columnInput3ValidString;
                }
            }
            
            internal DataColumn Input3ValidStartColumn {
                get {
                    return this.columnInput3ValidStart;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public InboundLabelViewTableRow this[int index] {
                get {
                    return ((InboundLabelViewTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelViewTableRowChangeEventHandler InboundLabelViewTableRowChanged;
            
            public event InboundLabelViewTableRowChangeEventHandler InboundLabelViewTableRowChanging;
            
            public event InboundLabelViewTableRowChangeEventHandler InboundLabelViewTableRowDeleted;
            
            public event InboundLabelViewTableRowChangeEventHandler InboundLabelViewTableRowDeleting;
            
            public void AddInboundLabelViewTableRow(InboundLabelViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundLabelViewTableRow AddInboundLabelViewTableRow(
                        int SortTypeID, 
                        string SortType, 
                        string Description, 
                        short Input1Len, 
                        string Input1ValidString, 
                        short Input1ValidStart, 
                        short Input2Len, 
                        string Input2ValidString, 
                        short Input2ValidStart, 
                        short Input3Len, 
                        string Input3ValidString, 
                        short Input3ValidStart, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                InboundLabelViewTableRow rowInboundLabelViewTableRow = ((InboundLabelViewTableRow)(this.NewRow()));
                rowInboundLabelViewTableRow.ItemArray = new object[] {
                        null,
                        SortTypeID,
                        SortType,
                        Description,
                        Input1Len,
                        Input1ValidString,
                        Input1ValidStart,
                        Input2Len,
                        Input2ValidString,
                        Input2ValidStart,
                        Input3Len,
                        Input3ValidString,
                        Input3ValidStart,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowInboundLabelViewTableRow);
                return rowInboundLabelViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundLabelViewTableDataTable cln = ((InboundLabelViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundLabelViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLabelID = this.Columns["LabelID"];
                this.columnSortTypeID = this.Columns["SortTypeID"];
                this.columnSortType = this.Columns["SortType"];
                this.columnDescription = this.Columns["Description"];
                this.columnInput1Len = this.Columns["Input1Len"];
                this.columnInput1ValidString = this.Columns["Input1ValidString"];
                this.columnInput1ValidStart = this.Columns["Input1ValidStart"];
                this.columnInput2Len = this.Columns["Input2Len"];
                this.columnInput2ValidString = this.Columns["Input2ValidString"];
                this.columnInput2ValidStart = this.Columns["Input2ValidStart"];
                this.columnInput3Len = this.Columns["Input3Len"];
                this.columnInput3ValidString = this.Columns["Input3ValidString"];
                this.columnInput3ValidStart = this.Columns["Input3ValidStart"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnSortTypeID = new DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortTypeID);
                this.columnSortType = new DataColumn("SortType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnInput1Len = new DataColumn("Input1Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1Len);
                this.columnInput1ValidString = new DataColumn("Input1ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidString);
                this.columnInput1ValidStart = new DataColumn("Input1ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidStart);
                this.columnInput2Len = new DataColumn("Input2Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2Len);
                this.columnInput2ValidString = new DataColumn("Input2ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidString);
                this.columnInput2ValidStart = new DataColumn("Input2ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidStart);
                this.columnInput3Len = new DataColumn("Input3Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3Len);
                this.columnInput3ValidString = new DataColumn("Input3ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidString);
                this.columnInput3ValidStart = new DataColumn("Input3ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidStart);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnLabelID.AutoIncrement = true;
                this.columnLabelID.AllowDBNull = false;
                this.columnLabelID.ReadOnly = true;
                this.columnSortTypeID.AllowDBNull = false;
                this.columnSortType.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnInput1Len.AllowDBNull = false;
                this.columnInput1ValidString.AllowDBNull = false;
                this.columnInput1ValidStart.AllowDBNull = false;
                this.columnInput2Len.AllowDBNull = false;
                this.columnInput2ValidString.AllowDBNull = false;
                this.columnInput2ValidStart.AllowDBNull = false;
                this.columnInput3Len.AllowDBNull = false;
                this.columnInput3ValidString.AllowDBNull = false;
                this.columnInput3ValidStart.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            public InboundLabelViewTableRow NewInboundLabelViewTableRow() {
                return ((InboundLabelViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundLabelViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundLabelViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelViewTableRowChanged != null)) {
                    this.InboundLabelViewTableRowChanged(this, new InboundLabelViewTableRowChangeEvent(((InboundLabelViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelViewTableRowChanging != null)) {
                    this.InboundLabelViewTableRowChanging(this, new InboundLabelViewTableRowChangeEvent(((InboundLabelViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelViewTableRowDeleted != null)) {
                    this.InboundLabelViewTableRowDeleted(this, new InboundLabelViewTableRowChangeEvent(((InboundLabelViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelViewTableRowDeleting != null)) {
                    this.InboundLabelViewTableRowDeleting(this, new InboundLabelViewTableRowChangeEvent(((InboundLabelViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundLabelViewTableRow(InboundLabelViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelViewTableRow : DataRow {
            
            private InboundLabelViewTableDataTable tableInboundLabelViewTable;
            
            internal InboundLabelViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelViewTable = ((InboundLabelViewTableDataTable)(this.Table));
            }
            
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelViewTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.LabelIDColumn] = value;
                }
            }
            
            public int SortTypeID {
                get {
                    return ((int)(this[this.tableInboundLabelViewTable.SortTypeIDColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.SortTypeIDColumn] = value;
                }
            }
            
            public string SortType {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.SortTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.SortTypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.DescriptionColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.DescriptionColumn] = value;
                }
            }
            
            public short Input1Len {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input1LenColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input1LenColumn] = value;
                }
            }
            
            public string Input1ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.Input1ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input1ValidStringColumn] = value;
                }
            }
            
            public short Input1ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input1ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input1ValidStartColumn] = value;
                }
            }
            
            public short Input2Len {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input2LenColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input2LenColumn] = value;
                }
            }
            
            public string Input2ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.Input2ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input2ValidStringColumn] = value;
                }
            }
            
            public short Input2ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input2ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input2ValidStartColumn] = value;
                }
            }
            
            public short Input3Len {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input3LenColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input3LenColumn] = value;
                }
            }
            
            public string Input3ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.Input3ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input3ValidStringColumn] = value;
                }
            }
            
            public short Input3ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelViewTable.Input3ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.Input3ValidStartColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableInboundLabelViewTable.IsActiveColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableInboundLabelViewTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableInboundLabelViewTable.UserIDColumn]));
                }
                set {
                    this[this.tableInboundLabelViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInboundLabelViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableInboundLabelViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelViewTableRowChangeEvent : EventArgs {
            
            private InboundLabelViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundLabelViewTableRowChangeEvent(InboundLabelViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundLabelViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLabelID;
            
            private DataColumn columnSortTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnInput1Len;
            
            private DataColumn columnInput1ValidString;
            
            private DataColumn columnInput1ValidStart;
            
            private DataColumn columnInput2Len;
            
            private DataColumn columnInput2ValidString;
            
            private DataColumn columnInput2ValidStart;
            
            private DataColumn columnInput3Len;
            
            private DataColumn columnInput3ValidString;
            
            private DataColumn columnInput3ValidStart;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal InboundLabelDetailTableDataTable() : 
                    base("InboundLabelDetailTable") {
                this.InitClass();
            }
            
            internal InboundLabelDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn SortTypeIDColumn {
                get {
                    return this.columnSortTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Input1LenColumn {
                get {
                    return this.columnInput1Len;
                }
            }
            
            internal DataColumn Input1ValidStringColumn {
                get {
                    return this.columnInput1ValidString;
                }
            }
            
            internal DataColumn Input1ValidStartColumn {
                get {
                    return this.columnInput1ValidStart;
                }
            }
            
            internal DataColumn Input2LenColumn {
                get {
                    return this.columnInput2Len;
                }
            }
            
            internal DataColumn Input2ValidStringColumn {
                get {
                    return this.columnInput2ValidString;
                }
            }
            
            internal DataColumn Input2ValidStartColumn {
                get {
                    return this.columnInput2ValidStart;
                }
            }
            
            internal DataColumn Input3LenColumn {
                get {
                    return this.columnInput3Len;
                }
            }
            
            internal DataColumn Input3ValidStringColumn {
                get {
                    return this.columnInput3ValidString;
                }
            }
            
            internal DataColumn Input3ValidStartColumn {
                get {
                    return this.columnInput3ValidStart;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public InboundLabelDetailTableRow this[int index] {
                get {
                    return ((InboundLabelDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelDetailTableRowChangeEventHandler InboundLabelDetailTableRowChanged;
            
            public event InboundLabelDetailTableRowChangeEventHandler InboundLabelDetailTableRowChanging;
            
            public event InboundLabelDetailTableRowChangeEventHandler InboundLabelDetailTableRowDeleted;
            
            public event InboundLabelDetailTableRowChangeEventHandler InboundLabelDetailTableRowDeleting;
            
            public void AddInboundLabelDetailTableRow(InboundLabelDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundLabelDetailTableRow AddInboundLabelDetailTableRow(int SortTypeID, string Description, short Input1Len, string Input1ValidString, short Input1ValidStart, short Input2Len, string Input2ValidString, short Input2ValidStart, short Input3Len, string Input3ValidString, short Input3ValidStart, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                InboundLabelDetailTableRow rowInboundLabelDetailTableRow = ((InboundLabelDetailTableRow)(this.NewRow()));
                rowInboundLabelDetailTableRow.ItemArray = new object[] {
                        null,
                        SortTypeID,
                        Description,
                        Input1Len,
                        Input1ValidString,
                        Input1ValidStart,
                        Input2Len,
                        Input2ValidString,
                        Input2ValidStart,
                        Input3Len,
                        Input3ValidString,
                        Input3ValidStart,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowInboundLabelDetailTableRow);
                return rowInboundLabelDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundLabelDetailTableDataTable cln = ((InboundLabelDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundLabelDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLabelID = this.Columns["LabelID"];
                this.columnSortTypeID = this.Columns["SortTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnInput1Len = this.Columns["Input1Len"];
                this.columnInput1ValidString = this.Columns["Input1ValidString"];
                this.columnInput1ValidStart = this.Columns["Input1ValidStart"];
                this.columnInput2Len = this.Columns["Input2Len"];
                this.columnInput2ValidString = this.Columns["Input2ValidString"];
                this.columnInput2ValidStart = this.Columns["Input2ValidStart"];
                this.columnInput3Len = this.Columns["Input3Len"];
                this.columnInput3ValidString = this.Columns["Input3ValidString"];
                this.columnInput3ValidStart = this.Columns["Input3ValidStart"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnSortTypeID = new DataColumn("SortTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnInput1Len = new DataColumn("Input1Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1Len);
                this.columnInput1ValidString = new DataColumn("Input1ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidString);
                this.columnInput1ValidStart = new DataColumn("Input1ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput1ValidStart);
                this.columnInput2Len = new DataColumn("Input2Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2Len);
                this.columnInput2ValidString = new DataColumn("Input2ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidString);
                this.columnInput2ValidStart = new DataColumn("Input2ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput2ValidStart);
                this.columnInput3Len = new DataColumn("Input3Len", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3Len);
                this.columnInput3ValidString = new DataColumn("Input3ValidString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidString);
                this.columnInput3ValidStart = new DataColumn("Input3ValidStart", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInput3ValidStart);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnLabelID.AutoIncrement = true;
                this.columnLabelID.AllowDBNull = false;
                this.columnLabelID.ReadOnly = true;
                this.columnSortTypeID.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnInput1Len.AllowDBNull = false;
                this.columnInput1ValidString.AllowDBNull = false;
                this.columnInput1ValidStart.AllowDBNull = false;
                this.columnInput2Len.AllowDBNull = false;
                this.columnInput2ValidString.AllowDBNull = false;
                this.columnInput2ValidStart.AllowDBNull = false;
                this.columnInput3Len.AllowDBNull = false;
                this.columnInput3ValidString.AllowDBNull = false;
                this.columnInput3ValidStart.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            public InboundLabelDetailTableRow NewInboundLabelDetailTableRow() {
                return ((InboundLabelDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundLabelDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundLabelDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelDetailTableRowChanged != null)) {
                    this.InboundLabelDetailTableRowChanged(this, new InboundLabelDetailTableRowChangeEvent(((InboundLabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelDetailTableRowChanging != null)) {
                    this.InboundLabelDetailTableRowChanging(this, new InboundLabelDetailTableRowChangeEvent(((InboundLabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelDetailTableRowDeleted != null)) {
                    this.InboundLabelDetailTableRowDeleted(this, new InboundLabelDetailTableRowChangeEvent(((InboundLabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelDetailTableRowDeleting != null)) {
                    this.InboundLabelDetailTableRowDeleting(this, new InboundLabelDetailTableRowChangeEvent(((InboundLabelDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundLabelDetailTableRow(InboundLabelDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDetailTableRow : DataRow {
            
            private InboundLabelDetailTableDataTable tableInboundLabelDetailTable;
            
            internal InboundLabelDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelDetailTable = ((InboundLabelDetailTableDataTable)(this.Table));
            }
            
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelDetailTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.LabelIDColumn] = value;
                }
            }
            
            public int SortTypeID {
                get {
                    return ((int)(this[this.tableInboundLabelDetailTable.SortTypeIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.SortTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableInboundLabelDetailTable.DescriptionColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.DescriptionColumn] = value;
                }
            }
            
            public short Input1Len {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input1LenColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input1LenColumn] = value;
                }
            }
            
            public string Input1ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelDetailTable.Input1ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input1ValidStringColumn] = value;
                }
            }
            
            public short Input1ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input1ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input1ValidStartColumn] = value;
                }
            }
            
            public short Input2Len {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input2LenColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input2LenColumn] = value;
                }
            }
            
            public string Input2ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelDetailTable.Input2ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input2ValidStringColumn] = value;
                }
            }
            
            public short Input2ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input2ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input2ValidStartColumn] = value;
                }
            }
            
            public short Input3Len {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input3LenColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input3LenColumn] = value;
                }
            }
            
            public string Input3ValidString {
                get {
                    return ((string)(this[this.tableInboundLabelDetailTable.Input3ValidStringColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input3ValidStringColumn] = value;
                }
            }
            
            public short Input3ValidStart {
                get {
                    return ((short)(this[this.tableInboundLabelDetailTable.Input3ValidStartColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.Input3ValidStartColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableInboundLabelDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableInboundLabelDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableInboundLabelDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableInboundLabelDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInboundLabelDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableInboundLabelDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDetailTableRowChangeEvent : EventArgs {
            
            private InboundLabelDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundLabelDetailTableRowChangeEvent(InboundLabelDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundLabelDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRequired;
            
            private DataColumn columnSelected;
            
            private DataColumn columnLabelID;
            
            private DataColumn columnElementType;
            
            private DataColumn columnInputNumber;
            
            private DataColumn columnStart;
            
            private DataColumn columnLength;
            
            private DataColumn columnIsValueRequired;
            
            private DataColumn columnIsDuplicateAllowed;
            
            private DataColumn columnIsCheckDigitValidation;
            
            private DataColumn columnIsUseAltNumber;
            
            internal InboundLabelDataElementTableDataTable() : 
                    base("InboundLabelDataElementTable") {
                this.InitClass();
            }
            
            internal InboundLabelDataElementTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RequiredColumn {
                get {
                    return this.columnRequired;
                }
            }
            
            internal DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            internal DataColumn LabelIDColumn {
                get {
                    return this.columnLabelID;
                }
            }
            
            internal DataColumn ElementTypeColumn {
                get {
                    return this.columnElementType;
                }
            }
            
            internal DataColumn InputNumberColumn {
                get {
                    return this.columnInputNumber;
                }
            }
            
            internal DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            internal DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            internal DataColumn IsValueRequiredColumn {
                get {
                    return this.columnIsValueRequired;
                }
            }
            
            internal DataColumn IsDuplicateAllowedColumn {
                get {
                    return this.columnIsDuplicateAllowed;
                }
            }
            
            internal DataColumn IsCheckDigitValidationColumn {
                get {
                    return this.columnIsCheckDigitValidation;
                }
            }
            
            internal DataColumn IsUseAltNumberColumn {
                get {
                    return this.columnIsUseAltNumber;
                }
            }
            
            public InboundLabelDataElementTableRow this[int index] {
                get {
                    return ((InboundLabelDataElementTableRow)(this.Rows[index]));
                }
            }
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanged;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowChanging;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleted;
            
            public event InboundLabelDataElementTableRowChangeEventHandler InboundLabelDataElementTableRowDeleting;
            
            public void AddInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Add(row);
            }
            
            public InboundLabelDataElementTableRow AddInboundLabelDataElementTableRow(bool Required, bool Selected, int LabelID, string ElementType, short InputNumber, short Start, short Length, bool IsValueRequired, bool IsDuplicateAllowed, bool IsCheckDigitValidation, bool IsUseAltNumber) {
                InboundLabelDataElementTableRow rowInboundLabelDataElementTableRow = ((InboundLabelDataElementTableRow)(this.NewRow()));
                rowInboundLabelDataElementTableRow.ItemArray = new object[] {
                        Required,
                        Selected,
                        LabelID,
                        ElementType,
                        InputNumber,
                        Start,
                        Length,
                        IsValueRequired,
                        IsDuplicateAllowed,
                        IsCheckDigitValidation,
                        IsUseAltNumber};
                this.Rows.Add(rowInboundLabelDataElementTableRow);
                return rowInboundLabelDataElementTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InboundLabelDataElementTableDataTable cln = ((InboundLabelDataElementTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InboundLabelDataElementTableDataTable();
            }
            
            internal void InitVars() {
                this.columnRequired = this.Columns["Required"];
                this.columnSelected = this.Columns["Selected"];
                this.columnLabelID = this.Columns["LabelID"];
                this.columnElementType = this.Columns["ElementType"];
                this.columnInputNumber = this.Columns["InputNumber"];
                this.columnStart = this.Columns["Start"];
                this.columnLength = this.Columns["Length"];
                this.columnIsValueRequired = this.Columns["IsValueRequired"];
                this.columnIsDuplicateAllowed = this.Columns["IsDuplicateAllowed"];
                this.columnIsCheckDigitValidation = this.Columns["IsCheckDigitValidation"];
                this.columnIsUseAltNumber = this.Columns["IsUseAltNumber"];
            }
            
            private void InitClass() {
                this.columnRequired = new DataColumn("Required", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequired);
                this.columnSelected = new DataColumn("Selected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSelected);
                this.columnLabelID = new DataColumn("LabelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLabelID);
                this.columnElementType = new DataColumn("ElementType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnElementType);
                this.columnInputNumber = new DataColumn("InputNumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInputNumber);
                this.columnStart = new DataColumn("Start", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStart);
                this.columnLength = new DataColumn("Length", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLength);
                this.columnIsValueRequired = new DataColumn("IsValueRequired", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsValueRequired);
                this.columnIsDuplicateAllowed = new DataColumn("IsDuplicateAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDuplicateAllowed);
                this.columnIsCheckDigitValidation = new DataColumn("IsCheckDigitValidation", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCheckDigitValidation);
                this.columnIsUseAltNumber = new DataColumn("IsUseAltNumber", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsUseAltNumber);
                this.columnLabelID.AllowDBNull = false;
                this.columnElementType.AllowDBNull = false;
                this.columnInputNumber.AllowDBNull = false;
                this.columnStart.AllowDBNull = false;
                this.columnLength.AllowDBNull = false;
                this.columnIsValueRequired.AllowDBNull = false;
                this.columnIsDuplicateAllowed.AllowDBNull = false;
                this.columnIsCheckDigitValidation.AllowDBNull = false;
                this.columnIsUseAltNumber.AllowDBNull = false;
            }
            
            public InboundLabelDataElementTableRow NewInboundLabelDataElementTableRow() {
                return ((InboundLabelDataElementTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InboundLabelDataElementTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InboundLabelDataElementTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InboundLabelDataElementTableRowChanged != null)) {
                    this.InboundLabelDataElementTableRowChanged(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InboundLabelDataElementTableRowChanging != null)) {
                    this.InboundLabelDataElementTableRowChanging(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InboundLabelDataElementTableRowDeleted != null)) {
                    this.InboundLabelDataElementTableRowDeleted(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InboundLabelDataElementTableRowDeleting != null)) {
                    this.InboundLabelDataElementTableRowDeleting(this, new InboundLabelDataElementTableRowChangeEvent(((InboundLabelDataElementTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInboundLabelDataElementTableRow(InboundLabelDataElementTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableRow : DataRow {
            
            private InboundLabelDataElementTableDataTable tableInboundLabelDataElementTable;
            
            internal InboundLabelDataElementTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInboundLabelDataElementTable = ((InboundLabelDataElementTableDataTable)(this.Table));
            }
            
            public bool Required {
                get {
                    try {
                        return ((bool)(this[this.tableInboundLabelDataElementTable.RequiredColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelDataElementTable.RequiredColumn] = value;
                }
            }
            
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableInboundLabelDataElementTable.SelectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInboundLabelDataElementTable.SelectedColumn] = value;
                }
            }
            
            public int LabelID {
                get {
                    return ((int)(this[this.tableInboundLabelDataElementTable.LabelIDColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LabelIDColumn] = value;
                }
            }
            
            public string ElementType {
                get {
                    return ((string)(this[this.tableInboundLabelDataElementTable.ElementTypeColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.ElementTypeColumn] = value;
                }
            }
            
            public short InputNumber {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.InputNumberColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.InputNumberColumn] = value;
                }
            }
            
            public short Start {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.StartColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.StartColumn] = value;
                }
            }
            
            public short Length {
                get {
                    return ((short)(this[this.tableInboundLabelDataElementTable.LengthColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.LengthColumn] = value;
                }
            }
            
            public bool IsValueRequired {
                get {
                    return ((bool)(this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsValueRequiredColumn] = value;
                }
            }
            
            public bool IsDuplicateAllowed {
                get {
                    return ((bool)(this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsDuplicateAllowedColumn] = value;
                }
            }
            
            public bool IsCheckDigitValidation {
                get {
                    return ((bool)(this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsCheckDigitValidationColumn] = value;
                }
            }
            
            public bool IsUseAltNumber {
                get {
                    return ((bool)(this[this.tableInboundLabelDataElementTable.IsUseAltNumberColumn]));
                }
                set {
                    this[this.tableInboundLabelDataElementTable.IsUseAltNumberColumn] = value;
                }
            }
            
            public bool IsRequiredNull() {
                return this.IsNull(this.tableInboundLabelDataElementTable.RequiredColumn);
            }
            
            public void SetRequiredNull() {
                this[this.tableInboundLabelDataElementTable.RequiredColumn] = System.Convert.DBNull;
            }
            
            public bool IsSelectedNull() {
                return this.IsNull(this.tableInboundLabelDataElementTable.SelectedColumn);
            }
            
            public void SetSelectedNull() {
                this[this.tableInboundLabelDataElementTable.SelectedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InboundLabelDataElementTableRowChangeEvent : EventArgs {
            
            private InboundLabelDataElementTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public InboundLabelDataElementTableRowChangeEvent(InboundLabelDataElementTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InboundLabelDataElementTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
