//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Freight {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DamageCodeDS : DataSet {
        
        private DamageCodeTableDataTable tableDamageCodeTable;
        
        public DamageCodeDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DamageCodeDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DamageCodeTable"] != null)) {
                    this.Tables.Add(new DamageCodeTableDataTable(ds.Tables["DamageCodeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DamageCodeTableDataTable DamageCodeTable {
            get {
                return this.tableDamageCodeTable;
            }
        }
        
        public override DataSet Clone() {
            DamageCodeDS cln = ((DamageCodeDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DamageCodeTable"] != null)) {
                this.Tables.Add(new DamageCodeTableDataTable(ds.Tables["DamageCodeTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDamageCodeTable = ((DamageCodeTableDataTable)(this.Tables["DamageCodeTable"]));
            if ((this.tableDamageCodeTable != null)) {
                this.tableDamageCodeTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DamageCodeDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DamageCodeDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDamageCodeTable = new DamageCodeTableDataTable();
            this.Tables.Add(this.tableDamageCodeTable);
        }
        
        private bool ShouldSerializeDamageCodeTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DamageCodeTableRowChangeEventHandler(object sender, DamageCodeTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DamageCodeTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCode;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DamageCodeTableDataTable() : 
                    base("DamageCodeTable") {
                this.InitClass();
            }
            
            internal DamageCodeTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DamageCodeTableRow this[int index] {
                get {
                    return ((DamageCodeTableRow)(this.Rows[index]));
                }
            }
            
            public event DamageCodeTableRowChangeEventHandler DamageCodeTableRowChanged;
            
            public event DamageCodeTableRowChangeEventHandler DamageCodeTableRowChanging;
            
            public event DamageCodeTableRowChangeEventHandler DamageCodeTableRowDeleted;
            
            public event DamageCodeTableRowChangeEventHandler DamageCodeTableRowDeleting;
            
            public void AddDamageCodeTableRow(DamageCodeTableRow row) {
                this.Rows.Add(row);
            }
            
            public DamageCodeTableRow AddDamageCodeTableRow(short Code, string Description, System.DateTime LastUpdated, string UserID, string RowVersion) {
                DamageCodeTableRow rowDamageCodeTableRow = ((DamageCodeTableRow)(this.NewRow()));
                rowDamageCodeTableRow.ItemArray = new object[] {
                        Code,
                        Description,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDamageCodeTableRow);
                return rowDamageCodeTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DamageCodeTableDataTable cln = ((DamageCodeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DamageCodeTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCode = this.Columns["Code"];
                this.columnDescription = this.Columns["Description"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCode = new DataColumn("Code", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCode);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public DamageCodeTableRow NewDamageCodeTableRow() {
                return ((DamageCodeTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DamageCodeTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DamageCodeTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DamageCodeTableRowChanged != null)) {
                    this.DamageCodeTableRowChanged(this, new DamageCodeTableRowChangeEvent(((DamageCodeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DamageCodeTableRowChanging != null)) {
                    this.DamageCodeTableRowChanging(this, new DamageCodeTableRowChangeEvent(((DamageCodeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DamageCodeTableRowDeleted != null)) {
                    this.DamageCodeTableRowDeleted(this, new DamageCodeTableRowChangeEvent(((DamageCodeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DamageCodeTableRowDeleting != null)) {
                    this.DamageCodeTableRowDeleting(this, new DamageCodeTableRowChangeEvent(((DamageCodeTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDamageCodeTableRow(DamageCodeTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DamageCodeTableRow : DataRow {
            
            private DamageCodeTableDataTable tableDamageCodeTable;
            
            internal DamageCodeTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDamageCodeTable = ((DamageCodeTableDataTable)(this.Table));
            }
            
            public short Code {
                get {
                    try {
                        return ((short)(this[this.tableDamageCodeTable.CodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDamageCodeTable.CodeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableDamageCodeTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDamageCodeTable.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDamageCodeTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDamageCodeTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableDamageCodeTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDamageCodeTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableDamageCodeTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDamageCodeTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCodeNull() {
                return this.IsNull(this.tableDamageCodeTable.CodeColumn);
            }
            
            public void SetCodeNull() {
                this[this.tableDamageCodeTable.CodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableDamageCodeTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableDamageCodeTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableDamageCodeTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableDamageCodeTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableDamageCodeTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableDamageCodeTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDamageCodeTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableDamageCodeTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DamageCodeTableRowChangeEvent : EventArgs {
            
            private DamageCodeTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DamageCodeTableRowChangeEvent(DamageCodeTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DamageCodeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
