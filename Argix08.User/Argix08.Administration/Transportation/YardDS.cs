//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class YardDS : DataSet {
        
        private YardDetailTableDataTable tableYardDetailTable;
        
        private YardListTableDataTable tableYardListTable;
        
        public YardDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected YardDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["YardDetailTable"] != null)) {
                    this.Tables.Add(new YardDetailTableDataTable(ds.Tables["YardDetailTable"]));
                }
                if ((ds.Tables["YardListTable"] != null)) {
                    this.Tables.Add(new YardListTableDataTable(ds.Tables["YardListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardDetailTableDataTable YardDetailTable {
            get {
                return this.tableYardDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardListTableDataTable YardListTable {
            get {
                return this.tableYardListTable;
            }
        }
        
        public override DataSet Clone() {
            YardDS cln = ((YardDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["YardDetailTable"] != null)) {
                this.Tables.Add(new YardDetailTableDataTable(ds.Tables["YardDetailTable"]));
            }
            if ((ds.Tables["YardListTable"] != null)) {
                this.Tables.Add(new YardListTableDataTable(ds.Tables["YardListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableYardDetailTable = ((YardDetailTableDataTable)(this.Tables["YardDetailTable"]));
            if ((this.tableYardDetailTable != null)) {
                this.tableYardDetailTable.InitVars();
            }
            this.tableYardListTable = ((YardListTableDataTable)(this.Tables["YardListTable"]));
            if ((this.tableYardListTable != null)) {
                this.tableYardListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "YardDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/YardDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableYardDetailTable = new YardDetailTableDataTable();
            this.Tables.Add(this.tableYardDetailTable);
            this.tableYardListTable = new YardListTableDataTable();
            this.Tables.Add(this.tableYardListTable);
        }
        
        private bool ShouldSerializeYardDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeYardListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void YardDetailTableRowChangeEventHandler(object sender, YardDetailTableRowChangeEvent e);
        
        public delegate void YardListTableRowChangeEventHandler(object sender, YardListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnYardID;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardDetailTableDataTable() : 
                    base("YardDetailTable") {
                this.InitClass();
            }
            
            internal YardDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn YardIDColumn {
                get {
                    return this.columnYardID;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardDetailTableRow this[int index] {
                get {
                    return ((YardDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event YardDetailTableRowChangeEventHandler YardDetailTableRowChanged;
            
            public event YardDetailTableRowChangeEventHandler YardDetailTableRowChanging;
            
            public event YardDetailTableRowChangeEventHandler YardDetailTableRowDeleted;
            
            public event YardDetailTableRowChangeEventHandler YardDetailTableRowDeleting;
            
            public void AddYardDetailTableRow(YardDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardDetailTableRow AddYardDetailTableRow(int YardID, int TerminalID, string Terminal, string Name, string Description, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                YardDetailTableRow rowYardDetailTableRow = ((YardDetailTableRow)(this.NewRow()));
                rowYardDetailTableRow.ItemArray = new object[] {
                        YardID,
                        TerminalID,
                        Terminal,
                        Name,
                        Description,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardDetailTableRow);
                return rowYardDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardDetailTableDataTable cln = ((YardDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnYardID = this.Columns["YardID"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnYardID = new DataColumn("YardID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardID);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnTerminalID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public YardDetailTableRow NewYardDetailTableRow() {
                return ((YardDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardDetailTableRowChanged != null)) {
                    this.YardDetailTableRowChanged(this, new YardDetailTableRowChangeEvent(((YardDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardDetailTableRowChanging != null)) {
                    this.YardDetailTableRowChanging(this, new YardDetailTableRowChangeEvent(((YardDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardDetailTableRowDeleted != null)) {
                    this.YardDetailTableRowDeleted(this, new YardDetailTableRowChangeEvent(((YardDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardDetailTableRowDeleting != null)) {
                    this.YardDetailTableRowDeleting(this, new YardDetailTableRowChangeEvent(((YardDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardDetailTableRow(YardDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardDetailTableRow : DataRow {
            
            private YardDetailTableDataTable tableYardDetailTable;
            
            internal YardDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardDetailTable = ((YardDetailTableDataTable)(this.Table));
            }
            
            public int YardID {
                get {
                    try {
                        return ((int)(this[this.tableYardDetailTable.YardIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardDetailTable.YardIDColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    return ((int)(this[this.tableYardDetailTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableYardDetailTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableYardDetailTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardDetailTable.TerminalColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableYardDetailTable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardDetailTable.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableYardDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardDetailTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableYardDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableYardDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableYardDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableYardDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableYardDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableYardDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsYardIDNull() {
                return this.IsNull(this.tableYardDetailTable.YardIDColumn);
            }
            
            public void SetYardIDNull() {
                this[this.tableYardDetailTable.YardIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableYardDetailTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableYardDetailTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableYardDetailTable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableYardDetailTable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableYardDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableYardDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardDetailTableRowChangeEvent : EventArgs {
            
            private YardDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardDetailTableRowChangeEvent(YardDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnYard;
            
            private DataColumn columnSectionNumber;
            
            private DataColumn columnYardLocationID;
            
            private DataColumn columnLocationNumber;
            
            private DataColumn columnType;
            
            private DataColumn columnLocationState;
            
            private DataColumn columnVehicleType;
            
            private DataColumn columnAssetID;
            
            private DataColumn columnVehicleNumber;
            
            private DataColumn columnFreightDesignation;
            
            private DataColumn columnStorage;
            
            private DataColumn columnSealNumber;
            
            private DataColumn columnCarrier;
            
            private DataColumn columnVehicleState;
            
            private DataColumn columnAssetMoveID;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardListTableDataTable() : 
                    base("YardListTable") {
                this.InitClass();
            }
            
            internal YardListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn YardColumn {
                get {
                    return this.columnYard;
                }
            }
            
            internal DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            internal DataColumn YardLocationIDColumn {
                get {
                    return this.columnYardLocationID;
                }
            }
            
            internal DataColumn LocationNumberColumn {
                get {
                    return this.columnLocationNumber;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn LocationStateColumn {
                get {
                    return this.columnLocationState;
                }
            }
            
            internal DataColumn VehicleTypeColumn {
                get {
                    return this.columnVehicleType;
                }
            }
            
            internal DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            internal DataColumn VehicleNumberColumn {
                get {
                    return this.columnVehicleNumber;
                }
            }
            
            internal DataColumn FreightDesignationColumn {
                get {
                    return this.columnFreightDesignation;
                }
            }
            
            internal DataColumn StorageColumn {
                get {
                    return this.columnStorage;
                }
            }
            
            internal DataColumn SealNumberColumn {
                get {
                    return this.columnSealNumber;
                }
            }
            
            internal DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            internal DataColumn VehicleStateColumn {
                get {
                    return this.columnVehicleState;
                }
            }
            
            internal DataColumn AssetMoveIDColumn {
                get {
                    return this.columnAssetMoveID;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardListTableRow this[int index] {
                get {
                    return ((YardListTableRow)(this.Rows[index]));
                }
            }
            
            public event YardListTableRowChangeEventHandler YardListTableRowChanged;
            
            public event YardListTableRowChangeEventHandler YardListTableRowChanging;
            
            public event YardListTableRowChangeEventHandler YardListTableRowDeleted;
            
            public event YardListTableRowChangeEventHandler YardListTableRowDeleting;
            
            public void AddYardListTableRow(YardListTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardListTableRow AddYardListTableRow(
                        string Yard, 
                        string SectionNumber, 
                        int YardLocationID, 
                        string LocationNumber, 
                        string Type, 
                        string LocationState, 
                        string VehicleType, 
                        int AssetID, 
                        string VehicleNumber, 
                        string FreightDesignation, 
                        string Storage, 
                        string SealNumber, 
                        string Carrier, 
                        string VehicleState, 
                        string AssetMoveID, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                YardListTableRow rowYardListTableRow = ((YardListTableRow)(this.NewRow()));
                rowYardListTableRow.ItemArray = new object[] {
                        Yard,
                        SectionNumber,
                        YardLocationID,
                        LocationNumber,
                        Type,
                        LocationState,
                        VehicleType,
                        AssetID,
                        VehicleNumber,
                        FreightDesignation,
                        Storage,
                        SealNumber,
                        Carrier,
                        VehicleState,
                        AssetMoveID,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardListTableRow);
                return rowYardListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardListTableDataTable cln = ((YardListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnYard = this.Columns["Yard"];
                this.columnSectionNumber = this.Columns["SectionNumber"];
                this.columnYardLocationID = this.Columns["YardLocationID"];
                this.columnLocationNumber = this.Columns["LocationNumber"];
                this.columnType = this.Columns["Type"];
                this.columnLocationState = this.Columns["LocationState"];
                this.columnVehicleType = this.Columns["VehicleType"];
                this.columnAssetID = this.Columns["AssetID"];
                this.columnVehicleNumber = this.Columns["VehicleNumber"];
                this.columnFreightDesignation = this.Columns["FreightDesignation"];
                this.columnStorage = this.Columns["Storage"];
                this.columnSealNumber = this.Columns["SealNumber"];
                this.columnCarrier = this.Columns["Carrier"];
                this.columnVehicleState = this.Columns["VehicleState"];
                this.columnAssetMoveID = this.Columns["AssetMoveID"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnYard = new DataColumn("Yard", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYard);
                this.columnSectionNumber = new DataColumn("SectionNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionNumber);
                this.columnYardLocationID = new DataColumn("YardLocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardLocationID);
                this.columnLocationNumber = new DataColumn("LocationNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationNumber);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnLocationState = new DataColumn("LocationState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationState);
                this.columnVehicleType = new DataColumn("VehicleType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleType);
                this.columnAssetID = new DataColumn("AssetID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssetID);
                this.columnVehicleNumber = new DataColumn("VehicleNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleNumber);
                this.columnFreightDesignation = new DataColumn("FreightDesignation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreightDesignation);
                this.columnStorage = new DataColumn("Storage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStorage);
                this.columnSealNumber = new DataColumn("SealNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSealNumber);
                this.columnCarrier = new DataColumn("Carrier", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrier);
                this.columnVehicleState = new DataColumn("VehicleState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleState);
                this.columnAssetMoveID = new DataColumn("AssetMoveID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssetMoveID);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public YardListTableRow NewYardListTableRow() {
                return ((YardListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardListTableRowChanged != null)) {
                    this.YardListTableRowChanged(this, new YardListTableRowChangeEvent(((YardListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardListTableRowChanging != null)) {
                    this.YardListTableRowChanging(this, new YardListTableRowChangeEvent(((YardListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardListTableRowDeleted != null)) {
                    this.YardListTableRowDeleted(this, new YardListTableRowChangeEvent(((YardListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardListTableRowDeleting != null)) {
                    this.YardListTableRowDeleting(this, new YardListTableRowChangeEvent(((YardListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardListTableRow(YardListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardListTableRow : DataRow {
            
            private YardListTableDataTable tableYardListTable;
            
            internal YardListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardListTable = ((YardListTableDataTable)(this.Table));
            }
            
            public string Yard {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.YardColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.YardColumn] = value;
                }
            }
            
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.SectionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.SectionNumberColumn] = value;
                }
            }
            
            public int YardLocationID {
                get {
                    try {
                        return ((int)(this[this.tableYardListTable.YardLocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.YardLocationIDColumn] = value;
                }
            }
            
            public string LocationNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.LocationNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.LocationNumberColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.TypeColumn] = value;
                }
            }
            
            public string LocationState {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.LocationStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.LocationStateColumn] = value;
                }
            }
            
            public string VehicleType {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.VehicleTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.VehicleTypeColumn] = value;
                }
            }
            
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tableYardListTable.AssetIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.AssetIDColumn] = value;
                }
            }
            
            public string VehicleNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.VehicleNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.VehicleNumberColumn] = value;
                }
            }
            
            public string FreightDesignation {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.FreightDesignationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.FreightDesignationColumn] = value;
                }
            }
            
            public string Storage {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.StorageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.StorageColumn] = value;
                }
            }
            
            public string SealNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.SealNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.SealNumberColumn] = value;
                }
            }
            
            public string Carrier {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.CarrierColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.CarrierColumn] = value;
                }
            }
            
            public string VehicleState {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.VehicleStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.VehicleStateColumn] = value;
                }
            }
            
            public string AssetMoveID {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.AssetMoveIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.AssetMoveIDColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableYardListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableYardListTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardListTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsYardNull() {
                return this.IsNull(this.tableYardListTable.YardColumn);
            }
            
            public void SetYardNull() {
                this[this.tableYardListTable.YardColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tableYardListTable.SectionNumberColumn);
            }
            
            public void SetSectionNumberNull() {
                this[this.tableYardListTable.SectionNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardLocationIDNull() {
                return this.IsNull(this.tableYardListTable.YardLocationIDColumn);
            }
            
            public void SetYardLocationIDNull() {
                this[this.tableYardListTable.YardLocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationNumberNull() {
                return this.IsNull(this.tableYardListTable.LocationNumberColumn);
            }
            
            public void SetLocationNumberNull() {
                this[this.tableYardListTable.LocationNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableYardListTable.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableYardListTable.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationStateNull() {
                return this.IsNull(this.tableYardListTable.LocationStateColumn);
            }
            
            public void SetLocationStateNull() {
                this[this.tableYardListTable.LocationStateColumn] = System.Convert.DBNull;
            }
            
            public bool IsVehicleTypeNull() {
                return this.IsNull(this.tableYardListTable.VehicleTypeColumn);
            }
            
            public void SetVehicleTypeNull() {
                this[this.tableYardListTable.VehicleTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetIDNull() {
                return this.IsNull(this.tableYardListTable.AssetIDColumn);
            }
            
            public void SetAssetIDNull() {
                this[this.tableYardListTable.AssetIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVehicleNumberNull() {
                return this.IsNull(this.tableYardListTable.VehicleNumberColumn);
            }
            
            public void SetVehicleNumberNull() {
                this[this.tableYardListTable.VehicleNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsFreightDesignationNull() {
                return this.IsNull(this.tableYardListTable.FreightDesignationColumn);
            }
            
            public void SetFreightDesignationNull() {
                this[this.tableYardListTable.FreightDesignationColumn] = System.Convert.DBNull;
            }
            
            public bool IsStorageNull() {
                return this.IsNull(this.tableYardListTable.StorageColumn);
            }
            
            public void SetStorageNull() {
                this[this.tableYardListTable.StorageColumn] = System.Convert.DBNull;
            }
            
            public bool IsSealNumberNull() {
                return this.IsNull(this.tableYardListTable.SealNumberColumn);
            }
            
            public void SetSealNumberNull() {
                this[this.tableYardListTable.SealNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNull() {
                return this.IsNull(this.tableYardListTable.CarrierColumn);
            }
            
            public void SetCarrierNull() {
                this[this.tableYardListTable.CarrierColumn] = System.Convert.DBNull;
            }
            
            public bool IsVehicleStateNull() {
                return this.IsNull(this.tableYardListTable.VehicleStateColumn);
            }
            
            public void SetVehicleStateNull() {
                this[this.tableYardListTable.VehicleStateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetMoveIDNull() {
                return this.IsNull(this.tableYardListTable.AssetMoveIDColumn);
            }
            
            public void SetAssetMoveIDNull() {
                this[this.tableYardListTable.AssetMoveIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableYardListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableYardListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableYardListTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableYardListTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableYardListTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableYardListTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardListTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardListTableRowChangeEvent : EventArgs {
            
            private YardListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardListTableRowChangeEvent(YardListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
