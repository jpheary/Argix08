//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class YardLocationTypeDS : DataSet {
        
        private YardLocationTypeListTableDataTable tableYardLocationTypeListTable;
        
        public YardLocationTypeDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected YardLocationTypeDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["YardLocationTypeListTable"] != null)) {
                    this.Tables.Add(new YardLocationTypeListTableDataTable(ds.Tables["YardLocationTypeListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardLocationTypeListTableDataTable YardLocationTypeListTable {
            get {
                return this.tableYardLocationTypeListTable;
            }
        }
        
        public override DataSet Clone() {
            YardLocationTypeDS cln = ((YardLocationTypeDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["YardLocationTypeListTable"] != null)) {
                this.Tables.Add(new YardLocationTypeListTableDataTable(ds.Tables["YardLocationTypeListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableYardLocationTypeListTable = ((YardLocationTypeListTableDataTable)(this.Tables["YardLocationTypeListTable"]));
            if ((this.tableYardLocationTypeListTable != null)) {
                this.tableYardLocationTypeListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "YardLocationTypeDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/YardLocationTypeDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableYardLocationTypeListTable = new YardLocationTypeListTableDataTable();
            this.Tables.Add(this.tableYardLocationTypeListTable);
        }
        
        private bool ShouldSerializeYardLocationTypeListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void YardLocationTypeListTableRowChangeEventHandler(object sender, YardLocationTypeListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationTypeListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            internal YardLocationTypeListTableDataTable() : 
                    base("YardLocationTypeListTable") {
                this.InitClass();
            }
            
            internal YardLocationTypeListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            public YardLocationTypeListTableRow this[int index] {
                get {
                    return ((YardLocationTypeListTableRow)(this.Rows[index]));
                }
            }
            
            public event YardLocationTypeListTableRowChangeEventHandler YardLocationTypeListTableRowChanged;
            
            public event YardLocationTypeListTableRowChangeEventHandler YardLocationTypeListTableRowChanging;
            
            public event YardLocationTypeListTableRowChangeEventHandler YardLocationTypeListTableRowDeleted;
            
            public event YardLocationTypeListTableRowChangeEventHandler YardLocationTypeListTableRowDeleting;
            
            public void AddYardLocationTypeListTableRow(YardLocationTypeListTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardLocationTypeListTableRow AddYardLocationTypeListTableRow(short LocationTypeID, string Description, bool IsActive) {
                YardLocationTypeListTableRow rowYardLocationTypeListTableRow = ((YardLocationTypeListTableRow)(this.NewRow()));
                rowYardLocationTypeListTableRow.ItemArray = new object[] {
                        LocationTypeID,
                        Description,
                        IsActive};
                this.Rows.Add(rowYardLocationTypeListTableRow);
                return rowYardLocationTypeListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardLocationTypeListTableDataTable cln = ((YardLocationTypeListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardLocationTypeListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
            }
            
            private void InitClass() {
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
            }
            
            public YardLocationTypeListTableRow NewYardLocationTypeListTableRow() {
                return ((YardLocationTypeListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardLocationTypeListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardLocationTypeListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardLocationTypeListTableRowChanged != null)) {
                    this.YardLocationTypeListTableRowChanged(this, new YardLocationTypeListTableRowChangeEvent(((YardLocationTypeListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardLocationTypeListTableRowChanging != null)) {
                    this.YardLocationTypeListTableRowChanging(this, new YardLocationTypeListTableRowChangeEvent(((YardLocationTypeListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardLocationTypeListTableRowDeleted != null)) {
                    this.YardLocationTypeListTableRowDeleted(this, new YardLocationTypeListTableRowChangeEvent(((YardLocationTypeListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardLocationTypeListTableRowDeleting != null)) {
                    this.YardLocationTypeListTableRowDeleting(this, new YardLocationTypeListTableRowChangeEvent(((YardLocationTypeListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardLocationTypeListTableRow(YardLocationTypeListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationTypeListTableRow : DataRow {
            
            private YardLocationTypeListTableDataTable tableYardLocationTypeListTable;
            
            internal YardLocationTypeListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardLocationTypeListTable = ((YardLocationTypeListTableDataTable)(this.Table));
            }
            
            public short LocationTypeID {
                get {
                    try {
                        return ((short)(this[this.tableYardLocationTypeListTable.LocationTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationTypeListTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationTypeListTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationTypeListTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableYardLocationTypeListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationTypeListTable.IsActiveColumn] = value;
                }
            }
            
            public bool IsLocationTypeIDNull() {
                return this.IsNull(this.tableYardLocationTypeListTable.LocationTypeIDColumn);
            }
            
            public void SetLocationTypeIDNull() {
                this[this.tableYardLocationTypeListTable.LocationTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableYardLocationTypeListTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableYardLocationTypeListTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableYardLocationTypeListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableYardLocationTypeListTable.IsActiveColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationTypeListTableRowChangeEvent : EventArgs {
            
            private YardLocationTypeListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardLocationTypeListTableRowChangeEvent(YardLocationTypeListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardLocationTypeListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
