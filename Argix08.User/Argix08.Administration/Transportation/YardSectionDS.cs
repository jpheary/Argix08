//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class YardSectionDS : DataSet {
        
        private YardSectionDetailTableDataTable tableYardSectionDetailTable;
        
        private YardSectionListTableDataTable tableYardSectionListTable;
        
        public YardSectionDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected YardSectionDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["YardSectionDetailTable"] != null)) {
                    this.Tables.Add(new YardSectionDetailTableDataTable(ds.Tables["YardSectionDetailTable"]));
                }
                if ((ds.Tables["YardSectionListTable"] != null)) {
                    this.Tables.Add(new YardSectionListTableDataTable(ds.Tables["YardSectionListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardSectionDetailTableDataTable YardSectionDetailTable {
            get {
                return this.tableYardSectionDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardSectionListTableDataTable YardSectionListTable {
            get {
                return this.tableYardSectionListTable;
            }
        }
        
        public override DataSet Clone() {
            YardSectionDS cln = ((YardSectionDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["YardSectionDetailTable"] != null)) {
                this.Tables.Add(new YardSectionDetailTableDataTable(ds.Tables["YardSectionDetailTable"]));
            }
            if ((ds.Tables["YardSectionListTable"] != null)) {
                this.Tables.Add(new YardSectionListTableDataTable(ds.Tables["YardSectionListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableYardSectionDetailTable = ((YardSectionDetailTableDataTable)(this.Tables["YardSectionDetailTable"]));
            if ((this.tableYardSectionDetailTable != null)) {
                this.tableYardSectionDetailTable.InitVars();
            }
            this.tableYardSectionListTable = ((YardSectionListTableDataTable)(this.Tables["YardSectionListTable"]));
            if ((this.tableYardSectionListTable != null)) {
                this.tableYardSectionListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "YardSectionDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/YardSectionDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableYardSectionDetailTable = new YardSectionDetailTableDataTable();
            this.Tables.Add(this.tableYardSectionDetailTable);
            this.tableYardSectionListTable = new YardSectionListTableDataTable();
            this.Tables.Add(this.tableYardSectionListTable);
        }
        
        private bool ShouldSerializeYardSectionDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeYardSectionListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void YardSectionDetailTableRowChangeEventHandler(object sender, YardSectionDetailTableRowChangeEvent e);
        
        public delegate void YardSectionListTableRowChangeEventHandler(object sender, YardSectionListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSectionID;
            
            private DataColumn columnYardID;
            
            private DataColumn columnSectionNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardSectionDetailTableDataTable() : 
                    base("YardSectionDetailTable") {
                this.InitClass();
            }
            
            internal YardSectionDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            internal DataColumn YardIDColumn {
                get {
                    return this.columnYardID;
                }
            }
            
            internal DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardSectionDetailTableRow this[int index] {
                get {
                    return ((YardSectionDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event YardSectionDetailTableRowChangeEventHandler YardSectionDetailTableRowChanged;
            
            public event YardSectionDetailTableRowChangeEventHandler YardSectionDetailTableRowChanging;
            
            public event YardSectionDetailTableRowChangeEventHandler YardSectionDetailTableRowDeleted;
            
            public event YardSectionDetailTableRowChangeEventHandler YardSectionDetailTableRowDeleting;
            
            public void AddYardSectionDetailTableRow(YardSectionDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardSectionDetailTableRow AddYardSectionDetailTableRow(int SectionID, int YardID, string SectionNumber, string Description, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                YardSectionDetailTableRow rowYardSectionDetailTableRow = ((YardSectionDetailTableRow)(this.NewRow()));
                rowYardSectionDetailTableRow.ItemArray = new object[] {
                        SectionID,
                        YardID,
                        SectionNumber,
                        Description,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardSectionDetailTableRow);
                return rowYardSectionDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardSectionDetailTableDataTable cln = ((YardSectionDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardSectionDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnSectionID = this.Columns["SectionID"];
                this.columnYardID = this.Columns["YardID"];
                this.columnSectionNumber = this.Columns["SectionNumber"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnSectionID = new DataColumn("SectionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionID);
                this.columnYardID = new DataColumn("YardID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardID);
                this.columnSectionNumber = new DataColumn("SectionNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnYardID.AllowDBNull = false;
                this.columnSectionNumber.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public YardSectionDetailTableRow NewYardSectionDetailTableRow() {
                return ((YardSectionDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardSectionDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardSectionDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardSectionDetailTableRowChanged != null)) {
                    this.YardSectionDetailTableRowChanged(this, new YardSectionDetailTableRowChangeEvent(((YardSectionDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardSectionDetailTableRowChanging != null)) {
                    this.YardSectionDetailTableRowChanging(this, new YardSectionDetailTableRowChangeEvent(((YardSectionDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardSectionDetailTableRowDeleted != null)) {
                    this.YardSectionDetailTableRowDeleted(this, new YardSectionDetailTableRowChangeEvent(((YardSectionDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardSectionDetailTableRowDeleting != null)) {
                    this.YardSectionDetailTableRowDeleting(this, new YardSectionDetailTableRowChangeEvent(((YardSectionDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardSectionDetailTableRow(YardSectionDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionDetailTableRow : DataRow {
            
            private YardSectionDetailTableDataTable tableYardSectionDetailTable;
            
            internal YardSectionDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardSectionDetailTable = ((YardSectionDetailTableDataTable)(this.Table));
            }
            
            public int SectionID {
                get {
                    try {
                        return ((int)(this[this.tableYardSectionDetailTable.SectionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionDetailTable.SectionIDColumn] = value;
                }
            }
            
            public int YardID {
                get {
                    return ((int)(this[this.tableYardSectionDetailTable.YardIDColumn]));
                }
                set {
                    this[this.tableYardSectionDetailTable.YardIDColumn] = value;
                }
            }
            
            public string SectionNumber {
                get {
                    return ((string)(this[this.tableYardSectionDetailTable.SectionNumberColumn]));
                }
                set {
                    this[this.tableYardSectionDetailTable.SectionNumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionDetailTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableYardSectionDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableYardSectionDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableYardSectionDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableYardSectionDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableYardSectionDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableYardSectionDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableYardSectionDetailTable.SectionIDColumn);
            }
            
            public void SetSectionIDNull() {
                this[this.tableYardSectionDetailTable.SectionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableYardSectionDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableYardSectionDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardSectionDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardSectionDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionDetailTableRowChangeEvent : EventArgs {
            
            private YardSectionDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardSectionDetailTableRowChangeEvent(YardSectionDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardSectionDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnYardID;
            
            private DataColumn columnYardName;
            
            private DataColumn columnYardDescription;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnSectionID;
            
            private DataColumn columnSectionNumber;
            
            private DataColumn columnDescription;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardSectionListTableDataTable() : 
                    base("YardSectionListTable") {
                this.InitClass();
            }
            
            internal YardSectionListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn YardIDColumn {
                get {
                    return this.columnYardID;
                }
            }
            
            internal DataColumn YardNameColumn {
                get {
                    return this.columnYardName;
                }
            }
            
            internal DataColumn YardDescriptionColumn {
                get {
                    return this.columnYardDescription;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            internal DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardSectionListTableRow this[int index] {
                get {
                    return ((YardSectionListTableRow)(this.Rows[index]));
                }
            }
            
            public event YardSectionListTableRowChangeEventHandler YardSectionListTableRowChanged;
            
            public event YardSectionListTableRowChangeEventHandler YardSectionListTableRowChanging;
            
            public event YardSectionListTableRowChangeEventHandler YardSectionListTableRowDeleted;
            
            public event YardSectionListTableRowChangeEventHandler YardSectionListTableRowDeleting;
            
            public void AddYardSectionListTableRow(YardSectionListTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardSectionListTableRow AddYardSectionListTableRow(int YardID, string YardName, string YardDescription, int TerminalID, string Terminal, int SectionID, string SectionNumber, string Description, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                YardSectionListTableRow rowYardSectionListTableRow = ((YardSectionListTableRow)(this.NewRow()));
                rowYardSectionListTableRow.ItemArray = new object[] {
                        YardID,
                        YardName,
                        YardDescription,
                        TerminalID,
                        Terminal,
                        SectionID,
                        SectionNumber,
                        Description,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardSectionListTableRow);
                return rowYardSectionListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardSectionListTableDataTable cln = ((YardSectionListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardSectionListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnYardID = this.Columns["YardID"];
                this.columnYardName = this.Columns["YardName"];
                this.columnYardDescription = this.Columns["YardDescription"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnSectionID = this.Columns["SectionID"];
                this.columnSectionNumber = this.Columns["SectionNumber"];
                this.columnDescription = this.Columns["Description"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnYardID = new DataColumn("YardID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardID);
                this.columnYardName = new DataColumn("YardName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardName);
                this.columnYardDescription = new DataColumn("YardDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardDescription);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnSectionID = new DataColumn("SectionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionID);
                this.columnSectionNumber = new DataColumn("SectionNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionNumber);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public YardSectionListTableRow NewYardSectionListTableRow() {
                return ((YardSectionListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardSectionListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardSectionListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardSectionListTableRowChanged != null)) {
                    this.YardSectionListTableRowChanged(this, new YardSectionListTableRowChangeEvent(((YardSectionListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardSectionListTableRowChanging != null)) {
                    this.YardSectionListTableRowChanging(this, new YardSectionListTableRowChangeEvent(((YardSectionListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardSectionListTableRowDeleted != null)) {
                    this.YardSectionListTableRowDeleted(this, new YardSectionListTableRowChangeEvent(((YardSectionListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardSectionListTableRowDeleting != null)) {
                    this.YardSectionListTableRowDeleting(this, new YardSectionListTableRowChangeEvent(((YardSectionListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardSectionListTableRow(YardSectionListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionListTableRow : DataRow {
            
            private YardSectionListTableDataTable tableYardSectionListTable;
            
            internal YardSectionListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardSectionListTable = ((YardSectionListTableDataTable)(this.Table));
            }
            
            public int YardID {
                get {
                    try {
                        return ((int)(this[this.tableYardSectionListTable.YardIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.YardIDColumn] = value;
                }
            }
            
            public string YardName {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.YardNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.YardNameColumn] = value;
                }
            }
            
            public string YardDescription {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.YardDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.YardDescriptionColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableYardSectionListTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.TerminalColumn] = value;
                }
            }
            
            public int SectionID {
                get {
                    try {
                        return ((int)(this[this.tableYardSectionListTable.SectionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.SectionIDColumn] = value;
                }
            }
            
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.SectionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.SectionNumberColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.DescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableYardSectionListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableYardSectionListTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardSectionListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardSectionListTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsYardIDNull() {
                return this.IsNull(this.tableYardSectionListTable.YardIDColumn);
            }
            
            public void SetYardIDNull() {
                this[this.tableYardSectionListTable.YardIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardNameNull() {
                return this.IsNull(this.tableYardSectionListTable.YardNameColumn);
            }
            
            public void SetYardNameNull() {
                this[this.tableYardSectionListTable.YardNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardDescriptionNull() {
                return this.IsNull(this.tableYardSectionListTable.YardDescriptionColumn);
            }
            
            public void SetYardDescriptionNull() {
                this[this.tableYardSectionListTable.YardDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableYardSectionListTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableYardSectionListTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableYardSectionListTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableYardSectionListTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableYardSectionListTable.SectionIDColumn);
            }
            
            public void SetSectionIDNull() {
                this[this.tableYardSectionListTable.SectionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tableYardSectionListTable.SectionNumberColumn);
            }
            
            public void SetSectionNumberNull() {
                this[this.tableYardSectionListTable.SectionNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableYardSectionListTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableYardSectionListTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableYardSectionListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableYardSectionListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableYardSectionListTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableYardSectionListTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableYardSectionListTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableYardSectionListTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardSectionListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardSectionListTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardSectionListTableRowChangeEvent : EventArgs {
            
            private YardSectionListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardSectionListTableRowChangeEvent(YardSectionListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardSectionListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
