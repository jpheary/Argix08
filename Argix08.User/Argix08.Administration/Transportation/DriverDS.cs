//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DriverDS : DataSet {
        
        private DriverListTableDataTable tableDriverListTable;
        
        private DriverDetailTableDataTable tableDriverDetailTable;
        
        private DriverViewTableDataTable tableDriverViewTable;
        
        public DriverDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DriverDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DriverListTable"] != null)) {
                    this.Tables.Add(new DriverListTableDataTable(ds.Tables["DriverListTable"]));
                }
                if ((ds.Tables["DriverDetailTable"] != null)) {
                    this.Tables.Add(new DriverDetailTableDataTable(ds.Tables["DriverDetailTable"]));
                }
                if ((ds.Tables["DriverViewTable"] != null)) {
                    this.Tables.Add(new DriverViewTableDataTable(ds.Tables["DriverViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverListTableDataTable DriverListTable {
            get {
                return this.tableDriverListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverDetailTableDataTable DriverDetailTable {
            get {
                return this.tableDriverDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverViewTableDataTable DriverViewTable {
            get {
                return this.tableDriverViewTable;
            }
        }
        
        public override DataSet Clone() {
            DriverDS cln = ((DriverDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DriverListTable"] != null)) {
                this.Tables.Add(new DriverListTableDataTable(ds.Tables["DriverListTable"]));
            }
            if ((ds.Tables["DriverDetailTable"] != null)) {
                this.Tables.Add(new DriverDetailTableDataTable(ds.Tables["DriverDetailTable"]));
            }
            if ((ds.Tables["DriverViewTable"] != null)) {
                this.Tables.Add(new DriverViewTableDataTable(ds.Tables["DriverViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDriverListTable = ((DriverListTableDataTable)(this.Tables["DriverListTable"]));
            if ((this.tableDriverListTable != null)) {
                this.tableDriverListTable.InitVars();
            }
            this.tableDriverDetailTable = ((DriverDetailTableDataTable)(this.Tables["DriverDetailTable"]));
            if ((this.tableDriverDetailTable != null)) {
                this.tableDriverDetailTable.InitVars();
            }
            this.tableDriverViewTable = ((DriverViewTableDataTable)(this.Tables["DriverViewTable"]));
            if ((this.tableDriverViewTable != null)) {
                this.tableDriverViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DriverDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DriverDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDriverListTable = new DriverListTableDataTable();
            this.Tables.Add(this.tableDriverListTable);
            this.tableDriverDetailTable = new DriverDetailTableDataTable();
            this.Tables.Add(this.tableDriverDetailTable);
            this.tableDriverViewTable = new DriverViewTableDataTable();
            this.Tables.Add(this.tableDriverViewTable);
        }
        
        private bool ShouldSerializeDriverListTable() {
            return false;
        }
        
        private bool ShouldSerializeDriverDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeDriverViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DriverListTableRowChangeEventHandler(object sender, DriverListTableRowChangeEvent e);
        
        public delegate void DriverDetailTableRowChangeEventHandler(object sender, DriverDetailTableRowChangeEvent e);
        
        public delegate void DriverViewTableRowChangeEventHandler(object sender, DriverViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnDriverID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnFullName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DriverListTableDataTable() : 
                    base("DriverListTable") {
                this.InitClass();
            }
            
            internal DriverListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DriverListTableRow this[int index] {
                get {
                    return ((DriverListTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverListTableRowChangeEventHandler DriverListTableRowChanged;
            
            public event DriverListTableRowChangeEventHandler DriverListTableRowChanging;
            
            public event DriverListTableRowChangeEventHandler DriverListTableRowDeleted;
            
            public event DriverListTableRowChangeEventHandler DriverListTableRowDeleting;
            
            public void AddDriverListTableRow(DriverListTableRow row) {
                this.Rows.Add(row);
            }
            
            public DriverListTableRow AddDriverListTableRow(int CarrierID, int DriverID, string FirstName, string LastName, string FullName, string Phone, int TerminalID, string Terminal, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                DriverListTableRow rowDriverListTableRow = ((DriverListTableRow)(this.NewRow()));
                rowDriverListTableRow.ItemArray = new object[] {
                        CarrierID,
                        DriverID,
                        FirstName,
                        LastName,
                        FullName,
                        Phone,
                        TerminalID,
                        Terminal,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDriverListTableRow);
                return rowDriverListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DriverListTableDataTable cln = ((DriverListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DriverListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnDriverID = this.Columns["DriverID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnFullName = this.Columns["FullName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnDriverID = new DataColumn("DriverID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public DriverListTableRow NewDriverListTableRow() {
                return ((DriverListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DriverListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DriverListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverListTableRowChanged != null)) {
                    this.DriverListTableRowChanged(this, new DriverListTableRowChangeEvent(((DriverListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverListTableRowChanging != null)) {
                    this.DriverListTableRowChanging(this, new DriverListTableRowChangeEvent(((DriverListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverListTableRowDeleted != null)) {
                    this.DriverListTableRowDeleted(this, new DriverListTableRowChangeEvent(((DriverListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverListTableRowDeleting != null)) {
                    this.DriverListTableRowDeleting(this, new DriverListTableRowChangeEvent(((DriverListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDriverListTableRow(DriverListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverListTableRow : DataRow {
            
            private DriverListTableDataTable tableDriverListTable;
            
            internal DriverListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverListTable = ((DriverListTableDataTable)(this.Table));
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableDriverListTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.CarrierIDColumn] = value;
                }
            }
            
            public int DriverID {
                get {
                    try {
                        return ((int)(this[this.tableDriverListTable.DriverIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.DriverIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.LastNameColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.FullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.FullNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.PhoneColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableDriverListTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.TerminalColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableDriverListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDriverListTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableDriverListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverListTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableDriverListTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableDriverListTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverIDNull() {
                return this.IsNull(this.tableDriverListTable.DriverIDColumn);
            }
            
            public void SetDriverIDNull() {
                this[this.tableDriverListTable.DriverIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableDriverListTable.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableDriverListTable.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableDriverListTable.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableDriverListTable.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tableDriverListTable.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tableDriverListTable.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableDriverListTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableDriverListTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableDriverListTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableDriverListTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableDriverListTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableDriverListTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableDriverListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableDriverListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableDriverListTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableDriverListTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableDriverListTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableDriverListTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDriverListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableDriverListTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverListTableRowChangeEvent : EventArgs {
            
            private DriverListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DriverListTableRowChangeEvent(DriverListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DriverListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDriverID;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnLastName;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DriverDetailTableDataTable() : 
                    base("DriverDetailTable") {
                this.InitClass();
            }
            
            internal DriverDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DriverDetailTableRow this[int index] {
                get {
                    return ((DriverDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverDetailTableRowChangeEventHandler DriverDetailTableRowChanged;
            
            public event DriverDetailTableRowChangeEventHandler DriverDetailTableRowChanging;
            
            public event DriverDetailTableRowChangeEventHandler DriverDetailTableRowDeleted;
            
            public event DriverDetailTableRowChangeEventHandler DriverDetailTableRowDeleting;
            
            public void AddDriverDetailTableRow(DriverDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public DriverDetailTableRow AddDriverDetailTableRow(int DriverID, int TerminalID, string LastName, string FirstName, string Phone, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                DriverDetailTableRow rowDriverDetailTableRow = ((DriverDetailTableRow)(this.NewRow()));
                rowDriverDetailTableRow.ItemArray = new object[] {
                        DriverID,
                        TerminalID,
                        LastName,
                        FirstName,
                        Phone,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDriverDetailTableRow);
                return rowDriverDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DriverDetailTableDataTable cln = ((DriverDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DriverDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnDriverID = this.Columns["DriverID"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnLastName = this.Columns["LastName"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnDriverID = new DataColumn("DriverID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverID);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnDriverID.AllowDBNull = false;
                this.columnTerminalID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
                this.columnRowVersion.AllowDBNull = false;
            }
            
            public DriverDetailTableRow NewDriverDetailTableRow() {
                return ((DriverDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DriverDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DriverDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverDetailTableRowChanged != null)) {
                    this.DriverDetailTableRowChanged(this, new DriverDetailTableRowChangeEvent(((DriverDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverDetailTableRowChanging != null)) {
                    this.DriverDetailTableRowChanging(this, new DriverDetailTableRowChangeEvent(((DriverDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverDetailTableRowDeleted != null)) {
                    this.DriverDetailTableRowDeleted(this, new DriverDetailTableRowChangeEvent(((DriverDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverDetailTableRowDeleting != null)) {
                    this.DriverDetailTableRowDeleting(this, new DriverDetailTableRowChangeEvent(((DriverDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDriverDetailTableRow(DriverDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverDetailTableRow : DataRow {
            
            private DriverDetailTableDataTable tableDriverDetailTable;
            
            internal DriverDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverDetailTable = ((DriverDetailTableDataTable)(this.Table));
            }
            
            public int DriverID {
                get {
                    return ((int)(this[this.tableDriverDetailTable.DriverIDColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.DriverIDColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    return ((int)(this[this.tableDriverDetailTable.TerminalIDColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.TerminalIDColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableDriverDetailTable.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverDetailTable.LastNameColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableDriverDetailTable.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverDetailTable.FirstNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableDriverDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverDetailTable.PhoneColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableDriverDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableDriverDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableDriverDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    return ((string)(this[this.tableDriverDetailTable.RowVersionColumn]));
                }
                set {
                    this[this.tableDriverDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableDriverDetailTable.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableDriverDetailTable.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableDriverDetailTable.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableDriverDetailTable.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableDriverDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableDriverDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverDetailTableRowChangeEvent : EventArgs {
            
            private DriverDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DriverDetailTableRowChangeEvent(DriverDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DriverDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnDriverID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnFullName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal DriverViewTableDataTable() : 
                    base("DriverViewTable") {
                this.InitClass();
            }
            
            internal DriverViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public DriverViewTableRow this[int index] {
                get {
                    return ((DriverViewTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverViewTableRowChangeEventHandler DriverViewTableRowChanged;
            
            public event DriverViewTableRowChangeEventHandler DriverViewTableRowChanging;
            
            public event DriverViewTableRowChangeEventHandler DriverViewTableRowDeleted;
            
            public event DriverViewTableRowChangeEventHandler DriverViewTableRowDeleting;
            
            public void AddDriverViewTableRow(DriverViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public DriverViewTableRow AddDriverViewTableRow(int CarrierID, int DriverID, string FirstName, string LastName, string FullName, string Phone, int TerminalID, string Terminal, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                DriverViewTableRow rowDriverViewTableRow = ((DriverViewTableRow)(this.NewRow()));
                rowDriverViewTableRow.ItemArray = new object[] {
                        CarrierID,
                        DriverID,
                        FirstName,
                        LastName,
                        FullName,
                        Phone,
                        TerminalID,
                        Terminal,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowDriverViewTableRow);
                return rowDriverViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DriverViewTableDataTable cln = ((DriverViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DriverViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnDriverID = this.Columns["DriverID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnFullName = this.Columns["FullName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnDriverID = new DataColumn("DriverID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public DriverViewTableRow NewDriverViewTableRow() {
                return ((DriverViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DriverViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DriverViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverViewTableRowChanged != null)) {
                    this.DriverViewTableRowChanged(this, new DriverViewTableRowChangeEvent(((DriverViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverViewTableRowChanging != null)) {
                    this.DriverViewTableRowChanging(this, new DriverViewTableRowChangeEvent(((DriverViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverViewTableRowDeleted != null)) {
                    this.DriverViewTableRowDeleted(this, new DriverViewTableRowChangeEvent(((DriverViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverViewTableRowDeleting != null)) {
                    this.DriverViewTableRowDeleting(this, new DriverViewTableRowChangeEvent(((DriverViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDriverViewTableRow(DriverViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverViewTableRow : DataRow {
            
            private DriverViewTableDataTable tableDriverViewTable;
            
            internal DriverViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverViewTable = ((DriverViewTableDataTable)(this.Table));
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableDriverViewTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.CarrierIDColumn] = value;
                }
            }
            
            public int DriverID {
                get {
                    try {
                        return ((int)(this[this.tableDriverViewTable.DriverIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.DriverIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.LastNameColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.FullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.FullNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.PhoneColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableDriverViewTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.TerminalColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableDriverViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDriverViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableDriverViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableDriverViewTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableDriverViewTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverIDNull() {
                return this.IsNull(this.tableDriverViewTable.DriverIDColumn);
            }
            
            public void SetDriverIDNull() {
                this[this.tableDriverViewTable.DriverIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableDriverViewTable.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableDriverViewTable.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableDriverViewTable.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableDriverViewTable.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tableDriverViewTable.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tableDriverViewTable.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableDriverViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableDriverViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableDriverViewTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableDriverViewTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableDriverViewTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableDriverViewTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableDriverViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableDriverViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableDriverViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableDriverViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableDriverViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableDriverViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDriverViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableDriverViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DriverViewTableRowChangeEvent : EventArgs {
            
            private DriverViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public DriverViewTableRowChangeEvent(DriverViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DriverViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
