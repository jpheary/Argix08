//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class YardLocationDS : DataSet {
        
        private YardLocationDetailTableDataTable tableYardLocationDetailTable;
        
        private YardLocationViewTableDataTable tableYardLocationViewTable;
        
        public YardLocationDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected YardLocationDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["YardLocationDetailTable"] != null)) {
                    this.Tables.Add(new YardLocationDetailTableDataTable(ds.Tables["YardLocationDetailTable"]));
                }
                if ((ds.Tables["YardLocationViewTable"] != null)) {
                    this.Tables.Add(new YardLocationViewTableDataTable(ds.Tables["YardLocationViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardLocationDetailTableDataTable YardLocationDetailTable {
            get {
                return this.tableYardLocationDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public YardLocationViewTableDataTable YardLocationViewTable {
            get {
                return this.tableYardLocationViewTable;
            }
        }
        
        public override DataSet Clone() {
            YardLocationDS cln = ((YardLocationDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["YardLocationDetailTable"] != null)) {
                this.Tables.Add(new YardLocationDetailTableDataTable(ds.Tables["YardLocationDetailTable"]));
            }
            if ((ds.Tables["YardLocationViewTable"] != null)) {
                this.Tables.Add(new YardLocationViewTableDataTable(ds.Tables["YardLocationViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableYardLocationDetailTable = ((YardLocationDetailTableDataTable)(this.Tables["YardLocationDetailTable"]));
            if ((this.tableYardLocationDetailTable != null)) {
                this.tableYardLocationDetailTable.InitVars();
            }
            this.tableYardLocationViewTable = ((YardLocationViewTableDataTable)(this.Tables["YardLocationViewTable"]));
            if ((this.tableYardLocationViewTable != null)) {
                this.tableYardLocationViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "YardLocationDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/YardLocationDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableYardLocationDetailTable = new YardLocationDetailTableDataTable();
            this.Tables.Add(this.tableYardLocationDetailTable);
            this.tableYardLocationViewTable = new YardLocationViewTableDataTable();
            this.Tables.Add(this.tableYardLocationViewTable);
        }
        
        private bool ShouldSerializeYardLocationDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeYardLocationViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void YardLocationDetailTableRowChangeEventHandler(object sender, YardLocationDetailTableRowChangeEvent e);
        
        public delegate void YardLocationViewTableRowChangeEventHandler(object sender, YardLocationViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnYardLocationID;
            
            private DataColumn columnSectionID;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardLocationDetailTableDataTable() : 
                    base("YardLocationDetailTable") {
                this.InitClass();
            }
            
            internal YardLocationDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn YardLocationIDColumn {
                get {
                    return this.columnYardLocationID;
                }
            }
            
            internal DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardLocationDetailTableRow this[int index] {
                get {
                    return ((YardLocationDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event YardLocationDetailTableRowChangeEventHandler YardLocationDetailTableRowChanged;
            
            public event YardLocationDetailTableRowChangeEventHandler YardLocationDetailTableRowChanging;
            
            public event YardLocationDetailTableRowChangeEventHandler YardLocationDetailTableRowDeleted;
            
            public event YardLocationDetailTableRowChangeEventHandler YardLocationDetailTableRowDeleting;
            
            public void AddYardLocationDetailTableRow(YardLocationDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardLocationDetailTableRow AddYardLocationDetailTableRow(int SectionID, short LocationTypeID, string Number, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                YardLocationDetailTableRow rowYardLocationDetailTableRow = ((YardLocationDetailTableRow)(this.NewRow()));
                rowYardLocationDetailTableRow.ItemArray = new object[] {
                        null,
                        SectionID,
                        LocationTypeID,
                        Number,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardLocationDetailTableRow);
                return rowYardLocationDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardLocationDetailTableDataTable cln = ((YardLocationDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardLocationDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnYardLocationID = this.Columns["YardLocationID"];
                this.columnSectionID = this.Columns["SectionID"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnNumber = this.Columns["Number"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnYardLocationID = new DataColumn("YardLocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardLocationID);
                this.columnSectionID = new DataColumn("SectionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionID);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnYardLocationID.AutoIncrement = true;
                this.columnYardLocationID.AllowDBNull = false;
                this.columnYardLocationID.ReadOnly = true;
                this.columnSectionID.AllowDBNull = false;
                this.columnLocationTypeID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public YardLocationDetailTableRow NewYardLocationDetailTableRow() {
                return ((YardLocationDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardLocationDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardLocationDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardLocationDetailTableRowChanged != null)) {
                    this.YardLocationDetailTableRowChanged(this, new YardLocationDetailTableRowChangeEvent(((YardLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardLocationDetailTableRowChanging != null)) {
                    this.YardLocationDetailTableRowChanging(this, new YardLocationDetailTableRowChangeEvent(((YardLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardLocationDetailTableRowDeleted != null)) {
                    this.YardLocationDetailTableRowDeleted(this, new YardLocationDetailTableRowChangeEvent(((YardLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardLocationDetailTableRowDeleting != null)) {
                    this.YardLocationDetailTableRowDeleting(this, new YardLocationDetailTableRowChangeEvent(((YardLocationDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardLocationDetailTableRow(YardLocationDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationDetailTableRow : DataRow {
            
            private YardLocationDetailTableDataTable tableYardLocationDetailTable;
            
            internal YardLocationDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardLocationDetailTable = ((YardLocationDetailTableDataTable)(this.Table));
            }
            
            public int YardLocationID {
                get {
                    return ((int)(this[this.tableYardLocationDetailTable.YardLocationIDColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.YardLocationIDColumn] = value;
                }
            }
            
            public int SectionID {
                get {
                    return ((int)(this[this.tableYardLocationDetailTable.SectionIDColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.SectionIDColumn] = value;
                }
            }
            
            public short LocationTypeID {
                get {
                    return ((short)(this[this.tableYardLocationDetailTable.LocationTypeIDColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableYardLocationDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.NumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableYardLocationDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableYardLocationDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableYardLocationDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableYardLocationDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardLocationDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardLocationDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationDetailTableRowChangeEvent : EventArgs {
            
            private YardLocationDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardLocationDetailTableRowChangeEvent(YardLocationDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardLocationDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnYardID;
            
            private DataColumn columnYardName;
            
            private DataColumn columnYardDescription;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnSectionID;
            
            private DataColumn columnSectionNumber;
            
            private DataColumn columnSection;
            
            private DataColumn columnYardLocationID;
            
            private DataColumn columnNumber;
            
            private DataColumn columnLocationTypeID;
            
            private DataColumn columnLocationType;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal YardLocationViewTableDataTable() : 
                    base("YardLocationViewTable") {
                this.InitClass();
            }
            
            internal YardLocationViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn YardIDColumn {
                get {
                    return this.columnYardID;
                }
            }
            
            internal DataColumn YardNameColumn {
                get {
                    return this.columnYardName;
                }
            }
            
            internal DataColumn YardDescriptionColumn {
                get {
                    return this.columnYardDescription;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            internal DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            internal DataColumn SectionColumn {
                get {
                    return this.columnSection;
                }
            }
            
            internal DataColumn YardLocationIDColumn {
                get {
                    return this.columnYardLocationID;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LocationTypeIDColumn {
                get {
                    return this.columnLocationTypeID;
                }
            }
            
            internal DataColumn LocationTypeColumn {
                get {
                    return this.columnLocationType;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public YardLocationViewTableRow this[int index] {
                get {
                    return ((YardLocationViewTableRow)(this.Rows[index]));
                }
            }
            
            public event YardLocationViewTableRowChangeEventHandler YardLocationViewTableRowChanged;
            
            public event YardLocationViewTableRowChangeEventHandler YardLocationViewTableRowChanging;
            
            public event YardLocationViewTableRowChangeEventHandler YardLocationViewTableRowDeleted;
            
            public event YardLocationViewTableRowChangeEventHandler YardLocationViewTableRowDeleting;
            
            public void AddYardLocationViewTableRow(YardLocationViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public YardLocationViewTableRow AddYardLocationViewTableRow(
                        int YardID, 
                        string YardName, 
                        string YardDescription, 
                        int TerminalID, 
                        string Terminal, 
                        int SectionID, 
                        string SectionNumber, 
                        string Section, 
                        int YardLocationID, 
                        string Number, 
                        short LocationTypeID, 
                        string LocationType, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                YardLocationViewTableRow rowYardLocationViewTableRow = ((YardLocationViewTableRow)(this.NewRow()));
                rowYardLocationViewTableRow.ItemArray = new object[] {
                        YardID,
                        YardName,
                        YardDescription,
                        TerminalID,
                        Terminal,
                        SectionID,
                        SectionNumber,
                        Section,
                        YardLocationID,
                        Number,
                        LocationTypeID,
                        LocationType,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowYardLocationViewTableRow);
                return rowYardLocationViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                YardLocationViewTableDataTable cln = ((YardLocationViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new YardLocationViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnYardID = this.Columns["YardID"];
                this.columnYardName = this.Columns["YardName"];
                this.columnYardDescription = this.Columns["YardDescription"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnSectionID = this.Columns["SectionID"];
                this.columnSectionNumber = this.Columns["SectionNumber"];
                this.columnSection = this.Columns["Section"];
                this.columnYardLocationID = this.Columns["YardLocationID"];
                this.columnNumber = this.Columns["Number"];
                this.columnLocationTypeID = this.Columns["LocationTypeID"];
                this.columnLocationType = this.Columns["LocationType"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnYardID = new DataColumn("YardID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardID);
                this.columnYardName = new DataColumn("YardName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardName);
                this.columnYardDescription = new DataColumn("YardDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardDescription);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnSectionID = new DataColumn("SectionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionID);
                this.columnSectionNumber = new DataColumn("SectionNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionNumber);
                this.columnSection = new DataColumn("Section", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSection);
                this.columnYardLocationID = new DataColumn("YardLocationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYardLocationID);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnLocationTypeID = new DataColumn("LocationTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationTypeID);
                this.columnLocationType = new DataColumn("LocationType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationType);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public YardLocationViewTableRow NewYardLocationViewTableRow() {
                return ((YardLocationViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new YardLocationViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(YardLocationViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.YardLocationViewTableRowChanged != null)) {
                    this.YardLocationViewTableRowChanged(this, new YardLocationViewTableRowChangeEvent(((YardLocationViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.YardLocationViewTableRowChanging != null)) {
                    this.YardLocationViewTableRowChanging(this, new YardLocationViewTableRowChangeEvent(((YardLocationViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.YardLocationViewTableRowDeleted != null)) {
                    this.YardLocationViewTableRowDeleted(this, new YardLocationViewTableRowChangeEvent(((YardLocationViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.YardLocationViewTableRowDeleting != null)) {
                    this.YardLocationViewTableRowDeleting(this, new YardLocationViewTableRowChangeEvent(((YardLocationViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveYardLocationViewTableRow(YardLocationViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationViewTableRow : DataRow {
            
            private YardLocationViewTableDataTable tableYardLocationViewTable;
            
            internal YardLocationViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableYardLocationViewTable = ((YardLocationViewTableDataTable)(this.Table));
            }
            
            public int YardID {
                get {
                    try {
                        return ((int)(this[this.tableYardLocationViewTable.YardIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.YardIDColumn] = value;
                }
            }
            
            public string YardName {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.YardNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.YardNameColumn] = value;
                }
            }
            
            public string YardDescription {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.YardDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.YardDescriptionColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableYardLocationViewTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.TerminalColumn] = value;
                }
            }
            
            public int SectionID {
                get {
                    try {
                        return ((int)(this[this.tableYardLocationViewTable.SectionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.SectionIDColumn] = value;
                }
            }
            
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.SectionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.SectionNumberColumn] = value;
                }
            }
            
            public string Section {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.SectionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.SectionColumn] = value;
                }
            }
            
            public int YardLocationID {
                get {
                    try {
                        return ((int)(this[this.tableYardLocationViewTable.YardLocationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.YardLocationIDColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.NumberColumn] = value;
                }
            }
            
            public short LocationTypeID {
                get {
                    try {
                        return ((short)(this[this.tableYardLocationViewTable.LocationTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.LocationTypeIDColumn] = value;
                }
            }
            
            public string LocationType {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.LocationTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.LocationTypeColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableYardLocationViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableYardLocationViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableYardLocationViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableYardLocationViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsYardIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.YardIDColumn);
            }
            
            public void SetYardIDNull() {
                this[this.tableYardLocationViewTable.YardIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardNameNull() {
                return this.IsNull(this.tableYardLocationViewTable.YardNameColumn);
            }
            
            public void SetYardNameNull() {
                this[this.tableYardLocationViewTable.YardNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardDescriptionNull() {
                return this.IsNull(this.tableYardLocationViewTable.YardDescriptionColumn);
            }
            
            public void SetYardDescriptionNull() {
                this[this.tableYardLocationViewTable.YardDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableYardLocationViewTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableYardLocationViewTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableYardLocationViewTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.SectionIDColumn);
            }
            
            public void SetSectionIDNull() {
                this[this.tableYardLocationViewTable.SectionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tableYardLocationViewTable.SectionNumberColumn);
            }
            
            public void SetSectionNumberNull() {
                this[this.tableYardLocationViewTable.SectionNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionNull() {
                return this.IsNull(this.tableYardLocationViewTable.SectionColumn);
            }
            
            public void SetSectionNull() {
                this[this.tableYardLocationViewTable.SectionColumn] = System.Convert.DBNull;
            }
            
            public bool IsYardLocationIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.YardLocationIDColumn);
            }
            
            public void SetYardLocationIDNull() {
                this[this.tableYardLocationViewTable.YardLocationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableYardLocationViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableYardLocationViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationTypeIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.LocationTypeIDColumn);
            }
            
            public void SetLocationTypeIDNull() {
                this[this.tableYardLocationViewTable.LocationTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationTypeNull() {
                return this.IsNull(this.tableYardLocationViewTable.LocationTypeColumn);
            }
            
            public void SetLocationTypeNull() {
                this[this.tableYardLocationViewTable.LocationTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableYardLocationViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableYardLocationViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableYardLocationViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableYardLocationViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableYardLocationViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableYardLocationViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableYardLocationViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableYardLocationViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class YardLocationViewTableRowChangeEvent : EventArgs {
            
            private YardLocationViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public YardLocationViewTableRowChangeEvent(YardLocationViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public YardLocationViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
