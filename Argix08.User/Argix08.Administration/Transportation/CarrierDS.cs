//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CarrierDS : DataSet {
        
        private CarrierDetailTableDataTable tableCarrierDetailTable;
        
        private CarrierListTableDataTable tableCarrierListTable;
        
        private CarrierViewTableDataTable tableCarrierViewTable;
        
        public CarrierDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CarrierDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CarrierDetailTable"] != null)) {
                    this.Tables.Add(new CarrierDetailTableDataTable(ds.Tables["CarrierDetailTable"]));
                }
                if ((ds.Tables["CarrierListTable"] != null)) {
                    this.Tables.Add(new CarrierListTableDataTable(ds.Tables["CarrierListTable"]));
                }
                if ((ds.Tables["CarrierViewTable"] != null)) {
                    this.Tables.Add(new CarrierViewTableDataTable(ds.Tables["CarrierViewTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CarrierDetailTableDataTable CarrierDetailTable {
            get {
                return this.tableCarrierDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CarrierListTableDataTable CarrierListTable {
            get {
                return this.tableCarrierListTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CarrierViewTableDataTable CarrierViewTable {
            get {
                return this.tableCarrierViewTable;
            }
        }
        
        public override DataSet Clone() {
            CarrierDS cln = ((CarrierDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CarrierDetailTable"] != null)) {
                this.Tables.Add(new CarrierDetailTableDataTable(ds.Tables["CarrierDetailTable"]));
            }
            if ((ds.Tables["CarrierListTable"] != null)) {
                this.Tables.Add(new CarrierListTableDataTable(ds.Tables["CarrierListTable"]));
            }
            if ((ds.Tables["CarrierViewTable"] != null)) {
                this.Tables.Add(new CarrierViewTableDataTable(ds.Tables["CarrierViewTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCarrierDetailTable = ((CarrierDetailTableDataTable)(this.Tables["CarrierDetailTable"]));
            if ((this.tableCarrierDetailTable != null)) {
                this.tableCarrierDetailTable.InitVars();
            }
            this.tableCarrierListTable = ((CarrierListTableDataTable)(this.Tables["CarrierListTable"]));
            if ((this.tableCarrierListTable != null)) {
                this.tableCarrierListTable.InitVars();
            }
            this.tableCarrierViewTable = ((CarrierViewTableDataTable)(this.Tables["CarrierViewTable"]));
            if ((this.tableCarrierViewTable != null)) {
                this.tableCarrierViewTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "CarrierDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/CarrierDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCarrierDetailTable = new CarrierDetailTableDataTable();
            this.Tables.Add(this.tableCarrierDetailTable);
            this.tableCarrierListTable = new CarrierListTableDataTable();
            this.Tables.Add(this.tableCarrierListTable);
            this.tableCarrierViewTable = new CarrierViewTableDataTable();
            this.Tables.Add(this.tableCarrierViewTable);
        }
        
        private bool ShouldSerializeCarrierDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeCarrierListTable() {
            return false;
        }
        
        private bool ShouldSerializeCarrierViewTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CarrierDetailTableRowChangeEventHandler(object sender, CarrierDetailTableRowChangeEvent e);
        
        public delegate void CarrierListTableRowChangeEventHandler(object sender, CarrierListTableRowChangeEvent e);
        
        public delegate void CarrierViewTableRowChangeEventHandler(object sender, CarrierViewTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnCarrierName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnControlTrailers;
            
            private DataColumn columnControlDrivers;
            
            private DataColumn columnSCAC;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal CarrierDetailTableDataTable() : 
                    base("CarrierDetailTable") {
                this.InitClass();
            }
            
            internal CarrierDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ControlTrailersColumn {
                get {
                    return this.columnControlTrailers;
                }
            }
            
            internal DataColumn ControlDriversColumn {
                get {
                    return this.columnControlDrivers;
                }
            }
            
            internal DataColumn SCACColumn {
                get {
                    return this.columnSCAC;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CarrierDetailTableRow this[int index] {
                get {
                    return ((CarrierDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event CarrierDetailTableRowChangeEventHandler CarrierDetailTableRowChanged;
            
            public event CarrierDetailTableRowChangeEventHandler CarrierDetailTableRowChanging;
            
            public event CarrierDetailTableRowChangeEventHandler CarrierDetailTableRowDeleted;
            
            public event CarrierDetailTableRowChangeEventHandler CarrierDetailTableRowDeleting;
            
            public void AddCarrierDetailTableRow(CarrierDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public CarrierDetailTableRow AddCarrierDetailTableRow(
                        int CarrierID, 
                        string CarrierName, 
                        string Number, 
                        bool ControlTrailers, 
                        bool ControlDrivers, 
                        string SCAC, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                CarrierDetailTableRow rowCarrierDetailTableRow = ((CarrierDetailTableRow)(this.NewRow()));
                rowCarrierDetailTableRow.ItemArray = new object[] {
                        CarrierID,
                        CarrierName,
                        Number,
                        ControlTrailers,
                        ControlDrivers,
                        SCAC,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowCarrierDetailTableRow);
                return rowCarrierDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CarrierDetailTableDataTable cln = ((CarrierDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CarrierDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnCarrierName = this.Columns["CarrierName"];
                this.columnNumber = this.Columns["Number"];
                this.columnControlTrailers = this.Columns["ControlTrailers"];
                this.columnControlDrivers = this.Columns["ControlDrivers"];
                this.columnSCAC = this.Columns["SCAC"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnCarrierName = new DataColumn("CarrierName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnControlTrailers = new DataColumn("ControlTrailers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlTrailers);
                this.columnControlDrivers = new DataColumn("ControlDrivers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlDrivers);
                this.columnSCAC = new DataColumn("SCAC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSCAC);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnNumber.AllowDBNull = false;
                this.columnControlTrailers.AllowDBNull = false;
                this.columnControlDrivers.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnAddressLine1.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryID.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public CarrierDetailTableRow NewCarrierDetailTableRow() {
                return ((CarrierDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CarrierDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CarrierDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CarrierDetailTableRowChanged != null)) {
                    this.CarrierDetailTableRowChanged(this, new CarrierDetailTableRowChangeEvent(((CarrierDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CarrierDetailTableRowChanging != null)) {
                    this.CarrierDetailTableRowChanging(this, new CarrierDetailTableRowChangeEvent(((CarrierDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CarrierDetailTableRowDeleted != null)) {
                    this.CarrierDetailTableRowDeleted(this, new CarrierDetailTableRowChangeEvent(((CarrierDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CarrierDetailTableRowDeleting != null)) {
                    this.CarrierDetailTableRowDeleting(this, new CarrierDetailTableRowChangeEvent(((CarrierDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCarrierDetailTableRow(CarrierDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierDetailTableRow : DataRow {
            
            private CarrierDetailTableDataTable tableCarrierDetailTable;
            
            internal CarrierDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarrierDetailTable = ((CarrierDetailTableDataTable)(this.Table));
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableCarrierDetailTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.CarrierIDColumn] = value;
                }
            }
            
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.CarrierNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.CarrierNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableCarrierDetailTable.NumberColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.NumberColumn] = value;
                }
            }
            
            public bool ControlTrailers {
                get {
                    return ((bool)(this[this.tableCarrierDetailTable.ControlTrailersColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.ControlTrailersColumn] = value;
                }
            }
            
            public bool ControlDrivers {
                get {
                    return ((bool)(this[this.tableCarrierDetailTable.ControlDriversColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.ControlDriversColumn] = value;
                }
            }
            
            public string SCAC {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.SCACColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.SCACColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableCarrierDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    return ((string)(this[this.tableCarrierDetailTable.AddressLine1Column]));
                }
                set {
                    this[this.tableCarrierDetailTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    return ((string)(this[this.tableCarrierDetailTable.CityColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    return ((int)(this[this.tableCarrierDetailTable.CountryIDColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.CountryIDColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableCarrierDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableCarrierDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableCarrierDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCarrierDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableCarrierDetailTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableCarrierDetailTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableCarrierDetailTable.CarrierNameColumn);
            }
            
            public void SetCarrierNameNull() {
                this[this.tableCarrierDetailTable.CarrierNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSCACNull() {
                return this.IsNull(this.tableCarrierDetailTable.SCACColumn);
            }
            
            public void SetSCACNull() {
                this[this.tableCarrierDetailTable.SCACColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableCarrierDetailTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableCarrierDetailTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCarrierDetailTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableCarrierDetailTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableCarrierDetailTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableCarrierDetailTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableCarrierDetailTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableCarrierDetailTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableCarrierDetailTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableCarrierDetailTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableCarrierDetailTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableCarrierDetailTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableCarrierDetailTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableCarrierDetailTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableCarrierDetailTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableCarrierDetailTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableCarrierDetailTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableCarrierDetailTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCarrierDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCarrierDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierDetailTableRowChangeEvent : EventArgs {
            
            private CarrierDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CarrierDetailTableRowChangeEvent(CarrierDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CarrierDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnCarrierName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnControlTrailers;
            
            private DataColumn columnControlDrivers;
            
            private DataColumn columnSCAC;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnRowVersion;
            
            internal CarrierListTableDataTable() : 
                    base("CarrierListTable") {
                this.InitClass();
            }
            
            internal CarrierListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ControlTrailersColumn {
                get {
                    return this.columnControlTrailers;
                }
            }
            
            internal DataColumn ControlDriversColumn {
                get {
                    return this.columnControlDrivers;
                }
            }
            
            internal DataColumn SCACColumn {
                get {
                    return this.columnSCAC;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CarrierListTableRow this[int index] {
                get {
                    return ((CarrierListTableRow)(this.Rows[index]));
                }
            }
            
            public event CarrierListTableRowChangeEventHandler CarrierListTableRowChanged;
            
            public event CarrierListTableRowChangeEventHandler CarrierListTableRowChanging;
            
            public event CarrierListTableRowChangeEventHandler CarrierListTableRowDeleted;
            
            public event CarrierListTableRowChangeEventHandler CarrierListTableRowDeleting;
            
            public void AddCarrierListTableRow(CarrierListTableRow row) {
                this.Rows.Add(row);
            }
            
            public CarrierListTableRow AddCarrierListTableRow(int CarrierID, string CarrierName, string Number, bool ControlTrailers, bool ControlDrivers, string SCAC, bool IsActive, string RowVersion) {
                CarrierListTableRow rowCarrierListTableRow = ((CarrierListTableRow)(this.NewRow()));
                rowCarrierListTableRow.ItemArray = new object[] {
                        CarrierID,
                        CarrierName,
                        Number,
                        ControlTrailers,
                        ControlDrivers,
                        SCAC,
                        IsActive,
                        RowVersion};
                this.Rows.Add(rowCarrierListTableRow);
                return rowCarrierListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CarrierListTableDataTable cln = ((CarrierListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CarrierListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnCarrierName = this.Columns["CarrierName"];
                this.columnNumber = this.Columns["Number"];
                this.columnControlTrailers = this.Columns["ControlTrailers"];
                this.columnControlDrivers = this.Columns["ControlDrivers"];
                this.columnSCAC = this.Columns["SCAC"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnCarrierName = new DataColumn("CarrierName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnControlTrailers = new DataColumn("ControlTrailers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlTrailers);
                this.columnControlDrivers = new DataColumn("ControlDrivers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlDrivers);
                this.columnSCAC = new DataColumn("SCAC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSCAC);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public CarrierListTableRow NewCarrierListTableRow() {
                return ((CarrierListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CarrierListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CarrierListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CarrierListTableRowChanged != null)) {
                    this.CarrierListTableRowChanged(this, new CarrierListTableRowChangeEvent(((CarrierListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CarrierListTableRowChanging != null)) {
                    this.CarrierListTableRowChanging(this, new CarrierListTableRowChangeEvent(((CarrierListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CarrierListTableRowDeleted != null)) {
                    this.CarrierListTableRowDeleted(this, new CarrierListTableRowChangeEvent(((CarrierListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CarrierListTableRowDeleting != null)) {
                    this.CarrierListTableRowDeleting(this, new CarrierListTableRowChangeEvent(((CarrierListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCarrierListTableRow(CarrierListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierListTableRow : DataRow {
            
            private CarrierListTableDataTable tableCarrierListTable;
            
            internal CarrierListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarrierListTable = ((CarrierListTableDataTable)(this.Table));
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableCarrierListTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.CarrierIDColumn] = value;
                }
            }
            
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableCarrierListTable.CarrierNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.CarrierNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableCarrierListTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.NumberColumn] = value;
                }
            }
            
            public bool ControlTrailers {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierListTable.ControlTrailersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.ControlTrailersColumn] = value;
                }
            }
            
            public bool ControlDrivers {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierListTable.ControlDriversColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.ControlDriversColumn] = value;
                }
            }
            
            public string SCAC {
                get {
                    try {
                        return ((string)(this[this.tableCarrierListTable.SCACColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.SCACColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.IsActiveColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCarrierListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierListTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableCarrierListTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableCarrierListTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableCarrierListTable.CarrierNameColumn);
            }
            
            public void SetCarrierNameNull() {
                this[this.tableCarrierListTable.CarrierNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableCarrierListTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableCarrierListTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlTrailersNull() {
                return this.IsNull(this.tableCarrierListTable.ControlTrailersColumn);
            }
            
            public void SetControlTrailersNull() {
                this[this.tableCarrierListTable.ControlTrailersColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlDriversNull() {
                return this.IsNull(this.tableCarrierListTable.ControlDriversColumn);
            }
            
            public void SetControlDriversNull() {
                this[this.tableCarrierListTable.ControlDriversColumn] = System.Convert.DBNull;
            }
            
            public bool IsSCACNull() {
                return this.IsNull(this.tableCarrierListTable.SCACColumn);
            }
            
            public void SetSCACNull() {
                this[this.tableCarrierListTable.SCACColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCarrierListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCarrierListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCarrierListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCarrierListTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierListTableRowChangeEvent : EventArgs {
            
            private CarrierListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CarrierListTableRowChangeEvent(CarrierListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CarrierListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierViewTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnCarrierName;
            
            private DataColumn columnNumber;
            
            private DataColumn columnControlTrailers;
            
            private DataColumn columnControlDrivers;
            
            private DataColumn columnSCAC;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnContactName;
            
            private DataColumn columnPhone;
            
            private DataColumn columnExtension;
            
            private DataColumn columnFax;
            
            private DataColumn columnEmail;
            
            private DataColumn columnAddressLine1;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnCity;
            
            private DataColumn columnStateOrProvince;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnRegion;
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountry;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal CarrierViewTableDataTable() : 
                    base("CarrierViewTable") {
                this.InitClass();
            }
            
            internal CarrierViewTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn ControlTrailersColumn {
                get {
                    return this.columnControlTrailers;
                }
            }
            
            internal DataColumn ControlDriversColumn {
                get {
                    return this.columnControlDrivers;
                }
            }
            
            internal DataColumn SCACColumn {
                get {
                    return this.columnSCAC;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn AddressLine1Column {
                get {
                    return this.columnAddressLine1;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateOrProvinceColumn {
                get {
                    return this.columnStateOrProvince;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public CarrierViewTableRow this[int index] {
                get {
                    return ((CarrierViewTableRow)(this.Rows[index]));
                }
            }
            
            public event CarrierViewTableRowChangeEventHandler CarrierViewTableRowChanged;
            
            public event CarrierViewTableRowChangeEventHandler CarrierViewTableRowChanging;
            
            public event CarrierViewTableRowChangeEventHandler CarrierViewTableRowDeleted;
            
            public event CarrierViewTableRowChangeEventHandler CarrierViewTableRowDeleting;
            
            public void AddCarrierViewTableRow(CarrierViewTableRow row) {
                this.Rows.Add(row);
            }
            
            public CarrierViewTableRow AddCarrierViewTableRow(
                        int CarrierID, 
                        string CarrierName, 
                        string Number, 
                        bool ControlTrailers, 
                        bool ControlDrivers, 
                        string SCAC, 
                        bool IsActive, 
                        string ContactName, 
                        string Phone, 
                        string Extension, 
                        string Fax, 
                        string Email, 
                        string AddressLine1, 
                        string AddressLine2, 
                        string City, 
                        string StateOrProvince, 
                        string PostalCode, 
                        string Region, 
                        int CountryID, 
                        string Country, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion) {
                CarrierViewTableRow rowCarrierViewTableRow = ((CarrierViewTableRow)(this.NewRow()));
                rowCarrierViewTableRow.ItemArray = new object[] {
                        CarrierID,
                        CarrierName,
                        Number,
                        ControlTrailers,
                        ControlDrivers,
                        SCAC,
                        IsActive,
                        ContactName,
                        Phone,
                        Extension,
                        Fax,
                        Email,
                        AddressLine1,
                        AddressLine2,
                        City,
                        StateOrProvince,
                        PostalCode,
                        Region,
                        CountryID,
                        Country,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowCarrierViewTableRow);
                return rowCarrierViewTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CarrierViewTableDataTable cln = ((CarrierViewTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CarrierViewTableDataTable();
            }
            
            internal void InitVars() {
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnCarrierName = this.Columns["CarrierName"];
                this.columnNumber = this.Columns["Number"];
                this.columnControlTrailers = this.Columns["ControlTrailers"];
                this.columnControlDrivers = this.Columns["ControlDrivers"];
                this.columnSCAC = this.Columns["SCAC"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnContactName = this.Columns["ContactName"];
                this.columnPhone = this.Columns["Phone"];
                this.columnExtension = this.Columns["Extension"];
                this.columnFax = this.Columns["Fax"];
                this.columnEmail = this.Columns["Email"];
                this.columnAddressLine1 = this.Columns["AddressLine1"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnCity = this.Columns["City"];
                this.columnStateOrProvince = this.Columns["StateOrProvince"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRegion = this.Columns["Region"];
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountry = this.Columns["Country"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnCarrierName = new DataColumn("CarrierName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierName);
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumber);
                this.columnControlTrailers = new DataColumn("ControlTrailers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlTrailers);
                this.columnControlDrivers = new DataColumn("ControlDrivers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlDrivers);
                this.columnSCAC = new DataColumn("SCAC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSCAC);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnContactName = new DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnExtension = new DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExtension);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnAddressLine1 = new DataColumn("AddressLine1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine1);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnStateOrProvince = new DataColumn("StateOrProvince", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateOrProvince);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
            }
            
            public CarrierViewTableRow NewCarrierViewTableRow() {
                return ((CarrierViewTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CarrierViewTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CarrierViewTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CarrierViewTableRowChanged != null)) {
                    this.CarrierViewTableRowChanged(this, new CarrierViewTableRowChangeEvent(((CarrierViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CarrierViewTableRowChanging != null)) {
                    this.CarrierViewTableRowChanging(this, new CarrierViewTableRowChangeEvent(((CarrierViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CarrierViewTableRowDeleted != null)) {
                    this.CarrierViewTableRowDeleted(this, new CarrierViewTableRowChangeEvent(((CarrierViewTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CarrierViewTableRowDeleting != null)) {
                    this.CarrierViewTableRowDeleting(this, new CarrierViewTableRowChangeEvent(((CarrierViewTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCarrierViewTableRow(CarrierViewTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierViewTableRow : DataRow {
            
            private CarrierViewTableDataTable tableCarrierViewTable;
            
            internal CarrierViewTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarrierViewTable = ((CarrierViewTableDataTable)(this.Table));
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableCarrierViewTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.CarrierIDColumn] = value;
                }
            }
            
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.CarrierNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.CarrierNameColumn] = value;
                }
            }
            
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.NumberColumn] = value;
                }
            }
            
            public bool ControlTrailers {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierViewTable.ControlTrailersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.ControlTrailersColumn] = value;
                }
            }
            
            public bool ControlDrivers {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierViewTable.ControlDriversColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.ControlDriversColumn] = value;
                }
            }
            
            public string SCAC {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.SCACColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.SCACColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableCarrierViewTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.IsActiveColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.ContactNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.PhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.ExtensionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.ExtensionColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.FaxColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.EmailColumn] = value;
                }
            }
            
            public string AddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.AddressLine1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.AddressLine1Column] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.AddressLine2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.CityColumn] = value;
                }
            }
            
            public string StateOrProvince {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.StateOrProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.StateOrProvinceColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.PostalCodeColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.RegionColumn] = value;
                }
            }
            
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableCarrierViewTable.CountryIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.CountryIDColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.CountryColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCarrierViewTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableCarrierViewTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCarrierViewTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableCarrierViewTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableCarrierViewTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableCarrierViewTable.CarrierNameColumn);
            }
            
            public void SetCarrierNameNull() {
                this[this.tableCarrierViewTable.CarrierNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberNull() {
                return this.IsNull(this.tableCarrierViewTable.NumberColumn);
            }
            
            public void SetNumberNull() {
                this[this.tableCarrierViewTable.NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlTrailersNull() {
                return this.IsNull(this.tableCarrierViewTable.ControlTrailersColumn);
            }
            
            public void SetControlTrailersNull() {
                this[this.tableCarrierViewTable.ControlTrailersColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlDriversNull() {
                return this.IsNull(this.tableCarrierViewTable.ControlDriversColumn);
            }
            
            public void SetControlDriversNull() {
                this[this.tableCarrierViewTable.ControlDriversColumn] = System.Convert.DBNull;
            }
            
            public bool IsSCACNull() {
                return this.IsNull(this.tableCarrierViewTable.SCACColumn);
            }
            
            public void SetSCACNull() {
                this[this.tableCarrierViewTable.SCACColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableCarrierViewTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableCarrierViewTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableCarrierViewTable.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableCarrierViewTable.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCarrierViewTable.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableCarrierViewTable.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableCarrierViewTable.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableCarrierViewTable.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableCarrierViewTable.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableCarrierViewTable.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableCarrierViewTable.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableCarrierViewTable.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine1Null() {
                return this.IsNull(this.tableCarrierViewTable.AddressLine1Column);
            }
            
            public void SetAddressLine1Null() {
                this[this.tableCarrierViewTable.AddressLine1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableCarrierViewTable.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableCarrierViewTable.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableCarrierViewTable.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableCarrierViewTable.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateOrProvinceNull() {
                return this.IsNull(this.tableCarrierViewTable.StateOrProvinceColumn);
            }
            
            public void SetStateOrProvinceNull() {
                this[this.tableCarrierViewTable.StateOrProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableCarrierViewTable.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableCarrierViewTable.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableCarrierViewTable.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableCarrierViewTable.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableCarrierViewTable.CountryIDColumn);
            }
            
            public void SetCountryIDNull() {
                this[this.tableCarrierViewTable.CountryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableCarrierViewTable.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableCarrierViewTable.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableCarrierViewTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableCarrierViewTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableCarrierViewTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableCarrierViewTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCarrierViewTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableCarrierViewTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CarrierViewTableRowChangeEvent : EventArgs {
            
            private CarrierViewTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CarrierViewTableRowChangeEvent(CarrierViewTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CarrierViewTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
