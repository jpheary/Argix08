//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Tsort.Transportation {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class VehicleDS : DataSet {
        
        private VehicleDetailTableDataTable tableVehicleDetailTable;
        
        private VehicleListTableDataTable tableVehicleListTable;
        
        public VehicleDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected VehicleDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["VehicleDetailTable"] != null)) {
                    this.Tables.Add(new VehicleDetailTableDataTable(ds.Tables["VehicleDetailTable"]));
                }
                if ((ds.Tables["VehicleListTable"] != null)) {
                    this.Tables.Add(new VehicleListTableDataTable(ds.Tables["VehicleListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VehicleDetailTableDataTable VehicleDetailTable {
            get {
                return this.tableVehicleDetailTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VehicleListTableDataTable VehicleListTable {
            get {
                return this.tableVehicleListTable;
            }
        }
        
        public override DataSet Clone() {
            VehicleDS cln = ((VehicleDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["VehicleDetailTable"] != null)) {
                this.Tables.Add(new VehicleDetailTableDataTable(ds.Tables["VehicleDetailTable"]));
            }
            if ((ds.Tables["VehicleListTable"] != null)) {
                this.Tables.Add(new VehicleListTableDataTable(ds.Tables["VehicleListTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVehicleDetailTable = ((VehicleDetailTableDataTable)(this.Tables["VehicleDetailTable"]));
            if ((this.tableVehicleDetailTable != null)) {
                this.tableVehicleDetailTable.InitVars();
            }
            this.tableVehicleListTable = ((VehicleListTableDataTable)(this.Tables["VehicleListTable"]));
            if ((this.tableVehicleListTable != null)) {
                this.tableVehicleListTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "VehicleDS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/VehicleDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVehicleDetailTable = new VehicleDetailTableDataTable();
            this.Tables.Add(this.tableVehicleDetailTable);
            this.tableVehicleListTable = new VehicleListTableDataTable();
            this.Tables.Add(this.tableVehicleListTable);
        }
        
        private bool ShouldSerializeVehicleDetailTable() {
            return false;
        }
        
        private bool ShouldSerializeVehicleListTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void VehicleDetailTableRowChangeEventHandler(object sender, VehicleDetailTableRowChangeEvent e);
        
        public delegate void VehicleListTableRowChangeEventHandler(object sender, VehicleListTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleDetailTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVehicleID;
            
            private DataColumn columnVehicleType;
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnDriverID;
            
            private DataColumn columnState;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLicPlateNumber;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            internal VehicleDetailTableDataTable() : 
                    base("VehicleDetailTable") {
                this.InitClass();
            }
            
            internal VehicleDetailTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VehicleIDColumn {
                get {
                    return this.columnVehicleID;
                }
            }
            
            internal DataColumn VehicleTypeColumn {
                get {
                    return this.columnVehicleType;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LicPlateNumberColumn {
                get {
                    return this.columnLicPlateNumber;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            public VehicleDetailTableRow this[int index] {
                get {
                    return ((VehicleDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event VehicleDetailTableRowChangeEventHandler VehicleDetailTableRowChanged;
            
            public event VehicleDetailTableRowChangeEventHandler VehicleDetailTableRowChanging;
            
            public event VehicleDetailTableRowChangeEventHandler VehicleDetailTableRowDeleted;
            
            public event VehicleDetailTableRowChangeEventHandler VehicleDetailTableRowDeleting;
            
            public void AddVehicleDetailTableRow(VehicleDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            public VehicleDetailTableRow AddVehicleDetailTableRow(int VehicleID, string VehicleType, int CarrierID, int DriverID, string State, string Description, string LicPlateNumber, bool IsActive, System.DateTime LastUpdated, string UserID, string RowVersion) {
                VehicleDetailTableRow rowVehicleDetailTableRow = ((VehicleDetailTableRow)(this.NewRow()));
                rowVehicleDetailTableRow.ItemArray = new object[] {
                        VehicleID,
                        VehicleType,
                        CarrierID,
                        DriverID,
                        State,
                        Description,
                        LicPlateNumber,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion};
                this.Rows.Add(rowVehicleDetailTableRow);
                return rowVehicleDetailTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VehicleDetailTableDataTable cln = ((VehicleDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VehicleDetailTableDataTable();
            }
            
            internal void InitVars() {
                this.columnVehicleID = this.Columns["VehicleID"];
                this.columnVehicleType = this.Columns["VehicleType"];
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnDriverID = this.Columns["DriverID"];
                this.columnState = this.Columns["State"];
                this.columnDescription = this.Columns["Description"];
                this.columnLicPlateNumber = this.Columns["LicPlateNumber"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
            }
            
            private void InitClass() {
                this.columnVehicleID = new DataColumn("VehicleID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleID);
                this.columnVehicleType = new DataColumn("VehicleType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleType);
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnDriverID = new DataColumn("DriverID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverID);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLicPlateNumber = new DataColumn("LicPlateNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLicPlateNumber);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnVehicleType.AllowDBNull = false;
                this.columnCarrierID.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnLastUpdated.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            public VehicleDetailTableRow NewVehicleDetailTableRow() {
                return ((VehicleDetailTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VehicleDetailTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VehicleDetailTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VehicleDetailTableRowChanged != null)) {
                    this.VehicleDetailTableRowChanged(this, new VehicleDetailTableRowChangeEvent(((VehicleDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VehicleDetailTableRowChanging != null)) {
                    this.VehicleDetailTableRowChanging(this, new VehicleDetailTableRowChangeEvent(((VehicleDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VehicleDetailTableRowDeleted != null)) {
                    this.VehicleDetailTableRowDeleted(this, new VehicleDetailTableRowChangeEvent(((VehicleDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VehicleDetailTableRowDeleting != null)) {
                    this.VehicleDetailTableRowDeleting(this, new VehicleDetailTableRowChangeEvent(((VehicleDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVehicleDetailTableRow(VehicleDetailTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleDetailTableRow : DataRow {
            
            private VehicleDetailTableDataTable tableVehicleDetailTable;
            
            internal VehicleDetailTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVehicleDetailTable = ((VehicleDetailTableDataTable)(this.Table));
            }
            
            public int VehicleID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleDetailTable.VehicleIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.VehicleIDColumn] = value;
                }
            }
            
            public string VehicleType {
                get {
                    return ((string)(this[this.tableVehicleDetailTable.VehicleTypeColumn]));
                }
                set {
                    this[this.tableVehicleDetailTable.VehicleTypeColumn] = value;
                }
            }
            
            public int CarrierID {
                get {
                    return ((int)(this[this.tableVehicleDetailTable.CarrierIDColumn]));
                }
                set {
                    this[this.tableVehicleDetailTable.CarrierIDColumn] = value;
                }
            }
            
            public int DriverID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleDetailTable.DriverIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.DriverIDColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableVehicleDetailTable.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.StateColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableVehicleDetailTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.DescriptionColumn] = value;
                }
            }
            
            public string LicPlateNumber {
                get {
                    try {
                        return ((string)(this[this.tableVehicleDetailTable.LicPlateNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.LicPlateNumberColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableVehicleDetailTable.IsActiveColumn]));
                }
                set {
                    this[this.tableVehicleDetailTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    return ((System.DateTime)(this[this.tableVehicleDetailTable.LastUpdatedColumn]));
                }
                set {
                    this[this.tableVehicleDetailTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    return ((string)(this[this.tableVehicleDetailTable.UserIDColumn]));
                }
                set {
                    this[this.tableVehicleDetailTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableVehicleDetailTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleDetailTable.RowVersionColumn] = value;
                }
            }
            
            public bool IsVehicleIDNull() {
                return this.IsNull(this.tableVehicleDetailTable.VehicleIDColumn);
            }
            
            public void SetVehicleIDNull() {
                this[this.tableVehicleDetailTable.VehicleIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverIDNull() {
                return this.IsNull(this.tableVehicleDetailTable.DriverIDColumn);
            }
            
            public void SetDriverIDNull() {
                this[this.tableVehicleDetailTable.DriverIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableVehicleDetailTable.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableVehicleDetailTable.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableVehicleDetailTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableVehicleDetailTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLicPlateNumberNull() {
                return this.IsNull(this.tableVehicleDetailTable.LicPlateNumberColumn);
            }
            
            public void SetLicPlateNumberNull() {
                this[this.tableVehicleDetailTable.LicPlateNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableVehicleDetailTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableVehicleDetailTable.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleDetailTableRowChangeEvent : EventArgs {
            
            private VehicleDetailTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public VehicleDetailTableRowChangeEvent(VehicleDetailTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VehicleDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleListTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVehicleID;
            
            private DataColumn columnVehicleType;
            
            private DataColumn columnState;
            
            private DataColumn columnStateName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLicPlateNumber;
            
            private DataColumn columnDriverID;
            
            private DataColumn columnLastName;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnTerminalID;
            
            private DataColumn columnTerminal;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnLastUpdated;
            
            private DataColumn columnUserID;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnCarrierID;
            
            private DataColumn columnCarrierName;
            
            internal VehicleListTableDataTable() : 
                    base("VehicleListTable") {
                this.InitClass();
            }
            
            internal VehicleListTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VehicleIDColumn {
                get {
                    return this.columnVehicleID;
                }
            }
            
            internal DataColumn VehicleTypeColumn {
                get {
                    return this.columnVehicleType;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LicPlateNumberColumn {
                get {
                    return this.columnLicPlateNumber;
                }
            }
            
            internal DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn TerminalIDColumn {
                get {
                    return this.columnTerminalID;
                }
            }
            
            internal DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            internal DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn CarrierIDColumn {
                get {
                    return this.columnCarrierID;
                }
            }
            
            internal DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            public VehicleListTableRow this[int index] {
                get {
                    return ((VehicleListTableRow)(this.Rows[index]));
                }
            }
            
            public event VehicleListTableRowChangeEventHandler VehicleListTableRowChanged;
            
            public event VehicleListTableRowChangeEventHandler VehicleListTableRowChanging;
            
            public event VehicleListTableRowChangeEventHandler VehicleListTableRowDeleted;
            
            public event VehicleListTableRowChangeEventHandler VehicleListTableRowDeleting;
            
            public void AddVehicleListTableRow(VehicleListTableRow row) {
                this.Rows.Add(row);
            }
            
            public VehicleListTableRow AddVehicleListTableRow(
                        int VehicleID, 
                        string VehicleType, 
                        string State, 
                        string StateName, 
                        string Description, 
                        string LicPlateNumber, 
                        int DriverID, 
                        string LastName, 
                        string FirstName, 
                        int TerminalID, 
                        string Terminal, 
                        bool IsActive, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        string RowVersion, 
                        int CarrierID, 
                        string CarrierName) {
                VehicleListTableRow rowVehicleListTableRow = ((VehicleListTableRow)(this.NewRow()));
                rowVehicleListTableRow.ItemArray = new object[] {
                        VehicleID,
                        VehicleType,
                        State,
                        StateName,
                        Description,
                        LicPlateNumber,
                        DriverID,
                        LastName,
                        FirstName,
                        TerminalID,
                        Terminal,
                        IsActive,
                        LastUpdated,
                        UserID,
                        RowVersion,
                        CarrierID,
                        CarrierName};
                this.Rows.Add(rowVehicleListTableRow);
                return rowVehicleListTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VehicleListTableDataTable cln = ((VehicleListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VehicleListTableDataTable();
            }
            
            internal void InitVars() {
                this.columnVehicleID = this.Columns["VehicleID"];
                this.columnVehicleType = this.Columns["VehicleType"];
                this.columnState = this.Columns["State"];
                this.columnStateName = this.Columns["StateName"];
                this.columnDescription = this.Columns["Description"];
                this.columnLicPlateNumber = this.Columns["LicPlateNumber"];
                this.columnDriverID = this.Columns["DriverID"];
                this.columnLastName = this.Columns["LastName"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnTerminalID = this.Columns["TerminalID"];
                this.columnTerminal = this.Columns["Terminal"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnLastUpdated = this.Columns["LastUpdated"];
                this.columnUserID = this.Columns["UserID"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnCarrierID = this.Columns["CarrierID"];
                this.columnCarrierName = this.Columns["CarrierName"];
            }
            
            private void InitClass() {
                this.columnVehicleID = new DataColumn("VehicleID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleID);
                this.columnVehicleType = new DataColumn("VehicleType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVehicleType);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnStateName = new DataColumn("StateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLicPlateNumber = new DataColumn("LicPlateNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLicPlateNumber);
                this.columnDriverID = new DataColumn("DriverID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverID);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnTerminalID = new DataColumn("TerminalID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminalID);
                this.columnTerminal = new DataColumn("Terminal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTerminal);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnLastUpdated = new DataColumn("LastUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new DataColumn("UserID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnCarrierID = new DataColumn("CarrierID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierID);
                this.columnCarrierName = new DataColumn("CarrierName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCarrierName);
            }
            
            public VehicleListTableRow NewVehicleListTableRow() {
                return ((VehicleListTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VehicleListTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VehicleListTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VehicleListTableRowChanged != null)) {
                    this.VehicleListTableRowChanged(this, new VehicleListTableRowChangeEvent(((VehicleListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VehicleListTableRowChanging != null)) {
                    this.VehicleListTableRowChanging(this, new VehicleListTableRowChangeEvent(((VehicleListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VehicleListTableRowDeleted != null)) {
                    this.VehicleListTableRowDeleted(this, new VehicleListTableRowChangeEvent(((VehicleListTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VehicleListTableRowDeleting != null)) {
                    this.VehicleListTableRowDeleting(this, new VehicleListTableRowChangeEvent(((VehicleListTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVehicleListTableRow(VehicleListTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleListTableRow : DataRow {
            
            private VehicleListTableDataTable tableVehicleListTable;
            
            internal VehicleListTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVehicleListTable = ((VehicleListTableDataTable)(this.Table));
            }
            
            public int VehicleID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleListTable.VehicleIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.VehicleIDColumn] = value;
                }
            }
            
            public string VehicleType {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.VehicleTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.VehicleTypeColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.StateColumn] = value;
                }
            }
            
            public string StateName {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.StateNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.StateNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.DescriptionColumn] = value;
                }
            }
            
            public string LicPlateNumber {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.LicPlateNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.LicPlateNumberColumn] = value;
                }
            }
            
            public int DriverID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleListTable.DriverIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.DriverIDColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.LastNameColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.FirstNameColumn] = value;
                }
            }
            
            public int TerminalID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleListTable.TerminalIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.TerminalIDColumn] = value;
                }
            }
            
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.TerminalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.TerminalColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableVehicleListTable.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVehicleListTable.LastUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.LastUpdatedColumn] = value;
                }
            }
            
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.UserIDColumn] = value;
                }
            }
            
            public string RowVersion {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.RowVersionColumn] = value;
                }
            }
            
            public int CarrierID {
                get {
                    try {
                        return ((int)(this[this.tableVehicleListTable.CarrierIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.CarrierIDColumn] = value;
                }
            }
            
            public string CarrierName {
                get {
                    try {
                        return ((string)(this[this.tableVehicleListTable.CarrierNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVehicleListTable.CarrierNameColumn] = value;
                }
            }
            
            public bool IsVehicleIDNull() {
                return this.IsNull(this.tableVehicleListTable.VehicleIDColumn);
            }
            
            public void SetVehicleIDNull() {
                this[this.tableVehicleListTable.VehicleIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsVehicleTypeNull() {
                return this.IsNull(this.tableVehicleListTable.VehicleTypeColumn);
            }
            
            public void SetVehicleTypeNull() {
                this[this.tableVehicleListTable.VehicleTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableVehicleListTable.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableVehicleListTable.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNameNull() {
                return this.IsNull(this.tableVehicleListTable.StateNameColumn);
            }
            
            public void SetStateNameNull() {
                this[this.tableVehicleListTable.StateNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableVehicleListTable.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableVehicleListTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLicPlateNumberNull() {
                return this.IsNull(this.tableVehicleListTable.LicPlateNumberColumn);
            }
            
            public void SetLicPlateNumberNull() {
                this[this.tableVehicleListTable.LicPlateNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverIDNull() {
                return this.IsNull(this.tableVehicleListTable.DriverIDColumn);
            }
            
            public void SetDriverIDNull() {
                this[this.tableVehicleListTable.DriverIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableVehicleListTable.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableVehicleListTable.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableVehicleListTable.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableVehicleListTable.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalIDNull() {
                return this.IsNull(this.tableVehicleListTable.TerminalIDColumn);
            }
            
            public void SetTerminalIDNull() {
                this[this.tableVehicleListTable.TerminalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTerminalNull() {
                return this.IsNull(this.tableVehicleListTable.TerminalColumn);
            }
            
            public void SetTerminalNull() {
                this[this.tableVehicleListTable.TerminalColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableVehicleListTable.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableVehicleListTable.IsActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableVehicleListTable.LastUpdatedColumn);
            }
            
            public void SetLastUpdatedNull() {
                this[this.tableVehicleListTable.LastUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableVehicleListTable.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableVehicleListTable.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableVehicleListTable.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tableVehicleListTable.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierIDNull() {
                return this.IsNull(this.tableVehicleListTable.CarrierIDColumn);
            }
            
            public void SetCarrierIDNull() {
                this[this.tableVehicleListTable.CarrierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCarrierNameNull() {
                return this.IsNull(this.tableVehicleListTable.CarrierNameColumn);
            }
            
            public void SetCarrierNameNull() {
                this[this.tableVehicleListTable.CarrierNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VehicleListTableRowChangeEvent : EventArgs {
            
            private VehicleListTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public VehicleListTableRowChangeEvent(VehicleListTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VehicleListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
