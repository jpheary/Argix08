//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Finance {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InvoiceDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InvoiceDS : global::System.Data.DataSet {
        
        private ClientTableDataTable tableClientTable;
        
        private ClientInvoiceTableDataTable tableClientInvoiceTable;
        
        private InvoiceSummaryTableDataTable tableInvoiceSummaryTable;
        
        private InvoiceDetailTableDataTable tableInvoiceDetailTable;
        
        private InvoiceTLDetailTableDataTable tableInvoiceTLDetailTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InvoiceDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientTable"] != null)) {
                    base.Tables.Add(new ClientTableDataTable(ds.Tables["ClientTable"]));
                }
                if ((ds.Tables["ClientInvoiceTable"] != null)) {
                    base.Tables.Add(new ClientInvoiceTableDataTable(ds.Tables["ClientInvoiceTable"]));
                }
                if ((ds.Tables["InvoiceSummaryTable"] != null)) {
                    base.Tables.Add(new InvoiceSummaryTableDataTable(ds.Tables["InvoiceSummaryTable"]));
                }
                if ((ds.Tables["InvoiceDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceDetailTableDataTable(ds.Tables["InvoiceDetailTable"]));
                }
                if ((ds.Tables["InvoiceTLDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceTLDetailTableDataTable(ds.Tables["InvoiceTLDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientTableDataTable ClientTable {
            get {
                return this.tableClientTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientInvoiceTableDataTable ClientInvoiceTable {
            get {
                return this.tableClientInvoiceTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceSummaryTableDataTable InvoiceSummaryTable {
            get {
                return this.tableInvoiceSummaryTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDetailTableDataTable InvoiceDetailTable {
            get {
                return this.tableInvoiceDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceTLDetailTableDataTable InvoiceTLDetailTable {
            get {
                return this.tableInvoiceTLDetailTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InvoiceDS cln = ((InvoiceDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientTable"] != null)) {
                    base.Tables.Add(new ClientTableDataTable(ds.Tables["ClientTable"]));
                }
                if ((ds.Tables["ClientInvoiceTable"] != null)) {
                    base.Tables.Add(new ClientInvoiceTableDataTable(ds.Tables["ClientInvoiceTable"]));
                }
                if ((ds.Tables["InvoiceSummaryTable"] != null)) {
                    base.Tables.Add(new InvoiceSummaryTableDataTable(ds.Tables["InvoiceSummaryTable"]));
                }
                if ((ds.Tables["InvoiceDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceDetailTableDataTable(ds.Tables["InvoiceDetailTable"]));
                }
                if ((ds.Tables["InvoiceTLDetailTable"] != null)) {
                    base.Tables.Add(new InvoiceTLDetailTableDataTable(ds.Tables["InvoiceTLDetailTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientTable = ((ClientTableDataTable)(base.Tables["ClientTable"]));
            if ((initTable == true)) {
                if ((this.tableClientTable != null)) {
                    this.tableClientTable.InitVars();
                }
            }
            this.tableClientInvoiceTable = ((ClientInvoiceTableDataTable)(base.Tables["ClientInvoiceTable"]));
            if ((initTable == true)) {
                if ((this.tableClientInvoiceTable != null)) {
                    this.tableClientInvoiceTable.InitVars();
                }
            }
            this.tableInvoiceSummaryTable = ((InvoiceSummaryTableDataTable)(base.Tables["InvoiceSummaryTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceSummaryTable != null)) {
                    this.tableInvoiceSummaryTable.InitVars();
                }
            }
            this.tableInvoiceDetailTable = ((InvoiceDetailTableDataTable)(base.Tables["InvoiceDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceDetailTable != null)) {
                    this.tableInvoiceDetailTable.InitVars();
                }
            }
            this.tableInvoiceTLDetailTable = ((InvoiceTLDetailTableDataTable)(base.Tables["InvoiceTLDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceTLDetailTable != null)) {
                    this.tableInvoiceTLDetailTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InvoiceDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InvoiceDS.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientTable = new ClientTableDataTable();
            base.Tables.Add(this.tableClientTable);
            this.tableClientInvoiceTable = new ClientInvoiceTableDataTable();
            base.Tables.Add(this.tableClientInvoiceTable);
            this.tableInvoiceSummaryTable = new InvoiceSummaryTableDataTable();
            base.Tables.Add(this.tableInvoiceSummaryTable);
            this.tableInvoiceDetailTable = new InvoiceDetailTableDataTable();
            base.Tables.Add(this.tableInvoiceDetailTable);
            this.tableInvoiceTLDetailTable = new InvoiceTLDetailTableDataTable();
            base.Tables.Add(this.tableInvoiceTLDetailTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientInvoiceTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceSummaryTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceTLDetailTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InvoiceDS ds = new InvoiceDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientTableRowChangeEventHandler(object sender, ClientTableRowChangeEvent e);
        
        public delegate void ClientInvoiceTableRowChangeEventHandler(object sender, ClientInvoiceTableRowChangeEvent e);
        
        public delegate void InvoiceSummaryTableRowChangeEventHandler(object sender, InvoiceSummaryTableRowChangeEvent e);
        
        public delegate void InvoiceDetailTableRowChangeEventHandler(object sender, InvoiceDetailTableRowChangeEvent e);
        
        public delegate void InvoiceTLDetailTableRowChangeEventHandler(object sender, InvoiceTLDetailTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientTableDataTable : global::System.Data.TypedTableBase<ClientTableRow> {
            
            private global::System.Data.DataColumn columnClientNumber;
            
            private global::System.Data.DataColumn columnDivisionNumber;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnTerminalCode;
            
            private global::System.Data.DataColumn columnTerminalName;
            
            private global::System.Data.DataColumn columnARNumber;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableDataTable() {
                this.TableName = "ClientTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNumberColumn {
                get {
                    return this.columnClientNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivisionNumberColumn {
                get {
                    return this.columnDivisionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalCodeColumn {
                get {
                    return this.columnTerminalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalNameColumn {
                get {
                    return this.columnTerminalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ARNumberColumn {
                get {
                    return this.columnARNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow this[int index] {
                get {
                    return ((ClientTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientTableRowChangeEventHandler ClientTableRowChanging;
            
            public event ClientTableRowChangeEventHandler ClientTableRowChanged;
            
            public event ClientTableRowChangeEventHandler ClientTableRowDeleting;
            
            public event ClientTableRowChangeEventHandler ClientTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientTableRow(ClientTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow AddClientTableRow(string ClientNumber, string DivisionNumber, string ClientName, string TerminalCode, string TerminalName, string ARNumber, string Status) {
                ClientTableRow rowClientTableRow = ((ClientTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientNumber,
                        DivisionNumber,
                        ClientName,
                        TerminalCode,
                        TerminalName,
                        ARNumber,
                        Status};
                rowClientTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientTableRow);
                return rowClientTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientTableDataTable cln = ((ClientTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientNumber = base.Columns["ClientNumber"];
                this.columnDivisionNumber = base.Columns["DivisionNumber"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnTerminalCode = base.Columns["TerminalCode"];
                this.columnTerminalName = base.Columns["TerminalName"];
                this.columnARNumber = base.Columns["ARNumber"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientNumber = new global::System.Data.DataColumn("ClientNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientNumber);
                this.columnDivisionNumber = new global::System.Data.DataColumn("DivisionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivisionNumber);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnTerminalCode = new global::System.Data.DataColumn("TerminalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalCode);
                this.columnTerminalName = new global::System.Data.DataColumn("TerminalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminalName);
                this.columnARNumber = new global::System.Data.DataColumn("ARNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnARNumber);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow NewClientTableRow() {
                return ((ClientTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientTableRowChanged != null)) {
                    this.ClientTableRowChanged(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientTableRowChanging != null)) {
                    this.ClientTableRowChanging(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientTableRowDeleted != null)) {
                    this.ClientTableRowDeleted(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientTableRowDeleting != null)) {
                    this.ClientTableRowDeleting(this, new ClientTableRowChangeEvent(((ClientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientTableRow(ClientTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientInvoiceTableDataTable : global::System.Data.TypedTableBase<ClientInvoiceTableRow> {
            
            private global::System.Data.DataColumn columnInvoiceNumber;
            
            private global::System.Data.DataColumn columnInvoiceDate;
            
            private global::System.Data.DataColumn columnPostToARDate;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnPallets;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnReleaseDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableDataTable() {
                this.TableName = "ClientInvoiceTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInvoiceTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientInvoiceTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNumberColumn {
                get {
                    return this.columnInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostToARDateColumn {
                get {
                    return this.columnPostToARDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseDateColumn {
                get {
                    return this.columnReleaseDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow this[int index] {
                get {
                    return ((ClientInvoiceTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowChanging;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowChanged;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowDeleting;
            
            public event ClientInvoiceTableRowChangeEventHandler ClientInvoiceTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientInvoiceTableRow(ClientInvoiceTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow AddClientInvoiceTableRow(string InvoiceNumber, System.DateTime InvoiceDate, System.DateTime PostToARDate, int Cartons, int Pallets, int Weight, decimal Amount, string Description, System.DateTime ReleaseDate) {
                ClientInvoiceTableRow rowClientInvoiceTableRow = ((ClientInvoiceTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InvoiceNumber,
                        InvoiceDate,
                        PostToARDate,
                        Cartons,
                        Pallets,
                        Weight,
                        Amount,
                        Description,
                        ReleaseDate};
                rowClientInvoiceTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientInvoiceTableRow);
                return rowClientInvoiceTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientInvoiceTableDataTable cln = ((ClientInvoiceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientInvoiceTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvoiceNumber = base.Columns["InvoiceNumber"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnPostToARDate = base.Columns["PostToARDate"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnPallets = base.Columns["Pallets"];
                this.columnWeight = base.Columns["Weight"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnReleaseDate = base.Columns["ReleaseDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvoiceNumber = new global::System.Data.DataColumn("InvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNumber);
                this.columnInvoiceDate = new global::System.Data.DataColumn("InvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnPostToARDate = new global::System.Data.DataColumn("PostToARDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostToARDate);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnPallets = new global::System.Data.DataColumn("Pallets", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPallets);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnReleaseDate = new global::System.Data.DataColumn("ReleaseDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow NewClientInvoiceTableRow() {
                return ((ClientInvoiceTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientInvoiceTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientInvoiceTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientInvoiceTableRowChanged != null)) {
                    this.ClientInvoiceTableRowChanged(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientInvoiceTableRowChanging != null)) {
                    this.ClientInvoiceTableRowChanging(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientInvoiceTableRowDeleted != null)) {
                    this.ClientInvoiceTableRowDeleted(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientInvoiceTableRowDeleting != null)) {
                    this.ClientInvoiceTableRowDeleting(this, new ClientInvoiceTableRowChangeEvent(((ClientInvoiceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientInvoiceTableRow(ClientInvoiceTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientInvoiceTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceSummaryTableDataTable : global::System.Data.TypedTableBase<InvoiceSummaryTableRow> {
            
            private global::System.Data.DataColumn columnBillToName;
            
            private global::System.Data.DataColumn columnBillToAddressline1;
            
            private global::System.Data.DataColumn columnBillToAddressline2;
            
            private global::System.Data.DataColumn columnBillToCity;
            
            private global::System.Data.DataColumn columnBillToState;
            
            private global::System.Data.DataColumn columnBillToZip;
            
            private global::System.Data.DataColumn columnBillToZIP4;
            
            private global::System.Data.DataColumn column_Account_;
            
            private global::System.Data.DataColumn columnInvoiceNumber;
            
            private global::System.Data.DataColumn columnInvoiceDate;
            
            private global::System.Data.DataColumn columnTerms;
            
            private global::System.Data.DataColumn columnRemitToName;
            
            private global::System.Data.DataColumn columnRemitToAddressLine1;
            
            private global::System.Data.DataColumn columnRemitToAddressLine2;
            
            private global::System.Data.DataColumn columnRemitToCity;
            
            private global::System.Data.DataColumn columnRemitToState;
            
            private global::System.Data.DataColumn columnRemitToZip;
            
            private global::System.Data.DataColumn columnRemitToZip4;
            
            private global::System.Data.DataColumn columnShipmentDay;
            
            private global::System.Data.DataColumn columnPieces;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnDeliveryCharges;
            
            private global::System.Data.DataColumn columnLinehaulCharges;
            
            private global::System.Data.DataColumn columnTotalAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableDataTable() {
                this.TableName = "InvoiceSummaryTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceSummaryTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceSummaryTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToNameColumn {
                get {
                    return this.columnBillToName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToAddressline1Column {
                get {
                    return this.columnBillToAddressline1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToAddressline2Column {
                get {
                    return this.columnBillToAddressline2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToCityColumn {
                get {
                    return this.columnBillToCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToStateColumn {
                get {
                    return this.columnBillToState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToZipColumn {
                get {
                    return this.columnBillToZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillToZIP4Column {
                get {
                    return this.columnBillToZIP4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Account_Column {
                get {
                    return this.column_Account_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNumberColumn {
                get {
                    return this.columnInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceDateColumn {
                get {
                    return this.columnInvoiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermsColumn {
                get {
                    return this.columnTerms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToNameColumn {
                get {
                    return this.columnRemitToName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToAddressLine1Column {
                get {
                    return this.columnRemitToAddressLine1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToAddressLine2Column {
                get {
                    return this.columnRemitToAddressLine2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToCityColumn {
                get {
                    return this.columnRemitToCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToStateColumn {
                get {
                    return this.columnRemitToState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToZipColumn {
                get {
                    return this.columnRemitToZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitToZip4Column {
                get {
                    return this.columnRemitToZip4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentDayColumn {
                get {
                    return this.columnShipmentDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PiecesColumn {
                get {
                    return this.columnPieces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryChargesColumn {
                get {
                    return this.columnDeliveryCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinehaulChargesColumn {
                get {
                    return this.columnLinehaulCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableRow this[int index] {
                get {
                    return ((InvoiceSummaryTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceSummaryTableRowChangeEventHandler InvoiceSummaryTableRowChanging;
            
            public event InvoiceSummaryTableRowChangeEventHandler InvoiceSummaryTableRowChanged;
            
            public event InvoiceSummaryTableRowChangeEventHandler InvoiceSummaryTableRowDeleting;
            
            public event InvoiceSummaryTableRowChangeEventHandler InvoiceSummaryTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceSummaryTableRow(InvoiceSummaryTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableRow AddInvoiceSummaryTableRow(
                        string BillToName, 
                        string BillToAddressline1, 
                        string BillToAddressline2, 
                        string BillToCity, 
                        string BillToState, 
                        string BillToZip, 
                        string BillToZIP4, 
                        string _Account_, 
                        string InvoiceNumber, 
                        System.DateTime InvoiceDate, 
                        string Terms, 
                        string RemitToName, 
                        string RemitToAddressLine1, 
                        string RemitToAddressLine2, 
                        string RemitToCity, 
                        string RemitToState, 
                        string RemitToZip, 
                        string RemitToZip4, 
                        System.DateTime ShipmentDay, 
                        int Pieces, 
                        int Weight, 
                        decimal DeliveryCharges, 
                        decimal LinehaulCharges, 
                        decimal TotalAmountDue) {
                InvoiceSummaryTableRow rowInvoiceSummaryTableRow = ((InvoiceSummaryTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BillToName,
                        BillToAddressline1,
                        BillToAddressline2,
                        BillToCity,
                        BillToState,
                        BillToZip,
                        BillToZIP4,
                        _Account_,
                        InvoiceNumber,
                        InvoiceDate,
                        Terms,
                        RemitToName,
                        RemitToAddressLine1,
                        RemitToAddressLine2,
                        RemitToCity,
                        RemitToState,
                        RemitToZip,
                        RemitToZip4,
                        ShipmentDay,
                        Pieces,
                        Weight,
                        DeliveryCharges,
                        LinehaulCharges,
                        TotalAmountDue};
                rowInvoiceSummaryTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceSummaryTableRow);
                return rowInvoiceSummaryTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceSummaryTableDataTable cln = ((InvoiceSummaryTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceSummaryTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBillToName = base.Columns["BillToName"];
                this.columnBillToAddressline1 = base.Columns["BillToAddressline1"];
                this.columnBillToAddressline2 = base.Columns["BillToAddressline2"];
                this.columnBillToCity = base.Columns["BillToCity"];
                this.columnBillToState = base.Columns["BillToState"];
                this.columnBillToZip = base.Columns["BillToZip"];
                this.columnBillToZIP4 = base.Columns["BillToZIP4"];
                this.column_Account_ = base.Columns["Account#"];
                this.columnInvoiceNumber = base.Columns["InvoiceNumber"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnTerms = base.Columns["Terms"];
                this.columnRemitToName = base.Columns["RemitToName"];
                this.columnRemitToAddressLine1 = base.Columns["RemitToAddressLine1"];
                this.columnRemitToAddressLine2 = base.Columns["RemitToAddressLine2"];
                this.columnRemitToCity = base.Columns["RemitToCity"];
                this.columnRemitToState = base.Columns["RemitToState"];
                this.columnRemitToZip = base.Columns["RemitToZip"];
                this.columnRemitToZip4 = base.Columns["RemitToZip4"];
                this.columnShipmentDay = base.Columns["ShipmentDay"];
                this.columnPieces = base.Columns["Pieces"];
                this.columnWeight = base.Columns["Weight"];
                this.columnDeliveryCharges = base.Columns["DeliveryCharges"];
                this.columnLinehaulCharges = base.Columns["LinehaulCharges"];
                this.columnTotalAmountDue = base.Columns["TotalAmountDue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBillToName = new global::System.Data.DataColumn("BillToName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToName);
                this.columnBillToAddressline1 = new global::System.Data.DataColumn("BillToAddressline1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToAddressline1);
                this.columnBillToAddressline2 = new global::System.Data.DataColumn("BillToAddressline2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToAddressline2);
                this.columnBillToCity = new global::System.Data.DataColumn("BillToCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToCity);
                this.columnBillToState = new global::System.Data.DataColumn("BillToState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToState);
                this.columnBillToZip = new global::System.Data.DataColumn("BillToZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToZip);
                this.columnBillToZIP4 = new global::System.Data.DataColumn("BillToZIP4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillToZIP4);
                this.column_Account_ = new global::System.Data.DataColumn("Account#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_Account_);
                this.columnInvoiceNumber = new global::System.Data.DataColumn("InvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNumber);
                this.columnInvoiceDate = new global::System.Data.DataColumn("InvoiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnTerms = new global::System.Data.DataColumn("Terms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerms);
                this.columnRemitToName = new global::System.Data.DataColumn("RemitToName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToName);
                this.columnRemitToAddressLine1 = new global::System.Data.DataColumn("RemitToAddressLine1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToAddressLine1);
                this.columnRemitToAddressLine2 = new global::System.Data.DataColumn("RemitToAddressLine2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToAddressLine2);
                this.columnRemitToCity = new global::System.Data.DataColumn("RemitToCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToCity);
                this.columnRemitToState = new global::System.Data.DataColumn("RemitToState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToState);
                this.columnRemitToZip = new global::System.Data.DataColumn("RemitToZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToZip);
                this.columnRemitToZip4 = new global::System.Data.DataColumn("RemitToZip4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitToZip4);
                this.columnShipmentDay = new global::System.Data.DataColumn("ShipmentDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentDay);
                this.columnPieces = new global::System.Data.DataColumn("Pieces", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPieces);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnDeliveryCharges = new global::System.Data.DataColumn("DeliveryCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryCharges);
                this.columnLinehaulCharges = new global::System.Data.DataColumn("LinehaulCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinehaulCharges);
                this.columnTotalAmountDue = new global::System.Data.DataColumn("TotalAmountDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountDue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableRow NewInvoiceSummaryTableRow() {
                return ((InvoiceSummaryTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceSummaryTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceSummaryTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceSummaryTableRowChanged != null)) {
                    this.InvoiceSummaryTableRowChanged(this, new InvoiceSummaryTableRowChangeEvent(((InvoiceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceSummaryTableRowChanging != null)) {
                    this.InvoiceSummaryTableRowChanging(this, new InvoiceSummaryTableRowChangeEvent(((InvoiceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceSummaryTableRowDeleted != null)) {
                    this.InvoiceSummaryTableRowDeleted(this, new InvoiceSummaryTableRowChangeEvent(((InvoiceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceSummaryTableRowDeleting != null)) {
                    this.InvoiceSummaryTableRowDeleting(this, new InvoiceSummaryTableRowChangeEvent(((InvoiceSummaryTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceSummaryTableRow(InvoiceSummaryTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceSummaryTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceDetailTableDataTable : global::System.Data.TypedTableBase<InvoiceDetailTableRow> {
            
            private global::System.Data.DataColumn columnPerGallon;
            
            private global::System.Data.DataColumn columnManifestNumbers;
            
            private global::System.Data.DataColumn columnDestinationZip;
            
            private global::System.Data.DataColumn columnStoreNumber;
            
            private global::System.Data.DataColumn columnStoreCity;
            
            private global::System.Data.DataColumn columnTotalPieces;
            
            private global::System.Data.DataColumn columnTotalWeight;
            
            private global::System.Data.DataColumn columnDeliveryRate;
            
            private global::System.Data.DataColumn columnDeliveryCharges;
            
            private global::System.Data.DataColumn columnFSCPercentage;
            
            private global::System.Data.DataColumn columnFuelSurcharge;
            
            private global::System.Data.DataColumn columnTotalDeliveryCharges;
            
            private global::System.Data.DataColumn columnLHAllocation;
            
            private global::System.Data.DataColumn columnTotalCharges;
            
            private global::System.Data.DataColumn columnDestinationState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableDataTable() {
                this.TableName = "InvoiceDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerGallonColumn {
                get {
                    return this.columnPerGallon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManifestNumbersColumn {
                get {
                    return this.columnManifestNumbers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationZipColumn {
                get {
                    return this.columnDestinationZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreNumberColumn {
                get {
                    return this.columnStoreNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreCityColumn {
                get {
                    return this.columnStoreCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPiecesColumn {
                get {
                    return this.columnTotalPieces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWeightColumn {
                get {
                    return this.columnTotalWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryRateColumn {
                get {
                    return this.columnDeliveryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryChargesColumn {
                get {
                    return this.columnDeliveryCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCPercentageColumn {
                get {
                    return this.columnFSCPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelSurchargeColumn {
                get {
                    return this.columnFuelSurcharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDeliveryChargesColumn {
                get {
                    return this.columnTotalDeliveryCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHAllocationColumn {
                get {
                    return this.columnLHAllocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalChargesColumn {
                get {
                    return this.columnTotalCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationStateColumn {
                get {
                    return this.columnDestinationState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow this[int index] {
                get {
                    return ((InvoiceDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowChanging;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowChanged;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowDeleting;
            
            public event InvoiceDetailTableRowChangeEventHandler InvoiceDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceDetailTableRow(InvoiceDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow AddInvoiceDetailTableRow(decimal PerGallon, string ManifestNumbers, string DestinationZip, string StoreNumber, string StoreCity, int TotalPieces, int TotalWeight, decimal DeliveryRate, decimal DeliveryCharges, decimal FSCPercentage, decimal FuelSurcharge, decimal TotalDeliveryCharges, decimal LHAllocation, decimal TotalCharges, string DestinationState) {
                InvoiceDetailTableRow rowInvoiceDetailTableRow = ((InvoiceDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PerGallon,
                        ManifestNumbers,
                        DestinationZip,
                        StoreNumber,
                        StoreCity,
                        TotalPieces,
                        TotalWeight,
                        DeliveryRate,
                        DeliveryCharges,
                        FSCPercentage,
                        FuelSurcharge,
                        TotalDeliveryCharges,
                        LHAllocation,
                        TotalCharges,
                        DestinationState};
                rowInvoiceDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceDetailTableRow);
                return rowInvoiceDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceDetailTableDataTable cln = ((InvoiceDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPerGallon = base.Columns["PerGallon"];
                this.columnManifestNumbers = base.Columns["ManifestNumbers"];
                this.columnDestinationZip = base.Columns["DestinationZip"];
                this.columnStoreNumber = base.Columns["StoreNumber"];
                this.columnStoreCity = base.Columns["StoreCity"];
                this.columnTotalPieces = base.Columns["TotalPieces"];
                this.columnTotalWeight = base.Columns["TotalWeight"];
                this.columnDeliveryRate = base.Columns["DeliveryRate"];
                this.columnDeliveryCharges = base.Columns["DeliveryCharges"];
                this.columnFSCPercentage = base.Columns["FSCPercentage"];
                this.columnFuelSurcharge = base.Columns["FuelSurcharge"];
                this.columnTotalDeliveryCharges = base.Columns["TotalDeliveryCharges"];
                this.columnLHAllocation = base.Columns["LHAllocation"];
                this.columnTotalCharges = base.Columns["TotalCharges"];
                this.columnDestinationState = base.Columns["DestinationState"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPerGallon = new global::System.Data.DataColumn("PerGallon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerGallon);
                this.columnManifestNumbers = new global::System.Data.DataColumn("ManifestNumbers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManifestNumbers);
                this.columnDestinationZip = new global::System.Data.DataColumn("DestinationZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationZip);
                this.columnStoreNumber = new global::System.Data.DataColumn("StoreNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreNumber);
                this.columnStoreCity = new global::System.Data.DataColumn("StoreCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreCity);
                this.columnTotalPieces = new global::System.Data.DataColumn("TotalPieces", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPieces);
                this.columnTotalWeight = new global::System.Data.DataColumn("TotalWeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWeight);
                this.columnDeliveryRate = new global::System.Data.DataColumn("DeliveryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryRate);
                this.columnDeliveryCharges = new global::System.Data.DataColumn("DeliveryCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryCharges);
                this.columnFSCPercentage = new global::System.Data.DataColumn("FSCPercentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCPercentage);
                this.columnFuelSurcharge = new global::System.Data.DataColumn("FuelSurcharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelSurcharge);
                this.columnTotalDeliveryCharges = new global::System.Data.DataColumn("TotalDeliveryCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDeliveryCharges);
                this.columnLHAllocation = new global::System.Data.DataColumn("LHAllocation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHAllocation);
                this.columnTotalCharges = new global::System.Data.DataColumn("TotalCharges", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCharges);
                this.columnDestinationState = new global::System.Data.DataColumn("DestinationState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationState);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow NewInvoiceDetailTableRow() {
                return ((InvoiceDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceDetailTableRowChanged != null)) {
                    this.InvoiceDetailTableRowChanged(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceDetailTableRowChanging != null)) {
                    this.InvoiceDetailTableRowChanging(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceDetailTableRowDeleted != null)) {
                    this.InvoiceDetailTableRowDeleted(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceDetailTableRowDeleting != null)) {
                    this.InvoiceDetailTableRowDeleting(this, new InvoiceDetailTableRowChangeEvent(((InvoiceDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceDetailTableRow(InvoiceDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceTLDetailTableDataTable : global::System.Data.TypedTableBase<InvoiceTLDetailTableRow> {
            
            private global::System.Data.DataColumn columnPerGallon;
            
            private global::System.Data.DataColumn columnTrip;
            
            private global::System.Data.DataColumn columnDepartureDate;
            
            private global::System.Data.DataColumn columnUnloadDate;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnMiles;
            
            private global::System.Data.DataColumn columnRatePerMile;
            
            private global::System.Data.DataColumn columnFCSPerMile;
            
            private global::System.Data.DataColumn columnTotalPerMile;
            
            private global::System.Data.DataColumn columnTrailerCharge;
            
            private global::System.Data.DataColumn columnTotalWeight;
            
            private global::System.Data.DataColumn columnCostPerPound;
            
            private global::System.Data.DataColumn columnBLNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableDataTable() {
                this.TableName = "InvoiceTLDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceTLDetailTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceTLDetailTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerGallonColumn {
                get {
                    return this.columnPerGallon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripColumn {
                get {
                    return this.columnTrip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartureDateColumn {
                get {
                    return this.columnDepartureDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnloadDateColumn {
                get {
                    return this.columnUnloadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesColumn {
                get {
                    return this.columnMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatePerMileColumn {
                get {
                    return this.columnRatePerMile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FCSPerMileColumn {
                get {
                    return this.columnFCSPerMile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPerMileColumn {
                get {
                    return this.columnTotalPerMile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerChargeColumn {
                get {
                    return this.columnTrailerCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWeightColumn {
                get {
                    return this.columnTotalWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostPerPoundColumn {
                get {
                    return this.columnCostPerPound;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLNumberColumn {
                get {
                    return this.columnBLNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableRow this[int index] {
                get {
                    return ((InvoiceTLDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceTLDetailTableRowChangeEventHandler InvoiceTLDetailTableRowChanging;
            
            public event InvoiceTLDetailTableRowChangeEventHandler InvoiceTLDetailTableRowChanged;
            
            public event InvoiceTLDetailTableRowChangeEventHandler InvoiceTLDetailTableRowDeleting;
            
            public event InvoiceTLDetailTableRowChangeEventHandler InvoiceTLDetailTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceTLDetailTableRow(InvoiceTLDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableRow AddInvoiceTLDetailTableRow(decimal PerGallon, long Trip, System.DateTime DepartureDate, System.DateTime UnloadDate, string TrailerNumber, int Miles, decimal RatePerMile, decimal FCSPerMile, decimal TotalPerMile, decimal TrailerCharge, int TotalWeight, decimal CostPerPound, string BLNumber) {
                InvoiceTLDetailTableRow rowInvoiceTLDetailTableRow = ((InvoiceTLDetailTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PerGallon,
                        Trip,
                        DepartureDate,
                        UnloadDate,
                        TrailerNumber,
                        Miles,
                        RatePerMile,
                        FCSPerMile,
                        TotalPerMile,
                        TrailerCharge,
                        TotalWeight,
                        CostPerPound,
                        BLNumber};
                rowInvoiceTLDetailTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvoiceTLDetailTableRow);
                return rowInvoiceTLDetailTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvoiceTLDetailTableDataTable cln = ((InvoiceTLDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvoiceTLDetailTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPerGallon = base.Columns["PerGallon"];
                this.columnTrip = base.Columns["Trip"];
                this.columnDepartureDate = base.Columns["DepartureDate"];
                this.columnUnloadDate = base.Columns["UnloadDate"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnMiles = base.Columns["Miles"];
                this.columnRatePerMile = base.Columns["RatePerMile"];
                this.columnFCSPerMile = base.Columns["FCSPerMile"];
                this.columnTotalPerMile = base.Columns["TotalPerMile"];
                this.columnTrailerCharge = base.Columns["TrailerCharge"];
                this.columnTotalWeight = base.Columns["TotalWeight"];
                this.columnCostPerPound = base.Columns["CostPerPound"];
                this.columnBLNumber = base.Columns["BLNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPerGallon = new global::System.Data.DataColumn("PerGallon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerGallon);
                this.columnTrip = new global::System.Data.DataColumn("Trip", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrip);
                this.columnDepartureDate = new global::System.Data.DataColumn("DepartureDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartureDate);
                this.columnUnloadDate = new global::System.Data.DataColumn("UnloadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnloadDate);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnMiles = new global::System.Data.DataColumn("Miles", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiles);
                this.columnRatePerMile = new global::System.Data.DataColumn("RatePerMile", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatePerMile);
                this.columnFCSPerMile = new global::System.Data.DataColumn("FCSPerMile", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFCSPerMile);
                this.columnTotalPerMile = new global::System.Data.DataColumn("TotalPerMile", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPerMile);
                this.columnTrailerCharge = new global::System.Data.DataColumn("TrailerCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerCharge);
                this.columnTotalWeight = new global::System.Data.DataColumn("TotalWeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWeight);
                this.columnCostPerPound = new global::System.Data.DataColumn("CostPerPound", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPerPound);
                this.columnBLNumber = new global::System.Data.DataColumn("BLNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLNumber);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableRow NewInvoiceTLDetailTableRow() {
                return ((InvoiceTLDetailTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvoiceTLDetailTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvoiceTLDetailTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceTLDetailTableRowChanged != null)) {
                    this.InvoiceTLDetailTableRowChanged(this, new InvoiceTLDetailTableRowChangeEvent(((InvoiceTLDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceTLDetailTableRowChanging != null)) {
                    this.InvoiceTLDetailTableRowChanging(this, new InvoiceTLDetailTableRowChangeEvent(((InvoiceTLDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceTLDetailTableRowDeleted != null)) {
                    this.InvoiceTLDetailTableRowDeleted(this, new InvoiceTLDetailTableRowChangeEvent(((InvoiceTLDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceTLDetailTableRowDeleting != null)) {
                    this.InvoiceTLDetailTableRowDeleting(this, new InvoiceTLDetailTableRowChangeEvent(((InvoiceTLDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceTLDetailTableRow(InvoiceTLDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoiceDS ds = new InvoiceDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceTLDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientTableRow : global::System.Data.DataRow {
            
            private ClientTableDataTable tableClientTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientTable = ((ClientTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ClientNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ClientNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DivisionNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.DivisionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivisionNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.DivisionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalCode {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.TerminalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalCode\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.TerminalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerminalName {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.TerminalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminalName\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.TerminalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ARNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.ARNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ARNumber\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.ARNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableClientTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ClientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNumberNull() {
                return this.IsNull(this.tableClientTable.ClientNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNumberNull() {
                this[this.tableClientTable.ClientNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivisionNumberNull() {
                return this.IsNull(this.tableClientTable.DivisionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivisionNumberNull() {
                this[this.tableClientTable.DivisionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableClientTable.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableClientTable.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalCodeNull() {
                return this.IsNull(this.tableClientTable.TerminalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalCodeNull() {
                this[this.tableClientTable.TerminalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalNameNull() {
                return this.IsNull(this.tableClientTable.TerminalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalNameNull() {
                this[this.tableClientTable.TerminalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsARNumberNull() {
                return this.IsNull(this.tableClientTable.ARNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetARNumberNull() {
                this[this.tableClientTable.ARNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableClientTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableClientTable.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientInvoiceTableRow : global::System.Data.DataRow {
            
            private ClientInvoiceTableDataTable tableClientInvoiceTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInvoiceTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientInvoiceTable = ((ClientInvoiceTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientInvoiceTable.InvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNumber\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.InvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.InvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.InvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PostToARDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.PostToARDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostToARDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.PostToARDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.PalletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pallets\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.PalletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableClientInvoiceTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableClientInvoiceTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableClientInvoiceTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReleaseDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInvoiceTable.ReleaseDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseDate\' in table \'ClientInvoiceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInvoiceTable.ReleaseDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNumberNull() {
                return this.IsNull(this.tableClientInvoiceTable.InvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNumberNull() {
                this[this.tableClientInvoiceTable.InvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.InvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDateNull() {
                this[this.tableClientInvoiceTable.InvoiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostToARDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.PostToARDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostToARDateNull() {
                this[this.tableClientInvoiceTable.PostToARDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableClientInvoiceTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableClientInvoiceTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsNull() {
                return this.IsNull(this.tableClientInvoiceTable.PalletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsNull() {
                this[this.tableClientInvoiceTable.PalletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableClientInvoiceTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableClientInvoiceTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableClientInvoiceTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableClientInvoiceTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableClientInvoiceTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableClientInvoiceTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseDateNull() {
                return this.IsNull(this.tableClientInvoiceTable.ReleaseDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseDateNull() {
                this[this.tableClientInvoiceTable.ReleaseDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceSummaryTableRow : global::System.Data.DataRow {
            
            private InvoiceSummaryTableDataTable tableInvoiceSummaryTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceSummaryTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceSummaryTable = ((InvoiceSummaryTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToName\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToAddressline1 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToAddressline1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToAddressline1\' in table \'InvoiceSummaryTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToAddressline1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToAddressline2 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToAddressline2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToAddressline2\' in table \'InvoiceSummaryTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToAddressline2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToCity {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToCity\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToState {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToState\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToZip {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToZip\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillToZIP4 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.BillToZIP4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillToZIP4\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.BillToZIP4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Account_ {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable._Account_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Account#\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable._Account_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.InvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNumber\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.InvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InvoiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInvoiceSummaryTable.InvoiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDate\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.InvoiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Terms {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.TermsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Terms\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.TermsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToName\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToAddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToAddressLine1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToAddressLine1\' in table \'InvoiceSummaryTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToAddressLine1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToAddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToAddressLine2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToAddressLine2\' in table \'InvoiceSummaryTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToAddressLine2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToCity {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToCity\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToState {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToState\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToZip {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToZip\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitToZip4 {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceSummaryTable.RemitToZip4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitToZip4\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.RemitToZip4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ShipmentDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInvoiceSummaryTable.ShipmentDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipmentDay\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.ShipmentDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pieces {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceSummaryTable.PiecesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pieces\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.PiecesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceSummaryTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeliveryCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceSummaryTable.DeliveryChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryCharges\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.DeliveryChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LinehaulCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceSummaryTable.LinehaulChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinehaulCharges\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.LinehaulChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmountDue {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceSummaryTable.TotalAmountDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountDue\' in table \'InvoiceSummaryTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceSummaryTable.TotalAmountDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToNameNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToNameNull() {
                this[this.tableInvoiceSummaryTable.BillToNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToAddressline1Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToAddressline1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToAddressline1Null() {
                this[this.tableInvoiceSummaryTable.BillToAddressline1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToAddressline2Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToAddressline2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToAddressline2Null() {
                this[this.tableInvoiceSummaryTable.BillToAddressline2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToCityNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToCityNull() {
                this[this.tableInvoiceSummaryTable.BillToCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToStateNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToStateNull() {
                this[this.tableInvoiceSummaryTable.BillToStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToZipNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToZipNull() {
                this[this.tableInvoiceSummaryTable.BillToZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillToZIP4Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.BillToZIP4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillToZIP4Null() {
                this[this.tableInvoiceSummaryTable.BillToZIP4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Account_Null() {
                return this.IsNull(this.tableInvoiceSummaryTable._Account_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Account_Null() {
                this[this.tableInvoiceSummaryTable._Account_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNumberNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.InvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNumberNull() {
                this[this.tableInvoiceSummaryTable.InvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDateNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.InvoiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDateNull() {
                this[this.tableInvoiceSummaryTable.InvoiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermsNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.TermsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermsNull() {
                this[this.tableInvoiceSummaryTable.TermsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToNameNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToNameNull() {
                this[this.tableInvoiceSummaryTable.RemitToNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToAddressLine1Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToAddressLine1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToAddressLine1Null() {
                this[this.tableInvoiceSummaryTable.RemitToAddressLine1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToAddressLine2Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToAddressLine2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToAddressLine2Null() {
                this[this.tableInvoiceSummaryTable.RemitToAddressLine2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToCityNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToCityNull() {
                this[this.tableInvoiceSummaryTable.RemitToCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToStateNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToStateNull() {
                this[this.tableInvoiceSummaryTable.RemitToStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToZipNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToZipNull() {
                this[this.tableInvoiceSummaryTable.RemitToZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitToZip4Null() {
                return this.IsNull(this.tableInvoiceSummaryTable.RemitToZip4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitToZip4Null() {
                this[this.tableInvoiceSummaryTable.RemitToZip4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentDayNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.ShipmentDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentDayNull() {
                this[this.tableInvoiceSummaryTable.ShipmentDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPiecesNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.PiecesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPiecesNull() {
                this[this.tableInvoiceSummaryTable.PiecesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableInvoiceSummaryTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryChargesNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.DeliveryChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryChargesNull() {
                this[this.tableInvoiceSummaryTable.DeliveryChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinehaulChargesNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.LinehaulChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinehaulChargesNull() {
                this[this.tableInvoiceSummaryTable.LinehaulChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableInvoiceSummaryTable.TotalAmountDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountDueNull() {
                this[this.tableInvoiceSummaryTable.TotalAmountDueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceDetailTableRow : global::System.Data.DataRow {
            
            private InvoiceDetailTableDataTable tableInvoiceDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceDetailTable = ((InvoiceDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerGallon {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.PerGallonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerGallon\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.PerGallonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManifestNumbers {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.ManifestNumbersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManifestNumbers\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.ManifestNumbersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationZip {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.DestinationZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationZip\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.DestinationZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.StoreNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreNumber\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.StoreNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreCity {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.StoreCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreCity\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.StoreCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalPieces {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetailTable.TotalPiecesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPieces\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.TotalPiecesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalWeight {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetailTable.TotalWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWeight\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.TotalWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeliveryRate {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.DeliveryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryRate\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.DeliveryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeliveryCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.DeliveryChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryCharges\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.DeliveryChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCPercentage {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.FSCPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCPercentage\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.FSCPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuelSurcharge {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.FuelSurchargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelSurcharge\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.FuelSurchargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDeliveryCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.TotalDeliveryChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDeliveryCharges\' in table \'InvoiceDetailTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.TotalDeliveryChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHAllocation {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.LHAllocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LHAllocation\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.LHAllocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCharges {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetailTable.TotalChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCharges\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.TotalChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationState {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetailTable.DestinationStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationState\' in table \'InvoiceDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetailTable.DestinationStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerGallonNull() {
                return this.IsNull(this.tableInvoiceDetailTable.PerGallonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerGallonNull() {
                this[this.tableInvoiceDetailTable.PerGallonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManifestNumbersNull() {
                return this.IsNull(this.tableInvoiceDetailTable.ManifestNumbersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManifestNumbersNull() {
                this[this.tableInvoiceDetailTable.ManifestNumbersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationZipNull() {
                return this.IsNull(this.tableInvoiceDetailTable.DestinationZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationZipNull() {
                this[this.tableInvoiceDetailTable.DestinationZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreNumberNull() {
                return this.IsNull(this.tableInvoiceDetailTable.StoreNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreNumberNull() {
                this[this.tableInvoiceDetailTable.StoreNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreCityNull() {
                return this.IsNull(this.tableInvoiceDetailTable.StoreCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreCityNull() {
                this[this.tableInvoiceDetailTable.StoreCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPiecesNull() {
                return this.IsNull(this.tableInvoiceDetailTable.TotalPiecesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPiecesNull() {
                this[this.tableInvoiceDetailTable.TotalPiecesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWeightNull() {
                return this.IsNull(this.tableInvoiceDetailTable.TotalWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWeightNull() {
                this[this.tableInvoiceDetailTable.TotalWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryRateNull() {
                return this.IsNull(this.tableInvoiceDetailTable.DeliveryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryRateNull() {
                this[this.tableInvoiceDetailTable.DeliveryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryChargesNull() {
                return this.IsNull(this.tableInvoiceDetailTable.DeliveryChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryChargesNull() {
                this[this.tableInvoiceDetailTable.DeliveryChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCPercentageNull() {
                return this.IsNull(this.tableInvoiceDetailTable.FSCPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCPercentageNull() {
                this[this.tableInvoiceDetailTable.FSCPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelSurchargeNull() {
                return this.IsNull(this.tableInvoiceDetailTable.FuelSurchargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelSurchargeNull() {
                this[this.tableInvoiceDetailTable.FuelSurchargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDeliveryChargesNull() {
                return this.IsNull(this.tableInvoiceDetailTable.TotalDeliveryChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDeliveryChargesNull() {
                this[this.tableInvoiceDetailTable.TotalDeliveryChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLHAllocationNull() {
                return this.IsNull(this.tableInvoiceDetailTable.LHAllocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLHAllocationNull() {
                this[this.tableInvoiceDetailTable.LHAllocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalChargesNull() {
                return this.IsNull(this.tableInvoiceDetailTable.TotalChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalChargesNull() {
                this[this.tableInvoiceDetailTable.TotalChargesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationStateNull() {
                return this.IsNull(this.tableInvoiceDetailTable.DestinationStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationStateNull() {
                this[this.tableInvoiceDetailTable.DestinationStateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceTLDetailTableRow : global::System.Data.DataRow {
            
            private InvoiceTLDetailTableDataTable tableInvoiceTLDetailTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceTLDetailTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceTLDetailTable = ((InvoiceTLDetailTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerGallon {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.PerGallonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerGallon\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.PerGallonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Trip {
                get {
                    try {
                        return ((long)(this[this.tableInvoiceTLDetailTable.TripColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trip\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.TripColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DepartureDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInvoiceTLDetailTable.DepartureDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepartureDate\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.DepartureDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UnloadDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInvoiceTLDetailTable.UnloadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnloadDate\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.UnloadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTLDetailTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Miles {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceTLDetailTable.MilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Miles\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.MilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RatePerMile {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.RatePerMileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RatePerMile\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.RatePerMileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FCSPerMile {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.FCSPerMileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FCSPerMile\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.FCSPerMileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalPerMile {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.TotalPerMileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPerMile\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.TotalPerMileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TrailerCharge {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.TrailerChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerCharge\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.TrailerChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalWeight {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceTLDetailTable.TotalWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWeight\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.TotalWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostPerPound {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceTLDetailTable.CostPerPoundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostPerPound\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.CostPerPoundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLNumber {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceTLDetailTable.BLNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLNumber\' in table \'InvoiceTLDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceTLDetailTable.BLNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerGallonNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.PerGallonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerGallonNull() {
                this[this.tableInvoiceTLDetailTable.PerGallonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.TripColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNull() {
                this[this.tableInvoiceTLDetailTable.TripColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartureDateNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.DepartureDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartureDateNull() {
                this[this.tableInvoiceTLDetailTable.DepartureDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnloadDateNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.UnloadDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnloadDateNull() {
                this[this.tableInvoiceTLDetailTable.UnloadDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableInvoiceTLDetailTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.MilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesNull() {
                this[this.tableInvoiceTLDetailTable.MilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatePerMileNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.RatePerMileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatePerMileNull() {
                this[this.tableInvoiceTLDetailTable.RatePerMileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFCSPerMileNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.FCSPerMileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFCSPerMileNull() {
                this[this.tableInvoiceTLDetailTable.FCSPerMileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPerMileNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.TotalPerMileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPerMileNull() {
                this[this.tableInvoiceTLDetailTable.TotalPerMileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerChargeNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.TrailerChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerChargeNull() {
                this[this.tableInvoiceTLDetailTable.TrailerChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWeightNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.TotalWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWeightNull() {
                this[this.tableInvoiceTLDetailTable.TotalWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostPerPoundNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.CostPerPoundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostPerPoundNull() {
                this[this.tableInvoiceTLDetailTable.CostPerPoundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNumberNull() {
                return this.IsNull(this.tableInvoiceTLDetailTable.BLNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNumberNull() {
                this[this.tableInvoiceTLDetailTable.BLNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientTableRowChangeEvent : global::System.EventArgs {
            
            private ClientTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRowChangeEvent(ClientTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientInvoiceTableRowChangeEvent : global::System.EventArgs {
            
            private ClientInvoiceTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRowChangeEvent(ClientInvoiceTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInvoiceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceSummaryTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceSummaryTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableRowChangeEvent(InvoiceSummaryTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceSummaryTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceDetailTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRowChangeEvent(InvoiceDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceTLDetailTableRowChangeEvent : global::System.EventArgs {
            
            private InvoiceTLDetailTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableRowChangeEvent(InvoiceTLDetailTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceTLDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591