//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PickupDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PickupDS : global::System.Data.DataSet {
        
        private PickupTableDataTable tablePickupTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PickupDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PickupDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PickupTable"] != null)) {
                    base.Tables.Add(new PickupTableDataTable(ds.Tables["PickupTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PickupTableDataTable PickupTable {
            get {
                return this.tablePickupTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PickupDS cln = ((PickupDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PickupTable"] != null)) {
                    base.Tables.Add(new PickupTableDataTable(ds.Tables["PickupTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePickupTable = ((PickupTableDataTable)(base.Tables["PickupTable"]));
            if ((initTable == true)) {
                if ((this.tablePickupTable != null)) {
                    this.tablePickupTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PickupDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PickupDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePickupTable = new PickupTableDataTable();
            base.Tables.Add(this.tablePickupTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePickupTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PickupDS ds = new PickupDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PickupTableRowChangeEventHandler(object sender, PickupTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PickupTableDataTable : global::System.Data.TypedTableBase<PickupTableRow> {
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnRt_Date;
            
            private global::System.Data.DataColumn columnDriver;
            
            private global::System.Data.DataColumn columnRt_Name;
            
            private global::System.Data.DataColumn columnRetnTime;
            
            private global::System.Data.DataColumn columnCustomer_ID;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCustType;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnOrderID;
            
            private global::System.Data.DataColumn columnPlanOrdSize;
            
            private global::System.Data.DataColumn columnPlanOrdLbs;
            
            private global::System.Data.DataColumn columnPlanOrdCuFt;
            
            private global::System.Data.DataColumn columnActOrdSize;
            
            private global::System.Data.DataColumn columnActOrdLbs;
            
            private global::System.Data.DataColumn columnUnsched_PU;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnOrdTyp;
            
            private global::System.Data.DataColumn columnPlanCmdty;
            
            private global::System.Data.DataColumn columnActCmdty;
            
            private global::System.Data.DataColumn columnDepot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableDataTable() {
                this.TableName = "PickupTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PickupTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PickupTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rt_DateColumn {
                get {
                    return this.columnRt_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverColumn {
                get {
                    return this.columnDriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rt_NameColumn {
                get {
                    return this.columnRt_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetnTimeColumn {
                get {
                    return this.columnRetnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Customer_IDColumn {
                get {
                    return this.columnCustomer_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustTypeColumn {
                get {
                    return this.columnCustType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanOrdSizeColumn {
                get {
                    return this.columnPlanOrdSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanOrdLbsColumn {
                get {
                    return this.columnPlanOrdLbs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanOrdCuFtColumn {
                get {
                    return this.columnPlanOrdCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActOrdSizeColumn {
                get {
                    return this.columnActOrdSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActOrdLbsColumn {
                get {
                    return this.columnActOrdLbs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Unsched_PUColumn {
                get {
                    return this.columnUnsched_PU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrdTypColumn {
                get {
                    return this.columnOrdTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanCmdtyColumn {
                get {
                    return this.columnPlanCmdty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActCmdtyColumn {
                get {
                    return this.columnActCmdty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepotColumn {
                get {
                    return this.columnDepot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableRow this[int index] {
                get {
                    return ((PickupTableRow)(this.Rows[index]));
                }
            }
            
            public event PickupTableRowChangeEventHandler PickupTableRowChanging;
            
            public event PickupTableRowChangeEventHandler PickupTableRowChanged;
            
            public event PickupTableRowChangeEventHandler PickupTableRowDeleting;
            
            public event PickupTableRowChangeEventHandler PickupTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPickupTableRow(PickupTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableRow AddPickupTableRow(
                        int RecordID, 
                        System.DateTime Rt_Date, 
                        string Driver, 
                        string Rt_Name, 
                        short RetnTime, 
                        string Customer_ID, 
                        string CustomerName, 
                        string CustType, 
                        string Address, 
                        string City, 
                        string State, 
                        string Zip, 
                        string OrderID, 
                        float PlanOrdSize, 
                        float PlanOrdLbs, 
                        float PlanOrdCuFt, 
                        float ActOrdSize, 
                        float ActOrdLbs, 
                        string Unsched_PU, 
                        string Comments, 
                        string OrdTyp, 
                        string PlanCmdty, 
                        string ActCmdty, 
                        string Depot) {
                PickupTableRow rowPickupTableRow = ((PickupTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordID,
                        Rt_Date,
                        Driver,
                        Rt_Name,
                        RetnTime,
                        Customer_ID,
                        CustomerName,
                        CustType,
                        Address,
                        City,
                        State,
                        Zip,
                        OrderID,
                        PlanOrdSize,
                        PlanOrdLbs,
                        PlanOrdCuFt,
                        ActOrdSize,
                        ActOrdLbs,
                        Unsched_PU,
                        Comments,
                        OrdTyp,
                        PlanCmdty,
                        ActCmdty,
                        Depot};
                rowPickupTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPickupTableRow);
                return rowPickupTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PickupTableDataTable cln = ((PickupTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PickupTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordID = base.Columns["RecordID"];
                this.columnRt_Date = base.Columns["Rt_Date"];
                this.columnDriver = base.Columns["Driver"];
                this.columnRt_Name = base.Columns["Rt_Name"];
                this.columnRetnTime = base.Columns["RetnTime"];
                this.columnCustomer_ID = base.Columns["Customer_ID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCustType = base.Columns["CustType"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnOrderID = base.Columns["OrderID"];
                this.columnPlanOrdSize = base.Columns["PlanOrdSize"];
                this.columnPlanOrdLbs = base.Columns["PlanOrdLbs"];
                this.columnPlanOrdCuFt = base.Columns["PlanOrdCuFt"];
                this.columnActOrdSize = base.Columns["ActOrdSize"];
                this.columnActOrdLbs = base.Columns["ActOrdLbs"];
                this.columnUnsched_PU = base.Columns["Unsched_PU"];
                this.columnComments = base.Columns["Comments"];
                this.columnOrdTyp = base.Columns["OrdTyp"];
                this.columnPlanCmdty = base.Columns["PlanCmdty"];
                this.columnActCmdty = base.Columns["ActCmdty"];
                this.columnDepot = base.Columns["Depot"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnRt_Date = new global::System.Data.DataColumn("Rt_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRt_Date);
                this.columnDriver = new global::System.Data.DataColumn("Driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriver);
                this.columnRt_Name = new global::System.Data.DataColumn("Rt_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRt_Name);
                this.columnRetnTime = new global::System.Data.DataColumn("RetnTime", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetnTime);
                this.columnCustomer_ID = new global::System.Data.DataColumn("Customer_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_ID);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCustType = new global::System.Data.DataColumn("CustType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustType);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnOrderID = new global::System.Data.DataColumn("OrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderID);
                this.columnPlanOrdSize = new global::System.Data.DataColumn("PlanOrdSize", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanOrdSize);
                this.columnPlanOrdLbs = new global::System.Data.DataColumn("PlanOrdLbs", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanOrdLbs);
                this.columnPlanOrdCuFt = new global::System.Data.DataColumn("PlanOrdCuFt", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanOrdCuFt);
                this.columnActOrdSize = new global::System.Data.DataColumn("ActOrdSize", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActOrdSize);
                this.columnActOrdLbs = new global::System.Data.DataColumn("ActOrdLbs", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActOrdLbs);
                this.columnUnsched_PU = new global::System.Data.DataColumn("Unsched_PU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnsched_PU);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnOrdTyp = new global::System.Data.DataColumn("OrdTyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrdTyp);
                this.columnPlanCmdty = new global::System.Data.DataColumn("PlanCmdty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanCmdty);
                this.columnActCmdty = new global::System.Data.DataColumn("ActCmdty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActCmdty);
                this.columnDepot = new global::System.Data.DataColumn("Depot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepot);
                this.columnRetnTime.DefaultValue = ((short)(0));
                this.columnCustType.DefaultValue = ((string)(""));
                this.columnActOrdSize.DefaultValue = ((float)(0F));
                this.columnActOrdLbs.DefaultValue = ((float)(0F));
                this.columnUnsched_PU.DefaultValue = ((string)(""));
                this.columnComments.DefaultValue = ((string)(""));
                this.columnOrdTyp.DefaultValue = ((string)("R"));
                this.columnActCmdty.DefaultValue = ((string)("CARTONS"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableRow NewPickupTableRow() {
                return ((PickupTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PickupTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PickupTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PickupTableRowChanged != null)) {
                    this.PickupTableRowChanged(this, new PickupTableRowChangeEvent(((PickupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PickupTableRowChanging != null)) {
                    this.PickupTableRowChanging(this, new PickupTableRowChangeEvent(((PickupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PickupTableRowDeleted != null)) {
                    this.PickupTableRowDeleted(this, new PickupTableRowChangeEvent(((PickupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PickupTableRowDeleting != null)) {
                    this.PickupTableRowDeleting(this, new PickupTableRowChangeEvent(((PickupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePickupTableRow(PickupTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PickupDS ds = new PickupDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PickupTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PickupTableRow : global::System.Data.DataRow {
            
            private PickupTableDataTable tablePickupTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PickupTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePickupTable = ((PickupTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordID {
                get {
                    try {
                        return ((int)(this[this.tablePickupTable.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Rt_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePickupTable.Rt_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rt_Date\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.Rt_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Driver {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.DriverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Driver\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.DriverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rt_Name {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.Rt_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rt_Name\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.Rt_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RetnTime {
                get {
                    try {
                        return ((short)(this[this.tablePickupTable.RetnTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RetnTime\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.RetnTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer_ID {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.Customer_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer_ID\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.Customer_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustType {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.CustTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustType\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.CustTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderID {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.OrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderID\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.OrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PlanOrdSize {
                get {
                    try {
                        return ((float)(this[this.tablePickupTable.PlanOrdSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanOrdSize\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.PlanOrdSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PlanOrdLbs {
                get {
                    try {
                        return ((float)(this[this.tablePickupTable.PlanOrdLbsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanOrdLbs\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.PlanOrdLbsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PlanOrdCuFt {
                get {
                    try {
                        return ((float)(this[this.tablePickupTable.PlanOrdCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanOrdCuFt\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.PlanOrdCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ActOrdSize {
                get {
                    try {
                        return ((float)(this[this.tablePickupTable.ActOrdSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActOrdSize\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.ActOrdSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ActOrdLbs {
                get {
                    try {
                        return ((float)(this[this.tablePickupTable.ActOrdLbsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActOrdLbs\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.ActOrdLbsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unsched_PU {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.Unsched_PUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unsched_PU\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.Unsched_PUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrdTyp {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.OrdTypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrdTyp\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.OrdTypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlanCmdty {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.PlanCmdtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanCmdty\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.PlanCmdtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActCmdty {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.ActCmdtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActCmdty\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.ActCmdtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depot {
                get {
                    try {
                        return ((string)(this[this.tablePickupTable.DepotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depot\' in table \'PickupTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupTable.DepotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tablePickupTable.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tablePickupTable.RecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRt_DateNull() {
                return this.IsNull(this.tablePickupTable.Rt_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRt_DateNull() {
                this[this.tablePickupTable.Rt_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNull() {
                return this.IsNull(this.tablePickupTable.DriverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNull() {
                this[this.tablePickupTable.DriverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRt_NameNull() {
                return this.IsNull(this.tablePickupTable.Rt_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRt_NameNull() {
                this[this.tablePickupTable.Rt_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetnTimeNull() {
                return this.IsNull(this.tablePickupTable.RetnTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetnTimeNull() {
                this[this.tablePickupTable.RetnTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomer_IDNull() {
                return this.IsNull(this.tablePickupTable.Customer_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomer_IDNull() {
                this[this.tablePickupTable.Customer_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablePickupTable.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tablePickupTable.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustTypeNull() {
                return this.IsNull(this.tablePickupTable.CustTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustTypeNull() {
                this[this.tablePickupTable.CustTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePickupTable.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePickupTable.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePickupTable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePickupTable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePickupTable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePickupTable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePickupTable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePickupTable.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderIDNull() {
                return this.IsNull(this.tablePickupTable.OrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderIDNull() {
                this[this.tablePickupTable.OrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlanOrdSizeNull() {
                return this.IsNull(this.tablePickupTable.PlanOrdSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlanOrdSizeNull() {
                this[this.tablePickupTable.PlanOrdSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlanOrdLbsNull() {
                return this.IsNull(this.tablePickupTable.PlanOrdLbsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlanOrdLbsNull() {
                this[this.tablePickupTable.PlanOrdLbsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlanOrdCuFtNull() {
                return this.IsNull(this.tablePickupTable.PlanOrdCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlanOrdCuFtNull() {
                this[this.tablePickupTable.PlanOrdCuFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActOrdSizeNull() {
                return this.IsNull(this.tablePickupTable.ActOrdSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActOrdSizeNull() {
                this[this.tablePickupTable.ActOrdSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActOrdLbsNull() {
                return this.IsNull(this.tablePickupTable.ActOrdLbsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActOrdLbsNull() {
                this[this.tablePickupTable.ActOrdLbsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnsched_PUNull() {
                return this.IsNull(this.tablePickupTable.Unsched_PUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnsched_PUNull() {
                this[this.tablePickupTable.Unsched_PUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tablePickupTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tablePickupTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrdTypNull() {
                return this.IsNull(this.tablePickupTable.OrdTypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrdTypNull() {
                this[this.tablePickupTable.OrdTypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlanCmdtyNull() {
                return this.IsNull(this.tablePickupTable.PlanCmdtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlanCmdtyNull() {
                this[this.tablePickupTable.PlanCmdtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActCmdtyNull() {
                return this.IsNull(this.tablePickupTable.ActCmdtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActCmdtyNull() {
                this[this.tablePickupTable.ActCmdtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepotNull() {
                return this.IsNull(this.tablePickupTable.DepotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepotNull() {
                this[this.tablePickupTable.DepotColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PickupTableRowChangeEvent : global::System.EventArgs {
            
            private PickupTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableRowChangeEvent(PickupTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591