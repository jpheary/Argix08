//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Terminals {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ScanAuditDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ScanAuditDS : global::System.Data.DataSet {
        
        private ScanAuditTableDataTable tableScanAuditTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScanAuditDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ScanAuditDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ScanAuditTable"] != null)) {
                    base.Tables.Add(new ScanAuditTableDataTable(ds.Tables["ScanAuditTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScanAuditTableDataTable ScanAuditTable {
            get {
                return this.tableScanAuditTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ScanAuditDS cln = ((ScanAuditDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScanAuditTable"] != null)) {
                    base.Tables.Add(new ScanAuditTableDataTable(ds.Tables["ScanAuditTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableScanAuditTable = ((ScanAuditTableDataTable)(base.Tables["ScanAuditTable"]));
            if ((initTable == true)) {
                if ((this.tableScanAuditTable != null)) {
                    this.tableScanAuditTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ScanAuditDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ScanAuditDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScanAuditTable = new ScanAuditTableDataTable();
            base.Tables.Add(this.tableScanAuditTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScanAuditTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ScanAuditDS ds = new ScanAuditDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ScanAuditTableRowChangeEventHandler(object sender, ScanAuditTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScanAuditTableDataTable : global::System.Data.TypedTableBase<ScanAuditTableRow> {
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnRtDate;
            
            private global::System.Data.DataColumn columnDriver;
            
            private global::System.Data.DataColumn columnRtName;
            
            private global::System.Data.DataColumn columnRtSeq;
            
            private global::System.Data.DataColumn columnCustAcct;
            
            private global::System.Data.DataColumn columnCustName;
            
            private global::System.Data.DataColumn columnMallBldg;
            
            private global::System.Data.DataColumn columnOrdOpen;
            
            private global::System.Data.DataColumn columnOrdClose;
            
            private global::System.Data.DataColumn columnWaitMin;
            
            private global::System.Data.DataColumn columnPlnArr;
            
            private global::System.Data.DataColumn columnPlnDep;
            
            private global::System.Data.DataColumn columnArrive;
            
            private global::System.Data.DataColumn columnBell;
            
            private global::System.Data.DataColumn columnDelStart;
            
            private global::System.Data.DataColumn columnDelEnd;
            
            private global::System.Data.DataColumn columnDepart;
            
            private global::System.Data.DataColumn columnTimeEntryBy;
            
            private global::System.Data.DataColumn columnOrderID;
            
            private global::System.Data.DataColumn columnPieces;
            
            private global::System.Data.DataColumn columnCmdtyCls;
            
            private global::System.Data.DataColumn columnCmdtyDesc;
            
            private global::System.Data.DataColumn columnOrdTyp;
            
            private global::System.Data.DataColumn columnCtnsScanned;
            
            private global::System.Data.DataColumn columnScanUser;
            
            private global::System.Data.DataColumn columnPayee;
            
            private global::System.Data.DataColumn columnTrip;
            
            private global::System.Data.DataColumn columnTripStop;
            
            private global::System.Data.DataColumn columnRtCls;
            
            private global::System.Data.DataColumn columnRtSet;
            
            private global::System.Data.DataColumn columnOnTimeIssue;
            
            private global::System.Data.DataColumn columnScanIssue;
            
            private global::System.Data.DataColumn columnAdditComments;
            
            private global::System.Data.DataColumn columnEntryBy;
            
            private global::System.Data.DataColumn columnUpdated;
            
            private global::System.Data.DataColumn columnCRGStatus;
            
            private global::System.Data.DataColumn columnCRGResolution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableDataTable() {
                this.TableName = "ScanAuditTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScanAuditTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScanAuditTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtDateColumn {
                get {
                    return this.columnRtDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverColumn {
                get {
                    return this.columnDriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtNameColumn {
                get {
                    return this.columnRtName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtSeqColumn {
                get {
                    return this.columnRtSeq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustAcctColumn {
                get {
                    return this.columnCustAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustNameColumn {
                get {
                    return this.columnCustName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MallBldgColumn {
                get {
                    return this.columnMallBldg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrdOpenColumn {
                get {
                    return this.columnOrdOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrdCloseColumn {
                get {
                    return this.columnOrdClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaitMinColumn {
                get {
                    return this.columnWaitMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlnArrColumn {
                get {
                    return this.columnPlnArr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlnDepColumn {
                get {
                    return this.columnPlnDep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArriveColumn {
                get {
                    return this.columnArrive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BellColumn {
                get {
                    return this.columnBell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelStartColumn {
                get {
                    return this.columnDelStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelEndColumn {
                get {
                    return this.columnDelEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartColumn {
                get {
                    return this.columnDepart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeEntryByColumn {
                get {
                    return this.columnTimeEntryBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PiecesColumn {
                get {
                    return this.columnPieces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmdtyClsColumn {
                get {
                    return this.columnCmdtyCls;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmdtyDescColumn {
                get {
                    return this.columnCmdtyDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrdTypColumn {
                get {
                    return this.columnOrdTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CtnsScannedColumn {
                get {
                    return this.columnCtnsScanned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanUserColumn {
                get {
                    return this.columnScanUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayeeColumn {
                get {
                    return this.columnPayee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripColumn {
                get {
                    return this.columnTrip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripStopColumn {
                get {
                    return this.columnTripStop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtClsColumn {
                get {
                    return this.columnRtCls;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtSetColumn {
                get {
                    return this.columnRtSet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OnTimeIssueColumn {
                get {
                    return this.columnOnTimeIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanIssueColumn {
                get {
                    return this.columnScanIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdditCommentsColumn {
                get {
                    return this.columnAdditComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryByColumn {
                get {
                    return this.columnEntryBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CRGStatusColumn {
                get {
                    return this.columnCRGStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CRGResolutionColumn {
                get {
                    return this.columnCRGResolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableRow this[int index] {
                get {
                    return ((ScanAuditTableRow)(this.Rows[index]));
                }
            }
            
            public event ScanAuditTableRowChangeEventHandler ScanAuditTableRowChanging;
            
            public event ScanAuditTableRowChangeEventHandler ScanAuditTableRowChanged;
            
            public event ScanAuditTableRowChangeEventHandler ScanAuditTableRowDeleting;
            
            public event ScanAuditTableRowChangeEventHandler ScanAuditTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScanAuditTableRow(ScanAuditTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableRow AddScanAuditTableRow(
                        int RecordID, 
                        System.DateTime RtDate, 
                        string Driver, 
                        string RtName, 
                        int RtSeq, 
                        string CustAcct, 
                        string CustName, 
                        string MallBldg, 
                        short OrdOpen, 
                        short OrdClose, 
                        short WaitMin, 
                        short PlnArr, 
                        short PlnDep, 
                        string Arrive, 
                        string Bell, 
                        string DelStart, 
                        string DelEnd, 
                        string Depart, 
                        string TimeEntryBy, 
                        string OrderID, 
                        float Pieces, 
                        string CmdtyCls, 
                        string CmdtyDesc, 
                        string OrdTyp, 
                        int CtnsScanned, 
                        string ScanUser, 
                        string Payee, 
                        short Trip, 
                        short TripStop, 
                        string RtCls, 
                        string RtSet, 
                        string OnTimeIssue, 
                        string ScanIssue, 
                        string AdditComments, 
                        string EntryBy, 
                        System.DateTime Updated, 
                        string CRGStatus, 
                        string CRGResolution) {
                ScanAuditTableRow rowScanAuditTableRow = ((ScanAuditTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordID,
                        RtDate,
                        Driver,
                        RtName,
                        RtSeq,
                        CustAcct,
                        CustName,
                        MallBldg,
                        OrdOpen,
                        OrdClose,
                        WaitMin,
                        PlnArr,
                        PlnDep,
                        Arrive,
                        Bell,
                        DelStart,
                        DelEnd,
                        Depart,
                        TimeEntryBy,
                        OrderID,
                        Pieces,
                        CmdtyCls,
                        CmdtyDesc,
                        OrdTyp,
                        CtnsScanned,
                        ScanUser,
                        Payee,
                        Trip,
                        TripStop,
                        RtCls,
                        RtSet,
                        OnTimeIssue,
                        ScanIssue,
                        AdditComments,
                        EntryBy,
                        Updated,
                        CRGStatus,
                        CRGResolution};
                rowScanAuditTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScanAuditTableRow);
                return rowScanAuditTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScanAuditTableDataTable cln = ((ScanAuditTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScanAuditTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordID = base.Columns["RecordID"];
                this.columnRtDate = base.Columns["RtDate"];
                this.columnDriver = base.Columns["Driver"];
                this.columnRtName = base.Columns["RtName"];
                this.columnRtSeq = base.Columns["RtSeq"];
                this.columnCustAcct = base.Columns["CustAcct"];
                this.columnCustName = base.Columns["CustName"];
                this.columnMallBldg = base.Columns["MallBldg"];
                this.columnOrdOpen = base.Columns["OrdOpen"];
                this.columnOrdClose = base.Columns["OrdClose"];
                this.columnWaitMin = base.Columns["WaitMin"];
                this.columnPlnArr = base.Columns["PlnArr"];
                this.columnPlnDep = base.Columns["PlnDep"];
                this.columnArrive = base.Columns["Arrive"];
                this.columnBell = base.Columns["Bell"];
                this.columnDelStart = base.Columns["DelStart"];
                this.columnDelEnd = base.Columns["DelEnd"];
                this.columnDepart = base.Columns["Depart"];
                this.columnTimeEntryBy = base.Columns["TimeEntryBy"];
                this.columnOrderID = base.Columns["OrderID"];
                this.columnPieces = base.Columns["Pieces"];
                this.columnCmdtyCls = base.Columns["CmdtyCls"];
                this.columnCmdtyDesc = base.Columns["CmdtyDesc"];
                this.columnOrdTyp = base.Columns["OrdTyp"];
                this.columnCtnsScanned = base.Columns["CtnsScanned"];
                this.columnScanUser = base.Columns["ScanUser"];
                this.columnPayee = base.Columns["Payee"];
                this.columnTrip = base.Columns["Trip"];
                this.columnTripStop = base.Columns["TripStop"];
                this.columnRtCls = base.Columns["RtCls"];
                this.columnRtSet = base.Columns["RtSet"];
                this.columnOnTimeIssue = base.Columns["OnTimeIssue"];
                this.columnScanIssue = base.Columns["ScanIssue"];
                this.columnAdditComments = base.Columns["AdditComments"];
                this.columnEntryBy = base.Columns["EntryBy"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnCRGStatus = base.Columns["CRGStatus"];
                this.columnCRGResolution = base.Columns["CRGResolution"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnRtDate = new global::System.Data.DataColumn("RtDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtDate);
                this.columnDriver = new global::System.Data.DataColumn("Driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriver);
                this.columnRtName = new global::System.Data.DataColumn("RtName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtName);
                this.columnRtSeq = new global::System.Data.DataColumn("RtSeq", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtSeq);
                this.columnCustAcct = new global::System.Data.DataColumn("CustAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustAcct);
                this.columnCustName = new global::System.Data.DataColumn("CustName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustName);
                this.columnMallBldg = new global::System.Data.DataColumn("MallBldg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMallBldg);
                this.columnOrdOpen = new global::System.Data.DataColumn("OrdOpen", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrdOpen);
                this.columnOrdClose = new global::System.Data.DataColumn("OrdClose", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrdClose);
                this.columnWaitMin = new global::System.Data.DataColumn("WaitMin", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaitMin);
                this.columnPlnArr = new global::System.Data.DataColumn("PlnArr", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlnArr);
                this.columnPlnDep = new global::System.Data.DataColumn("PlnDep", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlnDep);
                this.columnArrive = new global::System.Data.DataColumn("Arrive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrive);
                this.columnBell = new global::System.Data.DataColumn("Bell", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBell);
                this.columnDelStart = new global::System.Data.DataColumn("DelStart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelStart);
                this.columnDelEnd = new global::System.Data.DataColumn("DelEnd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelEnd);
                this.columnDepart = new global::System.Data.DataColumn("Depart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepart);
                this.columnTimeEntryBy = new global::System.Data.DataColumn("TimeEntryBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeEntryBy);
                this.columnOrderID = new global::System.Data.DataColumn("OrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderID);
                this.columnPieces = new global::System.Data.DataColumn("Pieces", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPieces);
                this.columnCmdtyCls = new global::System.Data.DataColumn("CmdtyCls", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmdtyCls);
                this.columnCmdtyDesc = new global::System.Data.DataColumn("CmdtyDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmdtyDesc);
                this.columnOrdTyp = new global::System.Data.DataColumn("OrdTyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrdTyp);
                this.columnCtnsScanned = new global::System.Data.DataColumn("CtnsScanned", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCtnsScanned);
                this.columnScanUser = new global::System.Data.DataColumn("ScanUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanUser);
                this.columnPayee = new global::System.Data.DataColumn("Payee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayee);
                this.columnTrip = new global::System.Data.DataColumn("Trip", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrip);
                this.columnTripStop = new global::System.Data.DataColumn("TripStop", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripStop);
                this.columnRtCls = new global::System.Data.DataColumn("RtCls", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtCls);
                this.columnRtSet = new global::System.Data.DataColumn("RtSet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtSet);
                this.columnOnTimeIssue = new global::System.Data.DataColumn("OnTimeIssue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOnTimeIssue);
                this.columnScanIssue = new global::System.Data.DataColumn("ScanIssue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanIssue);
                this.columnAdditComments = new global::System.Data.DataColumn("AdditComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdditComments);
                this.columnEntryBy = new global::System.Data.DataColumn("EntryBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryBy);
                this.columnUpdated = new global::System.Data.DataColumn("Updated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnCRGStatus = new global::System.Data.DataColumn("CRGStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCRGStatus);
                this.columnCRGResolution = new global::System.Data.DataColumn("CRGResolution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCRGResolution);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableRow NewScanAuditTableRow() {
                return ((ScanAuditTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScanAuditTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScanAuditTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScanAuditTableRowChanged != null)) {
                    this.ScanAuditTableRowChanged(this, new ScanAuditTableRowChangeEvent(((ScanAuditTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScanAuditTableRowChanging != null)) {
                    this.ScanAuditTableRowChanging(this, new ScanAuditTableRowChangeEvent(((ScanAuditTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScanAuditTableRowDeleted != null)) {
                    this.ScanAuditTableRowDeleted(this, new ScanAuditTableRowChangeEvent(((ScanAuditTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScanAuditTableRowDeleting != null)) {
                    this.ScanAuditTableRowDeleting(this, new ScanAuditTableRowChangeEvent(((ScanAuditTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScanAuditTableRow(ScanAuditTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScanAuditDS ds = new ScanAuditDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScanAuditTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScanAuditTableRow : global::System.Data.DataRow {
            
            private ScanAuditTableDataTable tableScanAuditTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScanAuditTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScanAuditTable = ((ScanAuditTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordID {
                get {
                    try {
                        return ((int)(this[this.tableScanAuditTable.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RtDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScanAuditTable.RtDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtDate\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RtDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Driver {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.DriverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Driver\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.DriverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RtName {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.RtNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtName\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RtNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RtSeq {
                get {
                    try {
                        return ((int)(this[this.tableScanAuditTable.RtSeqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtSeq\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RtSeqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustAcct {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CustAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustAcct\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CustAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustName {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CustNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustName\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CustNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MallBldg {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.MallBldgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MallBldg\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.MallBldgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short OrdOpen {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.OrdOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrdOpen\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.OrdOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short OrdClose {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.OrdCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrdClose\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.OrdCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short WaitMin {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.WaitMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaitMin\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.WaitMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PlnArr {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.PlnArrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlnArr\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.PlnArrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PlnDep {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.PlnDepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlnDep\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.PlnDepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Arrive {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.ArriveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Arrive\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.ArriveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bell {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.BellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bell\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.BellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelStart {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.DelStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelStart\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.DelStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DelEnd {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.DelEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelEnd\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.DelEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depart {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.DepartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depart\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.DepartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeEntryBy {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.TimeEntryByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeEntryBy\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.TimeEntryByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderID {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.OrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderID\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.OrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Pieces {
                get {
                    try {
                        return ((float)(this[this.tableScanAuditTable.PiecesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pieces\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.PiecesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmdtyCls {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CmdtyClsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmdtyCls\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CmdtyClsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CmdtyDesc {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CmdtyDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmdtyDesc\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CmdtyDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrdTyp {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.OrdTypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrdTyp\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.OrdTypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CtnsScanned {
                get {
                    try {
                        return ((int)(this[this.tableScanAuditTable.CtnsScannedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CtnsScanned\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CtnsScannedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScanUser {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.ScanUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanUser\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.ScanUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Payee {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.PayeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Payee\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.PayeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Trip {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.TripColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trip\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.TripColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TripStop {
                get {
                    try {
                        return ((short)(this[this.tableScanAuditTable.TripStopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripStop\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.TripStopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RtCls {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.RtClsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtCls\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RtClsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RtSet {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.RtSetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtSet\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.RtSetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OnTimeIssue {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.OnTimeIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OnTimeIssue\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.OnTimeIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScanIssue {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.ScanIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanIssue\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.ScanIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdditComments {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.AdditCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdditComments\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.AdditCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntryBy {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.EntryByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryBy\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.EntryByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Updated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScanAuditTable.UpdatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Updated\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.UpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CRGStatus {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CRGStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CRGStatus\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CRGStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CRGResolution {
                get {
                    try {
                        return ((string)(this[this.tableScanAuditTable.CRGResolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CRGResolution\' in table \'ScanAuditTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScanAuditTable.CRGResolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tableScanAuditTable.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tableScanAuditTable.RecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtDateNull() {
                return this.IsNull(this.tableScanAuditTable.RtDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtDateNull() {
                this[this.tableScanAuditTable.RtDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNull() {
                return this.IsNull(this.tableScanAuditTable.DriverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNull() {
                this[this.tableScanAuditTable.DriverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtNameNull() {
                return this.IsNull(this.tableScanAuditTable.RtNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtNameNull() {
                this[this.tableScanAuditTable.RtNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtSeqNull() {
                return this.IsNull(this.tableScanAuditTable.RtSeqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtSeqNull() {
                this[this.tableScanAuditTable.RtSeqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustAcctNull() {
                return this.IsNull(this.tableScanAuditTable.CustAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustAcctNull() {
                this[this.tableScanAuditTable.CustAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustNameNull() {
                return this.IsNull(this.tableScanAuditTable.CustNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustNameNull() {
                this[this.tableScanAuditTable.CustNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMallBldgNull() {
                return this.IsNull(this.tableScanAuditTable.MallBldgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMallBldgNull() {
                this[this.tableScanAuditTable.MallBldgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrdOpenNull() {
                return this.IsNull(this.tableScanAuditTable.OrdOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrdOpenNull() {
                this[this.tableScanAuditTable.OrdOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrdCloseNull() {
                return this.IsNull(this.tableScanAuditTable.OrdCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrdCloseNull() {
                this[this.tableScanAuditTable.OrdCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaitMinNull() {
                return this.IsNull(this.tableScanAuditTable.WaitMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaitMinNull() {
                this[this.tableScanAuditTable.WaitMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlnArrNull() {
                return this.IsNull(this.tableScanAuditTable.PlnArrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlnArrNull() {
                this[this.tableScanAuditTable.PlnArrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlnDepNull() {
                return this.IsNull(this.tableScanAuditTable.PlnDepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlnDepNull() {
                this[this.tableScanAuditTable.PlnDepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArriveNull() {
                return this.IsNull(this.tableScanAuditTable.ArriveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArriveNull() {
                this[this.tableScanAuditTable.ArriveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBellNull() {
                return this.IsNull(this.tableScanAuditTable.BellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBellNull() {
                this[this.tableScanAuditTable.BellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelStartNull() {
                return this.IsNull(this.tableScanAuditTable.DelStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelStartNull() {
                this[this.tableScanAuditTable.DelStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelEndNull() {
                return this.IsNull(this.tableScanAuditTable.DelEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelEndNull() {
                this[this.tableScanAuditTable.DelEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartNull() {
                return this.IsNull(this.tableScanAuditTable.DepartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartNull() {
                this[this.tableScanAuditTable.DepartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeEntryByNull() {
                return this.IsNull(this.tableScanAuditTable.TimeEntryByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeEntryByNull() {
                this[this.tableScanAuditTable.TimeEntryByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderIDNull() {
                return this.IsNull(this.tableScanAuditTable.OrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderIDNull() {
                this[this.tableScanAuditTable.OrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPiecesNull() {
                return this.IsNull(this.tableScanAuditTable.PiecesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPiecesNull() {
                this[this.tableScanAuditTable.PiecesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmdtyClsNull() {
                return this.IsNull(this.tableScanAuditTable.CmdtyClsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmdtyClsNull() {
                this[this.tableScanAuditTable.CmdtyClsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmdtyDescNull() {
                return this.IsNull(this.tableScanAuditTable.CmdtyDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmdtyDescNull() {
                this[this.tableScanAuditTable.CmdtyDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrdTypNull() {
                return this.IsNull(this.tableScanAuditTable.OrdTypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrdTypNull() {
                this[this.tableScanAuditTable.OrdTypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCtnsScannedNull() {
                return this.IsNull(this.tableScanAuditTable.CtnsScannedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCtnsScannedNull() {
                this[this.tableScanAuditTable.CtnsScannedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanUserNull() {
                return this.IsNull(this.tableScanAuditTable.ScanUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanUserNull() {
                this[this.tableScanAuditTable.ScanUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayeeNull() {
                return this.IsNull(this.tableScanAuditTable.PayeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayeeNull() {
                this[this.tableScanAuditTable.PayeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNull() {
                return this.IsNull(this.tableScanAuditTable.TripColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNull() {
                this[this.tableScanAuditTable.TripColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripStopNull() {
                return this.IsNull(this.tableScanAuditTable.TripStopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripStopNull() {
                this[this.tableScanAuditTable.TripStopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtClsNull() {
                return this.IsNull(this.tableScanAuditTable.RtClsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtClsNull() {
                this[this.tableScanAuditTable.RtClsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtSetNull() {
                return this.IsNull(this.tableScanAuditTable.RtSetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtSetNull() {
                this[this.tableScanAuditTable.RtSetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOnTimeIssueNull() {
                return this.IsNull(this.tableScanAuditTable.OnTimeIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOnTimeIssueNull() {
                this[this.tableScanAuditTable.OnTimeIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanIssueNull() {
                return this.IsNull(this.tableScanAuditTable.ScanIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanIssueNull() {
                this[this.tableScanAuditTable.ScanIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdditCommentsNull() {
                return this.IsNull(this.tableScanAuditTable.AdditCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdditCommentsNull() {
                this[this.tableScanAuditTable.AdditCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryByNull() {
                return this.IsNull(this.tableScanAuditTable.EntryByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryByNull() {
                this[this.tableScanAuditTable.EntryByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tableScanAuditTable.UpdatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedNull() {
                this[this.tableScanAuditTable.UpdatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCRGStatusNull() {
                return this.IsNull(this.tableScanAuditTable.CRGStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCRGStatusNull() {
                this[this.tableScanAuditTable.CRGStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCRGResolutionNull() {
                return this.IsNull(this.tableScanAuditTable.CRGResolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCRGResolutionNull() {
                this[this.tableScanAuditTable.CRGResolutionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScanAuditTableRowChangeEvent : global::System.EventArgs {
            
            private ScanAuditTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableRowChangeEvent(ScanAuditTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanAuditTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591