//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Finance {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DriverCompDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DriverCompDS : global::System.Data.DataSet {
        
        private DriverCompTableDataTable tableDriverCompTable;
        
        private DriverRouteTableDataTable tableDriverRouteTable;
        
        private RoadshowRouteTableDataTable tableRoadshowRouteTable;
        
        private AdjustmentTypeTableDataTable tableAdjustmentTypeTable;
        
        private DriverEquipmentTableDataTable tableDriverEquipmentTable;
        
        private TerminalConfigurationTableDataTable tableTerminalConfigurationTable;
        
        private global::System.Data.DataRelation relationDriverCompTable_DriverRouteTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DriverCompDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DriverCompDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DriverCompTable"] != null)) {
                    base.Tables.Add(new DriverCompTableDataTable(ds.Tables["DriverCompTable"]));
                }
                if ((ds.Tables["DriverRouteTable"] != null)) {
                    base.Tables.Add(new DriverRouteTableDataTable(ds.Tables["DriverRouteTable"]));
                }
                if ((ds.Tables["RoadshowRouteTable"] != null)) {
                    base.Tables.Add(new RoadshowRouteTableDataTable(ds.Tables["RoadshowRouteTable"]));
                }
                if ((ds.Tables["AdjustmentTypeTable"] != null)) {
                    base.Tables.Add(new AdjustmentTypeTableDataTable(ds.Tables["AdjustmentTypeTable"]));
                }
                if ((ds.Tables["DriverEquipmentTable"] != null)) {
                    base.Tables.Add(new DriverEquipmentTableDataTable(ds.Tables["DriverEquipmentTable"]));
                }
                if ((ds.Tables["TerminalConfigurationTable"] != null)) {
                    base.Tables.Add(new TerminalConfigurationTableDataTable(ds.Tables["TerminalConfigurationTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverCompTableDataTable DriverCompTable {
            get {
                return this.tableDriverCompTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverRouteTableDataTable DriverRouteTable {
            get {
                return this.tableDriverRouteTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RoadshowRouteTableDataTable RoadshowRouteTable {
            get {
                return this.tableRoadshowRouteTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdjustmentTypeTableDataTable AdjustmentTypeTable {
            get {
                return this.tableAdjustmentTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverEquipmentTableDataTable DriverEquipmentTable {
            get {
                return this.tableDriverEquipmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalConfigurationTableDataTable TerminalConfigurationTable {
            get {
                return this.tableTerminalConfigurationTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DriverCompDS cln = ((DriverCompDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DriverCompTable"] != null)) {
                    base.Tables.Add(new DriverCompTableDataTable(ds.Tables["DriverCompTable"]));
                }
                if ((ds.Tables["DriverRouteTable"] != null)) {
                    base.Tables.Add(new DriverRouteTableDataTable(ds.Tables["DriverRouteTable"]));
                }
                if ((ds.Tables["RoadshowRouteTable"] != null)) {
                    base.Tables.Add(new RoadshowRouteTableDataTable(ds.Tables["RoadshowRouteTable"]));
                }
                if ((ds.Tables["AdjustmentTypeTable"] != null)) {
                    base.Tables.Add(new AdjustmentTypeTableDataTable(ds.Tables["AdjustmentTypeTable"]));
                }
                if ((ds.Tables["DriverEquipmentTable"] != null)) {
                    base.Tables.Add(new DriverEquipmentTableDataTable(ds.Tables["DriverEquipmentTable"]));
                }
                if ((ds.Tables["TerminalConfigurationTable"] != null)) {
                    base.Tables.Add(new TerminalConfigurationTableDataTable(ds.Tables["TerminalConfigurationTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDriverCompTable = ((DriverCompTableDataTable)(base.Tables["DriverCompTable"]));
            if ((initTable == true)) {
                if ((this.tableDriverCompTable != null)) {
                    this.tableDriverCompTable.InitVars();
                }
            }
            this.tableDriverRouteTable = ((DriverRouteTableDataTable)(base.Tables["DriverRouteTable"]));
            if ((initTable == true)) {
                if ((this.tableDriverRouteTable != null)) {
                    this.tableDriverRouteTable.InitVars();
                }
            }
            this.tableRoadshowRouteTable = ((RoadshowRouteTableDataTable)(base.Tables["RoadshowRouteTable"]));
            if ((initTable == true)) {
                if ((this.tableRoadshowRouteTable != null)) {
                    this.tableRoadshowRouteTable.InitVars();
                }
            }
            this.tableAdjustmentTypeTable = ((AdjustmentTypeTableDataTable)(base.Tables["AdjustmentTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableAdjustmentTypeTable != null)) {
                    this.tableAdjustmentTypeTable.InitVars();
                }
            }
            this.tableDriverEquipmentTable = ((DriverEquipmentTableDataTable)(base.Tables["DriverEquipmentTable"]));
            if ((initTable == true)) {
                if ((this.tableDriverEquipmentTable != null)) {
                    this.tableDriverEquipmentTable.InitVars();
                }
            }
            this.tableTerminalConfigurationTable = ((TerminalConfigurationTableDataTable)(base.Tables["TerminalConfigurationTable"]));
            if ((initTable == true)) {
                if ((this.tableTerminalConfigurationTable != null)) {
                    this.tableTerminalConfigurationTable.InitVars();
                }
            }
            this.relationDriverCompTable_DriverRouteTable = this.Relations["DriverCompTable_DriverRouteTable"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DriverCompDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DriverCompDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDriverCompTable = new DriverCompTableDataTable();
            base.Tables.Add(this.tableDriverCompTable);
            this.tableDriverRouteTable = new DriverRouteTableDataTable();
            base.Tables.Add(this.tableDriverRouteTable);
            this.tableRoadshowRouteTable = new RoadshowRouteTableDataTable();
            base.Tables.Add(this.tableRoadshowRouteTable);
            this.tableAdjustmentTypeTable = new AdjustmentTypeTableDataTable();
            base.Tables.Add(this.tableAdjustmentTypeTable);
            this.tableDriverEquipmentTable = new DriverEquipmentTableDataTable();
            base.Tables.Add(this.tableDriverEquipmentTable);
            this.tableTerminalConfigurationTable = new TerminalConfigurationTableDataTable();
            base.Tables.Add(this.tableTerminalConfigurationTable);
            this.relationDriverCompTable_DriverRouteTable = new global::System.Data.DataRelation("DriverCompTable_DriverRouteTable", new global::System.Data.DataColumn[] {
                        this.tableDriverCompTable.AgentNumberColumn,
                        this.tableDriverCompTable.OperatorColumn}, new global::System.Data.DataColumn[] {
                        this.tableDriverRouteTable.AgentNumberColumn,
                        this.tableDriverRouteTable.OperatorColumn}, false);
            this.relationDriverCompTable_DriverRouteTable.Nested = true;
            this.Relations.Add(this.relationDriverCompTable_DriverRouteTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDriverCompTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDriverRouteTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRoadshowRouteTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdjustmentTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDriverEquipmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerminalConfigurationTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DriverCompDS ds = new DriverCompDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DriverCompTableRowChangeEventHandler(object sender, DriverCompTableRowChangeEvent e);
        
        public delegate void DriverRouteTableRowChangeEventHandler(object sender, DriverRouteTableRowChangeEvent e);
        
        public delegate void RoadshowRouteTableRowChangeEventHandler(object sender, RoadshowRouteTableRowChangeEvent e);
        
        public delegate void AdjustmentTypeTableRowChangeEventHandler(object sender, AdjustmentTypeTableRowChangeEvent e);
        
        public delegate void DriverEquipmentTableRowChangeEventHandler(object sender, DriverEquipmentTableRowChangeEvent e);
        
        public delegate void TerminalConfigurationTableRowChangeEventHandler(object sender, TerminalConfigurationTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DriverCompTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelect;
            
            private global::System.Data.DataColumn columnIsNew;
            
            private global::System.Data.DataColumn columnIsCombo;
            
            private global::System.Data.DataColumn columnIsAdjust;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnFinanceVendorID;
            
            private global::System.Data.DataColumn columnFinanceVendor;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnEquipmentTypeID;
            
            private global::System.Data.DataColumn columnEquipmentType;
            
            private global::System.Data.DataColumn columnDayRate;
            
            private global::System.Data.DataColumn columnDayAmount;
            
            private global::System.Data.DataColumn columnMiles;
            
            private global::System.Data.DataColumn columnMilesBaseRate;
            
            private global::System.Data.DataColumn columnMilesRate;
            
            private global::System.Data.DataColumn columnMilesAmount;
            
            private global::System.Data.DataColumn columnTrip;
            
            private global::System.Data.DataColumn columnTripRate;
            
            private global::System.Data.DataColumn columnTripAmount;
            
            private global::System.Data.DataColumn columnStops;
            
            private global::System.Data.DataColumn columnStopsRate;
            
            private global::System.Data.DataColumn columnStopsAmount;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnCartonsRate;
            
            private global::System.Data.DataColumn columnCartonsAmount;
            
            private global::System.Data.DataColumn columnPallets;
            
            private global::System.Data.DataColumn columnPalletsRate;
            
            private global::System.Data.DataColumn columnPalletsAmount;
            
            private global::System.Data.DataColumn columnPickupCartons;
            
            private global::System.Data.DataColumn columnPickupCartonsRate;
            
            private global::System.Data.DataColumn columnPickupCartonsAmount;
            
            private global::System.Data.DataColumn columnMinimunAmount;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnFuelCost;
            
            private global::System.Data.DataColumn columnFSCGal;
            
            private global::System.Data.DataColumn columnFSCBaseRate;
            
            private global::System.Data.DataColumn columnFSC;
            
            private global::System.Data.DataColumn columnAdjustmentAmount1;
            
            private global::System.Data.DataColumn columnAdjustmentAmount2;
            
            private global::System.Data.DataColumn columnAdminCharge;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnFSCMiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableDataTable() {
                this.TableName = "DriverCompTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverCompTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DriverCompTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectColumn {
                get {
                    return this.columnSelect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNewColumn {
                get {
                    return this.columnIsNew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsComboColumn {
                get {
                    return this.columnIsCombo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAdjustColumn {
                get {
                    return this.columnIsAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinanceVendorIDColumn {
                get {
                    return this.columnFinanceVendorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinanceVendorColumn {
                get {
                    return this.columnFinanceVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentTypeIDColumn {
                get {
                    return this.columnEquipmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentTypeColumn {
                get {
                    return this.columnEquipmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayRateColumn {
                get {
                    return this.columnDayRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayAmountColumn {
                get {
                    return this.columnDayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesColumn {
                get {
                    return this.columnMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesBaseRateColumn {
                get {
                    return this.columnMilesBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesRateColumn {
                get {
                    return this.columnMilesRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesAmountColumn {
                get {
                    return this.columnMilesAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripColumn {
                get {
                    return this.columnTrip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripRateColumn {
                get {
                    return this.columnTripRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripAmountColumn {
                get {
                    return this.columnTripAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsColumn {
                get {
                    return this.columnStops;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsRateColumn {
                get {
                    return this.columnStopsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsAmountColumn {
                get {
                    return this.columnStopsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsRateColumn {
                get {
                    return this.columnCartonsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsAmountColumn {
                get {
                    return this.columnCartonsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsRateColumn {
                get {
                    return this.columnPalletsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsAmountColumn {
                get {
                    return this.columnPalletsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsColumn {
                get {
                    return this.columnPickupCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsRateColumn {
                get {
                    return this.columnPickupCartonsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsAmountColumn {
                get {
                    return this.columnPickupCartonsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimunAmountColumn {
                get {
                    return this.columnMinimunAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelCostColumn {
                get {
                    return this.columnFuelCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCGalColumn {
                get {
                    return this.columnFSCGal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCBaseRateColumn {
                get {
                    return this.columnFSCBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCColumn {
                get {
                    return this.columnFSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount1Column {
                get {
                    return this.columnAdjustmentAmount1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount2Column {
                get {
                    return this.columnAdjustmentAmount2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminChargeColumn {
                get {
                    return this.columnAdminCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCMilesColumn {
                get {
                    return this.columnFSCMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow this[int index] {
                get {
                    return ((DriverCompTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverCompTableRowChangeEventHandler DriverCompTableRowChanging;
            
            public event DriverCompTableRowChangeEventHandler DriverCompTableRowChanged;
            
            public event DriverCompTableRowChangeEventHandler DriverCompTableRowDeleting;
            
            public event DriverCompTableRowChangeEventHandler DriverCompTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDriverCompTableRow(DriverCompTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow AddDriverCompTableRow(
                        bool Select, 
                        bool IsNew, 
                        bool IsCombo, 
                        bool IsAdjust, 
                        string AgentNumber, 
                        string FinanceVendorID, 
                        string FinanceVendor, 
                        string Operator, 
                        int EquipmentTypeID, 
                        string EquipmentType, 
                        decimal DayRate, 
                        decimal DayAmount, 
                        decimal Miles, 
                        decimal MilesBaseRate, 
                        decimal MilesRate, 
                        decimal MilesAmount, 
                        int Trip, 
                        decimal TripRate, 
                        decimal TripAmount, 
                        int Stops, 
                        decimal StopsRate, 
                        decimal StopsAmount, 
                        int Cartons, 
                        decimal CartonsRate, 
                        decimal CartonsAmount, 
                        int Pallets, 
                        decimal PalletsRate, 
                        decimal PalletsAmount, 
                        int PickupCartons, 
                        decimal PickupCartonsRate, 
                        decimal PickupCartonsAmount, 
                        decimal MinimunAmount, 
                        decimal Amount, 
                        decimal FuelCost, 
                        decimal FSCGal, 
                        decimal FSCBaseRate, 
                        decimal FSC, 
                        decimal AdjustmentAmount1, 
                        decimal AdjustmentAmount2, 
                        decimal AdminCharge, 
                        decimal TotalAmount, 
                        decimal FSCMiles) {
                DriverCompTableRow rowDriverCompTableRow = ((DriverCompTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Select,
                        IsNew,
                        IsCombo,
                        IsAdjust,
                        AgentNumber,
                        FinanceVendorID,
                        FinanceVendor,
                        Operator,
                        EquipmentTypeID,
                        EquipmentType,
                        DayRate,
                        DayAmount,
                        Miles,
                        MilesBaseRate,
                        MilesRate,
                        MilesAmount,
                        Trip,
                        TripRate,
                        TripAmount,
                        Stops,
                        StopsRate,
                        StopsAmount,
                        Cartons,
                        CartonsRate,
                        CartonsAmount,
                        Pallets,
                        PalletsRate,
                        PalletsAmount,
                        PickupCartons,
                        PickupCartonsRate,
                        PickupCartonsAmount,
                        MinimunAmount,
                        Amount,
                        FuelCost,
                        FSCGal,
                        FSCBaseRate,
                        FSC,
                        AdjustmentAmount1,
                        AdjustmentAmount2,
                        AdminCharge,
                        TotalAmount,
                        FSCMiles};
                rowDriverCompTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDriverCompTableRow);
                return rowDriverCompTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow FindByAgentNumberOperator(string AgentNumber, string Operator) {
                return ((DriverCompTableRow)(this.Rows.Find(new object[] {
                            AgentNumber,
                            Operator})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DriverCompTableDataTable cln = ((DriverCompTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DriverCompTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelect = base.Columns["Select"];
                this.columnIsNew = base.Columns["IsNew"];
                this.columnIsCombo = base.Columns["IsCombo"];
                this.columnIsAdjust = base.Columns["IsAdjust"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnFinanceVendorID = base.Columns["FinanceVendorID"];
                this.columnFinanceVendor = base.Columns["FinanceVendor"];
                this.columnOperator = base.Columns["Operator"];
                this.columnEquipmentTypeID = base.Columns["EquipmentTypeID"];
                this.columnEquipmentType = base.Columns["EquipmentType"];
                this.columnDayRate = base.Columns["DayRate"];
                this.columnDayAmount = base.Columns["DayAmount"];
                this.columnMiles = base.Columns["Miles"];
                this.columnMilesBaseRate = base.Columns["MilesBaseRate"];
                this.columnMilesRate = base.Columns["MilesRate"];
                this.columnMilesAmount = base.Columns["MilesAmount"];
                this.columnTrip = base.Columns["Trip"];
                this.columnTripRate = base.Columns["TripRate"];
                this.columnTripAmount = base.Columns["TripAmount"];
                this.columnStops = base.Columns["Stops"];
                this.columnStopsRate = base.Columns["StopsRate"];
                this.columnStopsAmount = base.Columns["StopsAmount"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnCartonsRate = base.Columns["CartonsRate"];
                this.columnCartonsAmount = base.Columns["CartonsAmount"];
                this.columnPallets = base.Columns["Pallets"];
                this.columnPalletsRate = base.Columns["PalletsRate"];
                this.columnPalletsAmount = base.Columns["PalletsAmount"];
                this.columnPickupCartons = base.Columns["PickupCartons"];
                this.columnPickupCartonsRate = base.Columns["PickupCartonsRate"];
                this.columnPickupCartonsAmount = base.Columns["PickupCartonsAmount"];
                this.columnMinimunAmount = base.Columns["MinimunAmount"];
                this.columnAmount = base.Columns["Amount"];
                this.columnFuelCost = base.Columns["FuelCost"];
                this.columnFSCGal = base.Columns["FSCGal"];
                this.columnFSCBaseRate = base.Columns["FSCBaseRate"];
                this.columnFSC = base.Columns["FSC"];
                this.columnAdjustmentAmount1 = base.Columns["AdjustmentAmount1"];
                this.columnAdjustmentAmount2 = base.Columns["AdjustmentAmount2"];
                this.columnAdminCharge = base.Columns["AdminCharge"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnFSCMiles = base.Columns["FSCMiles"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelect = new global::System.Data.DataColumn("Select", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelect);
                this.columnIsNew = new global::System.Data.DataColumn("IsNew", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNew);
                this.columnIsCombo = new global::System.Data.DataColumn("IsCombo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombo);
                this.columnIsAdjust = new global::System.Data.DataColumn("IsAdjust", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAdjust);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnFinanceVendorID = new global::System.Data.DataColumn("FinanceVendorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinanceVendorID);
                this.columnFinanceVendor = new global::System.Data.DataColumn("FinanceVendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinanceVendor);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnEquipmentTypeID = new global::System.Data.DataColumn("EquipmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentTypeID);
                this.columnEquipmentType = new global::System.Data.DataColumn("EquipmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentType);
                this.columnDayRate = new global::System.Data.DataColumn("DayRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayRate);
                this.columnDayAmount = new global::System.Data.DataColumn("DayAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayAmount);
                this.columnMiles = new global::System.Data.DataColumn("Miles", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiles);
                this.columnMilesBaseRate = new global::System.Data.DataColumn("MilesBaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesBaseRate);
                this.columnMilesRate = new global::System.Data.DataColumn("MilesRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesRate);
                this.columnMilesAmount = new global::System.Data.DataColumn("MilesAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesAmount);
                this.columnTrip = new global::System.Data.DataColumn("Trip", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrip);
                this.columnTripRate = new global::System.Data.DataColumn("TripRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripRate);
                this.columnTripAmount = new global::System.Data.DataColumn("TripAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripAmount);
                this.columnStops = new global::System.Data.DataColumn("Stops", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStops);
                this.columnStopsRate = new global::System.Data.DataColumn("StopsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopsRate);
                this.columnStopsAmount = new global::System.Data.DataColumn("StopsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopsAmount);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnCartonsRate = new global::System.Data.DataColumn("CartonsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsRate);
                this.columnCartonsAmount = new global::System.Data.DataColumn("CartonsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsAmount);
                this.columnPallets = new global::System.Data.DataColumn("Pallets", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPallets);
                this.columnPalletsRate = new global::System.Data.DataColumn("PalletsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletsRate);
                this.columnPalletsAmount = new global::System.Data.DataColumn("PalletsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletsAmount);
                this.columnPickupCartons = new global::System.Data.DataColumn("PickupCartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartons);
                this.columnPickupCartonsRate = new global::System.Data.DataColumn("PickupCartonsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonsRate);
                this.columnPickupCartonsAmount = new global::System.Data.DataColumn("PickupCartonsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonsAmount);
                this.columnMinimunAmount = new global::System.Data.DataColumn("MinimunAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimunAmount);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnFuelCost = new global::System.Data.DataColumn("FuelCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelCost);
                this.columnFSCGal = new global::System.Data.DataColumn("FSCGal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCGal);
                this.columnFSCBaseRate = new global::System.Data.DataColumn("FSCBaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCBaseRate);
                this.columnFSC = new global::System.Data.DataColumn("FSC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSC);
                this.columnAdjustmentAmount1 = new global::System.Data.DataColumn("AdjustmentAmount1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount1);
                this.columnAdjustmentAmount2 = new global::System.Data.DataColumn("AdjustmentAmount2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount2);
                this.columnAdminCharge = new global::System.Data.DataColumn("AdminCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminCharge);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnFSCMiles = new global::System.Data.DataColumn("FSCMiles", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCMiles);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DriverCompTableKey1", new global::System.Data.DataColumn[] {
                                this.columnAgentNumber,
                                this.columnOperator}, true));
                this.columnAgentNumber.AllowDBNull = false;
                this.columnFinanceVendorID.AllowDBNull = false;
                this.columnOperator.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow NewDriverCompTableRow() {
                return ((DriverCompTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DriverCompTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DriverCompTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverCompTableRowChanged != null)) {
                    this.DriverCompTableRowChanged(this, new DriverCompTableRowChangeEvent(((DriverCompTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverCompTableRowChanging != null)) {
                    this.DriverCompTableRowChanging(this, new DriverCompTableRowChangeEvent(((DriverCompTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverCompTableRowDeleted != null)) {
                    this.DriverCompTableRowDeleted(this, new DriverCompTableRowChangeEvent(((DriverCompTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverCompTableRowDeleting != null)) {
                    this.DriverCompTableRowDeleting(this, new DriverCompTableRowChangeEvent(((DriverCompTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDriverCompTableRow(DriverCompTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DriverCompTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DriverRouteTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIsNew;
            
            private global::System.Data.DataColumn columnIsCombo;
            
            private global::System.Data.DataColumn columnIsAdjust;
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnFinanceVendorID;
            
            private global::System.Data.DataColumn columnRouteDate;
            
            private global::System.Data.DataColumn columnRouteName;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnPayee;
            
            private global::System.Data.DataColumn columnEquipmentTypeID;
            
            private global::System.Data.DataColumn columnRateTypeID;
            
            private global::System.Data.DataColumn columnDayRate;
            
            private global::System.Data.DataColumn columnDayAmount;
            
            private global::System.Data.DataColumn columnMiles;
            
            private global::System.Data.DataColumn columnMilesBaseRate;
            
            private global::System.Data.DataColumn columnMilesRate;
            
            private global::System.Data.DataColumn columnMilesAmount;
            
            private global::System.Data.DataColumn columnTrip;
            
            private global::System.Data.DataColumn columnTripRate;
            
            private global::System.Data.DataColumn columnTripAmount;
            
            private global::System.Data.DataColumn columnStops;
            
            private global::System.Data.DataColumn columnStopsRate;
            
            private global::System.Data.DataColumn columnStopsAmount;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnCartonsRate;
            
            private global::System.Data.DataColumn columnCartonsAmount;
            
            private global::System.Data.DataColumn columnPallets;
            
            private global::System.Data.DataColumn columnPalletsRate;
            
            private global::System.Data.DataColumn columnPalletsAmount;
            
            private global::System.Data.DataColumn columnPickupCartons;
            
            private global::System.Data.DataColumn columnPickupCartonsRate;
            
            private global::System.Data.DataColumn columnPickupCartonsAmount;
            
            private global::System.Data.DataColumn columnMinimunAmount;
            
            private global::System.Data.DataColumn columnFuelCost;
            
            private global::System.Data.DataColumn columnFSCGal;
            
            private global::System.Data.DataColumn columnFSCBaseRate;
            
            private global::System.Data.DataColumn columnFSC;
            
            private global::System.Data.DataColumn columnAdjustmentAmount1;
            
            private global::System.Data.DataColumn columnAdjustmentAmount1TypeID;
            
            private global::System.Data.DataColumn columnAdjustmentAmount2;
            
            private global::System.Data.DataColumn columnAdjustmentAmount2TypeID;
            
            private global::System.Data.DataColumn columnAdminCharge;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnImported;
            
            private global::System.Data.DataColumn columnExported;
            
            private global::System.Data.DataColumn columnArgixRtType;
            
            private global::System.Data.DataColumn columnLastUpdated;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnFSCMiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableDataTable() {
                this.TableName = "DriverRouteTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverRouteTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DriverRouteTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNewColumn {
                get {
                    return this.columnIsNew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsComboColumn {
                get {
                    return this.columnIsCombo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAdjustColumn {
                get {
                    return this.columnIsAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinanceVendorIDColumn {
                get {
                    return this.columnFinanceVendorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteDateColumn {
                get {
                    return this.columnRouteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteNameColumn {
                get {
                    return this.columnRouteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayeeColumn {
                get {
                    return this.columnPayee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentTypeIDColumn {
                get {
                    return this.columnEquipmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeIDColumn {
                get {
                    return this.columnRateTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayRateColumn {
                get {
                    return this.columnDayRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayAmountColumn {
                get {
                    return this.columnDayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesColumn {
                get {
                    return this.columnMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesBaseRateColumn {
                get {
                    return this.columnMilesBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesRateColumn {
                get {
                    return this.columnMilesRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MilesAmountColumn {
                get {
                    return this.columnMilesAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripColumn {
                get {
                    return this.columnTrip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripRateColumn {
                get {
                    return this.columnTripRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripAmountColumn {
                get {
                    return this.columnTripAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsColumn {
                get {
                    return this.columnStops;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsRateColumn {
                get {
                    return this.columnStopsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopsAmountColumn {
                get {
                    return this.columnStopsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsRateColumn {
                get {
                    return this.columnCartonsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsAmountColumn {
                get {
                    return this.columnCartonsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsColumn {
                get {
                    return this.columnPallets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsRateColumn {
                get {
                    return this.columnPalletsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletsAmountColumn {
                get {
                    return this.columnPalletsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsColumn {
                get {
                    return this.columnPickupCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsRateColumn {
                get {
                    return this.columnPickupCartonsRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickupCartonsAmountColumn {
                get {
                    return this.columnPickupCartonsAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimunAmountColumn {
                get {
                    return this.columnMinimunAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelCostColumn {
                get {
                    return this.columnFuelCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCGalColumn {
                get {
                    return this.columnFSCGal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCBaseRateColumn {
                get {
                    return this.columnFSCBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCColumn {
                get {
                    return this.columnFSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount1Column {
                get {
                    return this.columnAdjustmentAmount1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount1TypeIDColumn {
                get {
                    return this.columnAdjustmentAmount1TypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount2Column {
                get {
                    return this.columnAdjustmentAmount2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentAmount2TypeIDColumn {
                get {
                    return this.columnAdjustmentAmount2TypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminChargeColumn {
                get {
                    return this.columnAdminCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedColumn {
                get {
                    return this.columnImported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExportedColumn {
                get {
                    return this.columnExported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArgixRtTypeColumn {
                get {
                    return this.columnArgixRtType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedColumn {
                get {
                    return this.columnLastUpdated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSCMilesColumn {
                get {
                    return this.columnFSCMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRow this[int index] {
                get {
                    return ((DriverRouteTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverRouteTableRowChangeEventHandler DriverRouteTableRowChanging;
            
            public event DriverRouteTableRowChangeEventHandler DriverRouteTableRowChanged;
            
            public event DriverRouteTableRowChangeEventHandler DriverRouteTableRowDeleting;
            
            public event DriverRouteTableRowChangeEventHandler DriverRouteTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDriverRouteTableRow(DriverRouteTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRow AddDriverRouteTableRow(
                        long ID, 
                        bool IsNew, 
                        bool IsCombo, 
                        bool IsAdjust, 
                        string AgentNumber, 
                        string FinanceVendorID, 
                        System.DateTime RouteDate, 
                        string RouteName, 
                        string Operator, 
                        string Payee, 
                        int EquipmentTypeID, 
                        int RateTypeID, 
                        decimal DayRate, 
                        decimal DayAmount, 
                        decimal Miles, 
                        decimal MilesBaseRate, 
                        decimal MilesRate, 
                        decimal MilesAmount, 
                        int Trip, 
                        decimal TripRate, 
                        decimal TripAmount, 
                        int Stops, 
                        decimal StopsRate, 
                        decimal StopsAmount, 
                        int Cartons, 
                        decimal CartonsRate, 
                        decimal CartonsAmount, 
                        int Pallets, 
                        decimal PalletsRate, 
                        decimal PalletsAmount, 
                        int PickupCartons, 
                        decimal PickupCartonsRate, 
                        decimal PickupCartonsAmount, 
                        decimal MinimunAmount, 
                        decimal FuelCost, 
                        decimal FSCGal, 
                        decimal FSCBaseRate, 
                        decimal FSC, 
                        decimal AdjustmentAmount1, 
                        string AdjustmentAmount1TypeID, 
                        decimal AdjustmentAmount2, 
                        string AdjustmentAmount2TypeID, 
                        decimal AdminCharge, 
                        decimal TotalAmount, 
                        System.DateTime Imported, 
                        System.DateTime Exported, 
                        string ArgixRtType, 
                        System.DateTime LastUpdated, 
                        string UserID, 
                        decimal FSCMiles) {
                DriverRouteTableRow rowDriverRouteTableRow = ((DriverRouteTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        IsNew,
                        IsCombo,
                        IsAdjust,
                        AgentNumber,
                        FinanceVendorID,
                        RouteDate,
                        RouteName,
                        Operator,
                        Payee,
                        EquipmentTypeID,
                        RateTypeID,
                        DayRate,
                        DayAmount,
                        Miles,
                        MilesBaseRate,
                        MilesRate,
                        MilesAmount,
                        Trip,
                        TripRate,
                        TripAmount,
                        Stops,
                        StopsRate,
                        StopsAmount,
                        Cartons,
                        CartonsRate,
                        CartonsAmount,
                        Pallets,
                        PalletsRate,
                        PalletsAmount,
                        PickupCartons,
                        PickupCartonsRate,
                        PickupCartonsAmount,
                        MinimunAmount,
                        FuelCost,
                        FSCGal,
                        FSCBaseRate,
                        FSC,
                        AdjustmentAmount1,
                        AdjustmentAmount1TypeID,
                        AdjustmentAmount2,
                        AdjustmentAmount2TypeID,
                        AdminCharge,
                        TotalAmount,
                        Imported,
                        Exported,
                        ArgixRtType,
                        LastUpdated,
                        UserID,
                        FSCMiles};
                rowDriverRouteTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDriverRouteTableRow);
                return rowDriverRouteTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DriverRouteTableDataTable cln = ((DriverRouteTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DriverRouteTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIsNew = base.Columns["IsNew"];
                this.columnIsCombo = base.Columns["IsCombo"];
                this.columnIsAdjust = base.Columns["IsAdjust"];
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnFinanceVendorID = base.Columns["FinanceVendorID"];
                this.columnRouteDate = base.Columns["RouteDate"];
                this.columnRouteName = base.Columns["RouteName"];
                this.columnOperator = base.Columns["Operator"];
                this.columnPayee = base.Columns["Payee"];
                this.columnEquipmentTypeID = base.Columns["EquipmentTypeID"];
                this.columnRateTypeID = base.Columns["RateTypeID"];
                this.columnDayRate = base.Columns["DayRate"];
                this.columnDayAmount = base.Columns["DayAmount"];
                this.columnMiles = base.Columns["Miles"];
                this.columnMilesBaseRate = base.Columns["MilesBaseRate"];
                this.columnMilesRate = base.Columns["MilesRate"];
                this.columnMilesAmount = base.Columns["MilesAmount"];
                this.columnTrip = base.Columns["Trip"];
                this.columnTripRate = base.Columns["TripRate"];
                this.columnTripAmount = base.Columns["TripAmount"];
                this.columnStops = base.Columns["Stops"];
                this.columnStopsRate = base.Columns["StopsRate"];
                this.columnStopsAmount = base.Columns["StopsAmount"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnCartonsRate = base.Columns["CartonsRate"];
                this.columnCartonsAmount = base.Columns["CartonsAmount"];
                this.columnPallets = base.Columns["Pallets"];
                this.columnPalletsRate = base.Columns["PalletsRate"];
                this.columnPalletsAmount = base.Columns["PalletsAmount"];
                this.columnPickupCartons = base.Columns["PickupCartons"];
                this.columnPickupCartonsRate = base.Columns["PickupCartonsRate"];
                this.columnPickupCartonsAmount = base.Columns["PickupCartonsAmount"];
                this.columnMinimunAmount = base.Columns["MinimunAmount"];
                this.columnFuelCost = base.Columns["FuelCost"];
                this.columnFSCGal = base.Columns["FSCGal"];
                this.columnFSCBaseRate = base.Columns["FSCBaseRate"];
                this.columnFSC = base.Columns["FSC"];
                this.columnAdjustmentAmount1 = base.Columns["AdjustmentAmount1"];
                this.columnAdjustmentAmount1TypeID = base.Columns["AdjustmentAmount1TypeID"];
                this.columnAdjustmentAmount2 = base.Columns["AdjustmentAmount2"];
                this.columnAdjustmentAmount2TypeID = base.Columns["AdjustmentAmount2TypeID"];
                this.columnAdminCharge = base.Columns["AdminCharge"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnImported = base.Columns["Imported"];
                this.columnExported = base.Columns["Exported"];
                this.columnArgixRtType = base.Columns["ArgixRtType"];
                this.columnLastUpdated = base.Columns["LastUpdated"];
                this.columnUserID = base.Columns["UserID"];
                this.columnFSCMiles = base.Columns["FSCMiles"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIsNew = new global::System.Data.DataColumn("IsNew", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNew);
                this.columnIsCombo = new global::System.Data.DataColumn("IsCombo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombo);
                this.columnIsAdjust = new global::System.Data.DataColumn("IsAdjust", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAdjust);
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnFinanceVendorID = new global::System.Data.DataColumn("FinanceVendorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinanceVendorID);
                this.columnRouteDate = new global::System.Data.DataColumn("RouteDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteDate);
                this.columnRouteName = new global::System.Data.DataColumn("RouteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRouteName);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnPayee = new global::System.Data.DataColumn("Payee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayee);
                this.columnEquipmentTypeID = new global::System.Data.DataColumn("EquipmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentTypeID);
                this.columnRateTypeID = new global::System.Data.DataColumn("RateTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateTypeID);
                this.columnDayRate = new global::System.Data.DataColumn("DayRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayRate);
                this.columnDayAmount = new global::System.Data.DataColumn("DayAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayAmount);
                this.columnMiles = new global::System.Data.DataColumn("Miles", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiles);
                this.columnMilesBaseRate = new global::System.Data.DataColumn("MilesBaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesBaseRate);
                this.columnMilesRate = new global::System.Data.DataColumn("MilesRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesRate);
                this.columnMilesAmount = new global::System.Data.DataColumn("MilesAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMilesAmount);
                this.columnTrip = new global::System.Data.DataColumn("Trip", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrip);
                this.columnTripRate = new global::System.Data.DataColumn("TripRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripRate);
                this.columnTripAmount = new global::System.Data.DataColumn("TripAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripAmount);
                this.columnStops = new global::System.Data.DataColumn("Stops", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStops);
                this.columnStopsRate = new global::System.Data.DataColumn("StopsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopsRate);
                this.columnStopsAmount = new global::System.Data.DataColumn("StopsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopsAmount);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnCartonsRate = new global::System.Data.DataColumn("CartonsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsRate);
                this.columnCartonsAmount = new global::System.Data.DataColumn("CartonsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonsAmount);
                this.columnPallets = new global::System.Data.DataColumn("Pallets", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPallets);
                this.columnPalletsRate = new global::System.Data.DataColumn("PalletsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletsRate);
                this.columnPalletsAmount = new global::System.Data.DataColumn("PalletsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletsAmount);
                this.columnPickupCartons = new global::System.Data.DataColumn("PickupCartons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartons);
                this.columnPickupCartonsRate = new global::System.Data.DataColumn("PickupCartonsRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonsRate);
                this.columnPickupCartonsAmount = new global::System.Data.DataColumn("PickupCartonsAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickupCartonsAmount);
                this.columnMinimunAmount = new global::System.Data.DataColumn("MinimunAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimunAmount);
                this.columnFuelCost = new global::System.Data.DataColumn("FuelCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelCost);
                this.columnFSCGal = new global::System.Data.DataColumn("FSCGal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCGal);
                this.columnFSCBaseRate = new global::System.Data.DataColumn("FSCBaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCBaseRate);
                this.columnFSC = new global::System.Data.DataColumn("FSC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSC);
                this.columnAdjustmentAmount1 = new global::System.Data.DataColumn("AdjustmentAmount1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount1);
                this.columnAdjustmentAmount1TypeID = new global::System.Data.DataColumn("AdjustmentAmount1TypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount1TypeID);
                this.columnAdjustmentAmount2 = new global::System.Data.DataColumn("AdjustmentAmount2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount2);
                this.columnAdjustmentAmount2TypeID = new global::System.Data.DataColumn("AdjustmentAmount2TypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentAmount2TypeID);
                this.columnAdminCharge = new global::System.Data.DataColumn("AdminCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminCharge);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnImported = new global::System.Data.DataColumn("Imported", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImported);
                this.columnExported = new global::System.Data.DataColumn("Exported", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExported);
                this.columnArgixRtType = new global::System.Data.DataColumn("ArgixRtType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArgixRtType);
                this.columnLastUpdated = new global::System.Data.DataColumn("LastUpdated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdated);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnFSCMiles = new global::System.Data.DataColumn("FSCMiles", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSCMiles);
                this.columnArgixRtType.MaxLength = 50;
                this.columnUserID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRow NewDriverRouteTableRow() {
                return ((DriverRouteTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DriverRouteTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DriverRouteTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverRouteTableRowChanged != null)) {
                    this.DriverRouteTableRowChanged(this, new DriverRouteTableRowChangeEvent(((DriverRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverRouteTableRowChanging != null)) {
                    this.DriverRouteTableRowChanging(this, new DriverRouteTableRowChangeEvent(((DriverRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverRouteTableRowDeleted != null)) {
                    this.DriverRouteTableRowDeleted(this, new DriverRouteTableRowChangeEvent(((DriverRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverRouteTableRowDeleting != null)) {
                    this.DriverRouteTableRowDeleting(this, new DriverRouteTableRowChangeEvent(((DriverRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDriverRouteTableRow(DriverRouteTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DriverRouteTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RoadshowRouteTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNew;
            
            private global::System.Data.DataColumn columnRt_Date;
            
            private global::System.Data.DataColumn columnRt_Name;
            
            private global::System.Data.DataColumn columnOperator;
            
            private global::System.Data.DataColumn columnVEHICLE_TYPE1;
            
            private global::System.Data.DataColumn columnPayee;
            
            private global::System.Data.DataColumn columnFinanceVendID;
            
            private global::System.Data.DataColumn columnTtlMiles;
            
            private global::System.Data.DataColumn columnMultiTrp;
            
            private global::System.Data.DataColumn columnUniqueStops;
            
            private global::System.Data.DataColumn columnDelCtns;
            
            private global::System.Data.DataColumn columnRtnCtn;
            
            private global::System.Data.DataColumn columnDelPltsorRcks;
            
            private global::System.Data.DataColumn columnDepot;
            
            private global::System.Data.DataColumn columnDepotNumber;
            
            private global::System.Data.DataColumn columnEquipmentID;
            
            private global::System.Data.DataColumn columnArgixRtType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableDataTable() {
                this.TableName = "RoadshowRouteTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RoadshowRouteTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RoadshowRouteTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewColumn {
                get {
                    return this.columnNew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rt_DateColumn {
                get {
                    return this.columnRt_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rt_NameColumn {
                get {
                    return this.columnRt_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorColumn {
                get {
                    return this.columnOperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VEHICLE_TYPE1Column {
                get {
                    return this.columnVEHICLE_TYPE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayeeColumn {
                get {
                    return this.columnPayee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinanceVendIDColumn {
                get {
                    return this.columnFinanceVendID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TtlMilesColumn {
                get {
                    return this.columnTtlMiles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiTrpColumn {
                get {
                    return this.columnMultiTrp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueStopsColumn {
                get {
                    return this.columnUniqueStops;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelCtnsColumn {
                get {
                    return this.columnDelCtns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RtnCtnColumn {
                get {
                    return this.columnRtnCtn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelPltsorRcksColumn {
                get {
                    return this.columnDelPltsorRcks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepotColumn {
                get {
                    return this.columnDepot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepotNumberColumn {
                get {
                    return this.columnDepotNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentIDColumn {
                get {
                    return this.columnEquipmentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArgixRtTypeColumn {
                get {
                    return this.columnArgixRtType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRow this[int index] {
                get {
                    return ((RoadshowRouteTableRow)(this.Rows[index]));
                }
            }
            
            public event RoadshowRouteTableRowChangeEventHandler RoadshowRouteTableRowChanging;
            
            public event RoadshowRouteTableRowChangeEventHandler RoadshowRouteTableRowChanged;
            
            public event RoadshowRouteTableRowChangeEventHandler RoadshowRouteTableRowDeleting;
            
            public event RoadshowRouteTableRowChangeEventHandler RoadshowRouteTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRoadshowRouteTableRow(RoadshowRouteTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRow AddRoadshowRouteTableRow(
                        bool New, 
                        System.DateTime Rt_Date, 
                        string Rt_Name, 
                        string Operator, 
                        string VEHICLE_TYPE1, 
                        string Payee, 
                        string FinanceVendID, 
                        decimal TtlMiles, 
                        int MultiTrp, 
                        int UniqueStops, 
                        float DelCtns, 
                        double RtnCtn, 
                        float DelPltsorRcks, 
                        string Depot, 
                        short DepotNumber, 
                        int EquipmentID, 
                        string ArgixRtType) {
                RoadshowRouteTableRow rowRoadshowRouteTableRow = ((RoadshowRouteTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        New,
                        Rt_Date,
                        Rt_Name,
                        Operator,
                        VEHICLE_TYPE1,
                        Payee,
                        FinanceVendID,
                        TtlMiles,
                        MultiTrp,
                        UniqueStops,
                        DelCtns,
                        RtnCtn,
                        DelPltsorRcks,
                        Depot,
                        DepotNumber,
                        EquipmentID,
                        ArgixRtType};
                rowRoadshowRouteTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRoadshowRouteTableRow);
                return rowRoadshowRouteTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRow FindByRt_DateRt_NameOperator(System.DateTime Rt_Date, string Rt_Name, string Operator) {
                return ((RoadshowRouteTableRow)(this.Rows.Find(new object[] {
                            Rt_Date,
                            Rt_Name,
                            Operator})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RoadshowRouteTableDataTable cln = ((RoadshowRouteTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RoadshowRouteTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNew = base.Columns["New"];
                this.columnRt_Date = base.Columns["Rt_Date"];
                this.columnRt_Name = base.Columns["Rt_Name"];
                this.columnOperator = base.Columns["Operator"];
                this.columnVEHICLE_TYPE1 = base.Columns["VEHICLE_TYPE1"];
                this.columnPayee = base.Columns["Payee"];
                this.columnFinanceVendID = base.Columns["FinanceVendID"];
                this.columnTtlMiles = base.Columns["TtlMiles"];
                this.columnMultiTrp = base.Columns["MultiTrp"];
                this.columnUniqueStops = base.Columns["UniqueStops"];
                this.columnDelCtns = base.Columns["DelCtns"];
                this.columnRtnCtn = base.Columns["RtnCtn"];
                this.columnDelPltsorRcks = base.Columns["DelPltsorRcks"];
                this.columnDepot = base.Columns["Depot"];
                this.columnDepotNumber = base.Columns["DepotNumber"];
                this.columnEquipmentID = base.Columns["EquipmentID"];
                this.columnArgixRtType = base.Columns["ArgixRtType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNew = new global::System.Data.DataColumn("New", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNew);
                this.columnRt_Date = new global::System.Data.DataColumn("Rt_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRt_Date);
                this.columnRt_Name = new global::System.Data.DataColumn("Rt_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRt_Name);
                this.columnOperator = new global::System.Data.DataColumn("Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperator);
                this.columnVEHICLE_TYPE1 = new global::System.Data.DataColumn("VEHICLE_TYPE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVEHICLE_TYPE1);
                this.columnPayee = new global::System.Data.DataColumn("Payee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayee);
                this.columnFinanceVendID = new global::System.Data.DataColumn("FinanceVendID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinanceVendID);
                this.columnTtlMiles = new global::System.Data.DataColumn("TtlMiles", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTtlMiles);
                this.columnMultiTrp = new global::System.Data.DataColumn("MultiTrp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiTrp);
                this.columnUniqueStops = new global::System.Data.DataColumn("UniqueStops", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueStops);
                this.columnDelCtns = new global::System.Data.DataColumn("DelCtns", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelCtns);
                this.columnRtnCtn = new global::System.Data.DataColumn("RtnCtn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRtnCtn);
                this.columnDelPltsorRcks = new global::System.Data.DataColumn("DelPltsorRcks", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelPltsorRcks);
                this.columnDepot = new global::System.Data.DataColumn("Depot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepot);
                this.columnDepotNumber = new global::System.Data.DataColumn("DepotNumber", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepotNumber);
                this.columnEquipmentID = new global::System.Data.DataColumn("EquipmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentID);
                this.columnArgixRtType = new global::System.Data.DataColumn("ArgixRtType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArgixRtType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRt_Date,
                                this.columnRt_Name,
                                this.columnOperator}, true));
                this.columnRt_Date.AllowDBNull = false;
                this.columnRt_Name.AllowDBNull = false;
                this.columnRt_Name.MaxLength = 8;
                this.columnOperator.AllowDBNull = false;
                this.columnOperator.MaxLength = 50;
                this.columnVEHICLE_TYPE1.MaxLength = 1;
                this.columnPayee.MaxLength = 255;
                this.columnFinanceVendID.MaxLength = 50;
                this.columnDepot.MaxLength = 50;
                this.columnEquipmentID.ReadOnly = true;
                this.columnArgixRtType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRow NewRoadshowRouteTableRow() {
                return ((RoadshowRouteTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RoadshowRouteTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RoadshowRouteTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RoadshowRouteTableRowChanged != null)) {
                    this.RoadshowRouteTableRowChanged(this, new RoadshowRouteTableRowChangeEvent(((RoadshowRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RoadshowRouteTableRowChanging != null)) {
                    this.RoadshowRouteTableRowChanging(this, new RoadshowRouteTableRowChangeEvent(((RoadshowRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RoadshowRouteTableRowDeleted != null)) {
                    this.RoadshowRouteTableRowDeleted(this, new RoadshowRouteTableRowChangeEvent(((RoadshowRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RoadshowRouteTableRowDeleting != null)) {
                    this.RoadshowRouteTableRowDeleting(this, new RoadshowRouteTableRowChangeEvent(((RoadshowRouteTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRoadshowRouteTableRow(RoadshowRouteTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RoadshowRouteTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdjustmentTypeTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableDataTable() {
                this.TableName = "AdjustmentTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdjustmentTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdjustmentTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableRow this[int index] {
                get {
                    return ((AdjustmentTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event AdjustmentTypeTableRowChangeEventHandler AdjustmentTypeTableRowChanging;
            
            public event AdjustmentTypeTableRowChangeEventHandler AdjustmentTypeTableRowChanged;
            
            public event AdjustmentTypeTableRowChangeEventHandler AdjustmentTypeTableRowDeleting;
            
            public event AdjustmentTypeTableRowChangeEventHandler AdjustmentTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdjustmentTypeTableRow(AdjustmentTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableRow AddAdjustmentTypeTableRow(string AdjustmentType) {
                AdjustmentTypeTableRow rowAdjustmentTypeTableRow = ((AdjustmentTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdjustmentType};
                rowAdjustmentTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdjustmentTypeTableRow);
                return rowAdjustmentTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdjustmentTypeTableDataTable cln = ((AdjustmentTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdjustmentTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjustmentType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableRow NewAdjustmentTypeTableRow() {
                return ((AdjustmentTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdjustmentTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdjustmentTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdjustmentTypeTableRowChanged != null)) {
                    this.AdjustmentTypeTableRowChanged(this, new AdjustmentTypeTableRowChangeEvent(((AdjustmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdjustmentTypeTableRowChanging != null)) {
                    this.AdjustmentTypeTableRowChanging(this, new AdjustmentTypeTableRowChangeEvent(((AdjustmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdjustmentTypeTableRowDeleted != null)) {
                    this.AdjustmentTypeTableRowDeleted(this, new AdjustmentTypeTableRowChangeEvent(((AdjustmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdjustmentTypeTableRowDeleting != null)) {
                    this.AdjustmentTypeTableRowDeleting(this, new AdjustmentTypeTableRowChangeEvent(((AdjustmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdjustmentTypeTableRow(AdjustmentTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdjustmentTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DriverEquipmentTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFinanceVendorID;
            
            private global::System.Data.DataColumn columnOperatorName;
            
            private global::System.Data.DataColumn columnEquipmentID;
            
            private global::System.Data.DataColumn columnEquipmentName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableDataTable() {
                this.TableName = "DriverEquipmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverEquipmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DriverEquipmentTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinanceVendorIDColumn {
                get {
                    return this.columnFinanceVendorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorNameColumn {
                get {
                    return this.columnOperatorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentIDColumn {
                get {
                    return this.columnEquipmentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentNameColumn {
                get {
                    return this.columnEquipmentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRow this[int index] {
                get {
                    return ((DriverEquipmentTableRow)(this.Rows[index]));
                }
            }
            
            public event DriverEquipmentTableRowChangeEventHandler DriverEquipmentTableRowChanging;
            
            public event DriverEquipmentTableRowChangeEventHandler DriverEquipmentTableRowChanged;
            
            public event DriverEquipmentTableRowChangeEventHandler DriverEquipmentTableRowDeleting;
            
            public event DriverEquipmentTableRowChangeEventHandler DriverEquipmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDriverEquipmentTableRow(DriverEquipmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRow AddDriverEquipmentTableRow(string FinanceVendorID, string OperatorName, int EquipmentID, string EquipmentName) {
                DriverEquipmentTableRow rowDriverEquipmentTableRow = ((DriverEquipmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FinanceVendorID,
                        OperatorName,
                        EquipmentID,
                        EquipmentName};
                rowDriverEquipmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDriverEquipmentTableRow);
                return rowDriverEquipmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRow FindByFinanceVendorIDOperatorName(string FinanceVendorID, string OperatorName) {
                return ((DriverEquipmentTableRow)(this.Rows.Find(new object[] {
                            FinanceVendorID,
                            OperatorName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DriverEquipmentTableDataTable cln = ((DriverEquipmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DriverEquipmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFinanceVendorID = base.Columns["FinanceVendorID"];
                this.columnOperatorName = base.Columns["OperatorName"];
                this.columnEquipmentID = base.Columns["EquipmentID"];
                this.columnEquipmentName = base.Columns["EquipmentName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFinanceVendorID = new global::System.Data.DataColumn("FinanceVendorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinanceVendorID);
                this.columnOperatorName = new global::System.Data.DataColumn("OperatorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorName);
                this.columnEquipmentID = new global::System.Data.DataColumn("EquipmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentID);
                this.columnEquipmentName = new global::System.Data.DataColumn("EquipmentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFinanceVendorID,
                                this.columnOperatorName}, true));
                this.columnFinanceVendorID.AllowDBNull = false;
                this.columnFinanceVendorID.MaxLength = 40;
                this.columnOperatorName.AllowDBNull = false;
                this.columnOperatorName.MaxLength = 50;
                this.columnEquipmentName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRow NewDriverEquipmentTableRow() {
                return ((DriverEquipmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DriverEquipmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DriverEquipmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverEquipmentTableRowChanged != null)) {
                    this.DriverEquipmentTableRowChanged(this, new DriverEquipmentTableRowChangeEvent(((DriverEquipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverEquipmentTableRowChanging != null)) {
                    this.DriverEquipmentTableRowChanging(this, new DriverEquipmentTableRowChangeEvent(((DriverEquipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverEquipmentTableRowDeleted != null)) {
                    this.DriverEquipmentTableRowDeleted(this, new DriverEquipmentTableRowChangeEvent(((DriverEquipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverEquipmentTableRowDeleting != null)) {
                    this.DriverEquipmentTableRowDeleting(this, new DriverEquipmentTableRowChangeEvent(((DriverEquipmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDriverEquipmentTableRow(DriverEquipmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DriverEquipmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TerminalConfigurationTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAgentNumber;
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnGLNumber;
            
            private global::System.Data.DataColumn columnAdminGLNumber;
            
            private global::System.Data.DataColumn columnAdminFee;
            
            private global::System.Data.DataColumn columnFSBase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableDataTable() {
                this.TableName = "TerminalConfigurationTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminalConfigurationTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TerminalConfigurationTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNumberColumn {
                get {
                    return this.columnAgentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GLNumberColumn {
                get {
                    return this.columnGLNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminGLNumberColumn {
                get {
                    return this.columnAdminGLNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminFeeColumn {
                get {
                    return this.columnAdminFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSBaseColumn {
                get {
                    return this.columnFSBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRow this[int index] {
                get {
                    return ((TerminalConfigurationTableRow)(this.Rows[index]));
                }
            }
            
            public event TerminalConfigurationTableRowChangeEventHandler TerminalConfigurationTableRowChanging;
            
            public event TerminalConfigurationTableRowChangeEventHandler TerminalConfigurationTableRowChanged;
            
            public event TerminalConfigurationTableRowChangeEventHandler TerminalConfigurationTableRowDeleting;
            
            public event TerminalConfigurationTableRowChangeEventHandler TerminalConfigurationTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerminalConfigurationTableRow(TerminalConfigurationTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRow AddTerminalConfigurationTableRow(string AgentNumber, string AgentName, string GLNumber, string AdminGLNumber, decimal AdminFee, decimal FSBase) {
                TerminalConfigurationTableRow rowTerminalConfigurationTableRow = ((TerminalConfigurationTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AgentNumber,
                        AgentName,
                        GLNumber,
                        AdminGLNumber,
                        AdminFee,
                        FSBase};
                rowTerminalConfigurationTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTerminalConfigurationTableRow);
                return rowTerminalConfigurationTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRow FindByAgentNumber(string AgentNumber) {
                return ((TerminalConfigurationTableRow)(this.Rows.Find(new object[] {
                            AgentNumber})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TerminalConfigurationTableDataTable cln = ((TerminalConfigurationTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TerminalConfigurationTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAgentNumber = base.Columns["AgentNumber"];
                this.columnAgentName = base.Columns["AgentName"];
                this.columnGLNumber = base.Columns["GLNumber"];
                this.columnAdminGLNumber = base.Columns["AdminGLNumber"];
                this.columnAdminFee = base.Columns["AdminFee"];
                this.columnFSBase = base.Columns["FSBase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAgentNumber = new global::System.Data.DataColumn("AgentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNumber);
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnGLNumber = new global::System.Data.DataColumn("GLNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLNumber);
                this.columnAdminGLNumber = new global::System.Data.DataColumn("AdminGLNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminGLNumber);
                this.columnAdminFee = new global::System.Data.DataColumn("AdminFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminFee);
                this.columnFSBase = new global::System.Data.DataColumn("FSBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSBase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAgentNumber}, true));
                this.columnAgentNumber.AllowDBNull = false;
                this.columnAgentNumber.Unique = true;
                this.columnAgentNumber.MaxLength = 4;
                this.columnAgentName.MaxLength = 40;
                this.columnGLNumber.MaxLength = 10;
                this.columnAdminGLNumber.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRow NewTerminalConfigurationTableRow() {
                return ((TerminalConfigurationTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TerminalConfigurationTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TerminalConfigurationTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalConfigurationTableRowChanged != null)) {
                    this.TerminalConfigurationTableRowChanged(this, new TerminalConfigurationTableRowChangeEvent(((TerminalConfigurationTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalConfigurationTableRowChanging != null)) {
                    this.TerminalConfigurationTableRowChanging(this, new TerminalConfigurationTableRowChangeEvent(((TerminalConfigurationTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalConfigurationTableRowDeleted != null)) {
                    this.TerminalConfigurationTableRowDeleted(this, new TerminalConfigurationTableRowChangeEvent(((TerminalConfigurationTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalConfigurationTableRowDeleting != null)) {
                    this.TerminalConfigurationTableRowDeleting(this, new TerminalConfigurationTableRowChangeEvent(((TerminalConfigurationTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerminalConfigurationTableRow(TerminalConfigurationTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverCompDS ds = new DriverCompDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TerminalConfigurationTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DriverCompTableRow : global::System.Data.DataRow {
            
            private DriverCompTableDataTable tableDriverCompTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverCompTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverCompTable = ((DriverCompTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Select {
                get {
                    try {
                        return ((bool)(this[this.tableDriverCompTable.SelectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Select\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.SelectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNew {
                get {
                    try {
                        return ((bool)(this[this.tableDriverCompTable.IsNewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNew\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.IsNewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombo {
                get {
                    try {
                        return ((bool)(this[this.tableDriverCompTable.IsComboColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombo\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.IsComboColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjust {
                get {
                    try {
                        return ((bool)(this[this.tableDriverCompTable.IsAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAdjust\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.IsAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableDriverCompTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableDriverCompTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinanceVendorID {
                get {
                    return ((string)(this[this.tableDriverCompTable.FinanceVendorIDColumn]));
                }
                set {
                    this[this.tableDriverCompTable.FinanceVendorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinanceVendor {
                get {
                    try {
                        return ((string)(this[this.tableDriverCompTable.FinanceVendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinanceVendor\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FinanceVendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    return ((string)(this[this.tableDriverCompTable.OperatorColumn]));
                }
                set {
                    this[this.tableDriverCompTable.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.EquipmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentTypeID\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.EquipmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentType {
                get {
                    try {
                        return ((string)(this[this.tableDriverCompTable.EquipmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentType\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.EquipmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.DayRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.DayRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.DayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.DayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Miles {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.MilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Miles\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.MilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesBaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.MilesBaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesBaseRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.MilesBaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.MilesRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.MilesRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.MilesAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.MilesAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Trip {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.TripColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trip\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.TripColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TripRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.TripRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.TripRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TripAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.TripAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.TripAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stops {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.StopsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stops\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.StopsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.StopsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopsRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.StopsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.StopsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopsAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.StopsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.CartonsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonsRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.CartonsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.CartonsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonsAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.CartonsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.PalletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pallets\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PalletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.PalletsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PalletsRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PalletsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.PalletsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PalletsAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PalletsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PickupCartons {
                get {
                    try {
                        return ((int)(this[this.tableDriverCompTable.PickupCartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartons\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PickupCartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.PickupCartonsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartonsRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PickupCartonsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.PickupCartonsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartonsAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.PickupCartonsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimunAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.MinimunAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimunAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.MinimunAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuelCost {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.FuelCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelCost\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FuelCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCGal {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.FSCGalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCGal\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FSCGalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCBaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.FSCBaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCBaseRate\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FSCBaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSC {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.FSCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSC\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustmentAmount1 {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.AdjustmentAmount1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount1\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.AdjustmentAmount1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustmentAmount2 {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.AdjustmentAmount2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount2\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.AdjustmentAmount2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdminCharge {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.AdminChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminCharge\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.AdminChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCMiles {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverCompTable.FSCMilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCMiles\' in table \'DriverCompTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverCompTable.FSCMilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectNull() {
                return this.IsNull(this.tableDriverCompTable.SelectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectNull() {
                this[this.tableDriverCompTable.SelectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNewNull() {
                return this.IsNull(this.tableDriverCompTable.IsNewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNewNull() {
                this[this.tableDriverCompTable.IsNewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsComboNull() {
                return this.IsNull(this.tableDriverCompTable.IsComboColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsComboNull() {
                this[this.tableDriverCompTable.IsComboColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAdjustNull() {
                return this.IsNull(this.tableDriverCompTable.IsAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAdjustNull() {
                this[this.tableDriverCompTable.IsAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinanceVendorNull() {
                return this.IsNull(this.tableDriverCompTable.FinanceVendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinanceVendorNull() {
                this[this.tableDriverCompTable.FinanceVendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentTypeIDNull() {
                return this.IsNull(this.tableDriverCompTable.EquipmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentTypeIDNull() {
                this[this.tableDriverCompTable.EquipmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentTypeNull() {
                return this.IsNull(this.tableDriverCompTable.EquipmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentTypeNull() {
                this[this.tableDriverCompTable.EquipmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayRateNull() {
                return this.IsNull(this.tableDriverCompTable.DayRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayRateNull() {
                this[this.tableDriverCompTable.DayRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayAmountNull() {
                return this.IsNull(this.tableDriverCompTable.DayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayAmountNull() {
                this[this.tableDriverCompTable.DayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesNull() {
                return this.IsNull(this.tableDriverCompTable.MilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesNull() {
                this[this.tableDriverCompTable.MilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesBaseRateNull() {
                return this.IsNull(this.tableDriverCompTable.MilesBaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesBaseRateNull() {
                this[this.tableDriverCompTable.MilesBaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesRateNull() {
                return this.IsNull(this.tableDriverCompTable.MilesRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesRateNull() {
                this[this.tableDriverCompTable.MilesRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesAmountNull() {
                return this.IsNull(this.tableDriverCompTable.MilesAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesAmountNull() {
                this[this.tableDriverCompTable.MilesAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNull() {
                return this.IsNull(this.tableDriverCompTable.TripColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNull() {
                this[this.tableDriverCompTable.TripColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripRateNull() {
                return this.IsNull(this.tableDriverCompTable.TripRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripRateNull() {
                this[this.tableDriverCompTable.TripRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripAmountNull() {
                return this.IsNull(this.tableDriverCompTable.TripAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripAmountNull() {
                this[this.tableDriverCompTable.TripAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsNull() {
                return this.IsNull(this.tableDriverCompTable.StopsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsNull() {
                this[this.tableDriverCompTable.StopsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsRateNull() {
                return this.IsNull(this.tableDriverCompTable.StopsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsRateNull() {
                this[this.tableDriverCompTable.StopsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsAmountNull() {
                return this.IsNull(this.tableDriverCompTable.StopsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsAmountNull() {
                this[this.tableDriverCompTable.StopsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableDriverCompTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableDriverCompTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsRateNull() {
                return this.IsNull(this.tableDriverCompTable.CartonsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsRateNull() {
                this[this.tableDriverCompTable.CartonsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsAmountNull() {
                return this.IsNull(this.tableDriverCompTable.CartonsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsAmountNull() {
                this[this.tableDriverCompTable.CartonsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsNull() {
                return this.IsNull(this.tableDriverCompTable.PalletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsNull() {
                this[this.tableDriverCompTable.PalletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsRateNull() {
                return this.IsNull(this.tableDriverCompTable.PalletsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsRateNull() {
                this[this.tableDriverCompTable.PalletsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsAmountNull() {
                return this.IsNull(this.tableDriverCompTable.PalletsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsAmountNull() {
                this[this.tableDriverCompTable.PalletsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsNull() {
                return this.IsNull(this.tableDriverCompTable.PickupCartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsNull() {
                this[this.tableDriverCompTable.PickupCartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsRateNull() {
                return this.IsNull(this.tableDriverCompTable.PickupCartonsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsRateNull() {
                this[this.tableDriverCompTable.PickupCartonsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsAmountNull() {
                return this.IsNull(this.tableDriverCompTable.PickupCartonsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsAmountNull() {
                this[this.tableDriverCompTable.PickupCartonsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimunAmountNull() {
                return this.IsNull(this.tableDriverCompTable.MinimunAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimunAmountNull() {
                this[this.tableDriverCompTable.MinimunAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableDriverCompTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableDriverCompTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelCostNull() {
                return this.IsNull(this.tableDriverCompTable.FuelCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelCostNull() {
                this[this.tableDriverCompTable.FuelCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCGalNull() {
                return this.IsNull(this.tableDriverCompTable.FSCGalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCGalNull() {
                this[this.tableDriverCompTable.FSCGalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCBaseRateNull() {
                return this.IsNull(this.tableDriverCompTable.FSCBaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCBaseRateNull() {
                this[this.tableDriverCompTable.FSCBaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCNull() {
                return this.IsNull(this.tableDriverCompTable.FSCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCNull() {
                this[this.tableDriverCompTable.FSCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount1Null() {
                return this.IsNull(this.tableDriverCompTable.AdjustmentAmount1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount1Null() {
                this[this.tableDriverCompTable.AdjustmentAmount1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount2Null() {
                return this.IsNull(this.tableDriverCompTable.AdjustmentAmount2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount2Null() {
                this[this.tableDriverCompTable.AdjustmentAmount2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminChargeNull() {
                return this.IsNull(this.tableDriverCompTable.AdminChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminChargeNull() {
                this[this.tableDriverCompTable.AdminChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableDriverCompTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableDriverCompTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCMilesNull() {
                return this.IsNull(this.tableDriverCompTable.FSCMilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCMilesNull() {
                this[this.tableDriverCompTable.FSCMilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRow[] GetDriverRouteTableRows() {
                if ((this.Table.ChildRelations["DriverCompTable_DriverRouteTable"] == null)) {
                    return new DriverRouteTableRow[0];
                }
                else {
                    return ((DriverRouteTableRow[])(base.GetChildRows(this.Table.ChildRelations["DriverCompTable_DriverRouteTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DriverRouteTableRow : global::System.Data.DataRow {
            
            private DriverRouteTableDataTable tableDriverRouteTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverRouteTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverRouteTable = ((DriverRouteTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableDriverRouteTable.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNew {
                get {
                    try {
                        return ((bool)(this[this.tableDriverRouteTable.IsNewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNew\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.IsNewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombo {
                get {
                    try {
                        return ((bool)(this[this.tableDriverRouteTable.IsComboColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombo\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.IsComboColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjust {
                get {
                    try {
                        return ((bool)(this[this.tableDriverRouteTable.IsAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAdjust\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.IsAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.AgentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentNumber\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinanceVendorID {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.FinanceVendorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinanceVendorID\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FinanceVendorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RouteDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDriverRouteTable.RouteDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteDate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.RouteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RouteName {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.RouteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RouteName\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.RouteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.OperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Operator\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Payee {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.PayeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Payee\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PayeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.EquipmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentTypeID\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.EquipmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateTypeID {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.RateTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeID\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.RateTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.DayRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.DayRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DayAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.DayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DayAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.DayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Miles {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.MilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Miles\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.MilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesBaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.MilesBaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesBaseRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.MilesBaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.MilesRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.MilesRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MilesAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.MilesAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MilesAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.MilesAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Trip {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.TripColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trip\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.TripColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TripRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.TripRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.TripRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TripAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.TripAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.TripAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stops {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.StopsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stops\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.StopsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.StopsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopsRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.StopsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.StopsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopsAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.StopsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cartons {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.CartonsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonsRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.CartonsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CartonsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.CartonsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CartonsAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.CartonsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pallets {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.PalletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pallets\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PalletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.PalletsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PalletsRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PalletsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.PalletsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PalletsAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PalletsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PickupCartons {
                get {
                    try {
                        return ((int)(this[this.tableDriverRouteTable.PickupCartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartons\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PickupCartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonsRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.PickupCartonsRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartonsRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PickupCartonsRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PickupCartonsAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.PickupCartonsAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickupCartonsAmount\' in table \'DriverRouteTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.PickupCartonsAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimunAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.MinimunAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimunAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.MinimunAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuelCost {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.FuelCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelCost\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FuelCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCGal {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.FSCGalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCGal\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FSCGalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCBaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.FSCBaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCBaseRate\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FSCBaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSC {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.FSCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSC\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustmentAmount1 {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.AdjustmentAmount1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount1\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AdjustmentAmount1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentAmount1TypeID {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.AdjustmentAmount1TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount1TypeID\' in table \'DriverRouteTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AdjustmentAmount1TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdjustmentAmount2 {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.AdjustmentAmount2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount2\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AdjustmentAmount2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentAmount2TypeID {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.AdjustmentAmount2TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentAmount2TypeID\' in table \'DriverRouteTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AdjustmentAmount2TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdminCharge {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.AdminChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminCharge\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.AdminChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Imported {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDriverRouteTable.ImportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Imported\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.ImportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Exported {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDriverRouteTable.ExportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exported\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.ExportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArgixRtType {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.ArgixRtTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArgixRtType\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.ArgixRtTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastUpdated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDriverRouteTable.LastUpdatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastUpdated\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.LastUpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.tableDriverRouteTable.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSCMiles {
                get {
                    try {
                        return ((decimal)(this[this.tableDriverRouteTable.FSCMilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSCMiles\' in table \'DriverRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverRouteTable.FSCMilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow DriverCompTableRowParent {
                get {
                    return ((DriverCompTableRow)(this.GetParentRow(this.Table.ParentRelations["DriverCompTable_DriverRouteTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DriverCompTable_DriverRouteTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableDriverRouteTable.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableDriverRouteTable.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNewNull() {
                return this.IsNull(this.tableDriverRouteTable.IsNewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNewNull() {
                this[this.tableDriverRouteTable.IsNewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsComboNull() {
                return this.IsNull(this.tableDriverRouteTable.IsComboColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsComboNull() {
                this[this.tableDriverRouteTable.IsComboColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAdjustNull() {
                return this.IsNull(this.tableDriverRouteTable.IsAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAdjustNull() {
                this[this.tableDriverRouteTable.IsAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNumberNull() {
                return this.IsNull(this.tableDriverRouteTable.AgentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNumberNull() {
                this[this.tableDriverRouteTable.AgentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinanceVendorIDNull() {
                return this.IsNull(this.tableDriverRouteTable.FinanceVendorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinanceVendorIDNull() {
                this[this.tableDriverRouteTable.FinanceVendorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteDateNull() {
                return this.IsNull(this.tableDriverRouteTable.RouteDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteDateNull() {
                this[this.tableDriverRouteTable.RouteDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteNameNull() {
                return this.IsNull(this.tableDriverRouteTable.RouteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteNameNull() {
                this[this.tableDriverRouteTable.RouteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorNull() {
                return this.IsNull(this.tableDriverRouteTable.OperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorNull() {
                this[this.tableDriverRouteTable.OperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayeeNull() {
                return this.IsNull(this.tableDriverRouteTable.PayeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayeeNull() {
                this[this.tableDriverRouteTable.PayeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentTypeIDNull() {
                return this.IsNull(this.tableDriverRouteTable.EquipmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentTypeIDNull() {
                this[this.tableDriverRouteTable.EquipmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeIDNull() {
                return this.IsNull(this.tableDriverRouteTable.RateTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeIDNull() {
                this[this.tableDriverRouteTable.RateTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayRateNull() {
                return this.IsNull(this.tableDriverRouteTable.DayRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayRateNull() {
                this[this.tableDriverRouteTable.DayRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.DayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayAmountNull() {
                this[this.tableDriverRouteTable.DayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesNull() {
                return this.IsNull(this.tableDriverRouteTable.MilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesNull() {
                this[this.tableDriverRouteTable.MilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesBaseRateNull() {
                return this.IsNull(this.tableDriverRouteTable.MilesBaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesBaseRateNull() {
                this[this.tableDriverRouteTable.MilesBaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesRateNull() {
                return this.IsNull(this.tableDriverRouteTable.MilesRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesRateNull() {
                this[this.tableDriverRouteTable.MilesRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMilesAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.MilesAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMilesAmountNull() {
                this[this.tableDriverRouteTable.MilesAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNull() {
                return this.IsNull(this.tableDriverRouteTable.TripColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNull() {
                this[this.tableDriverRouteTable.TripColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripRateNull() {
                return this.IsNull(this.tableDriverRouteTable.TripRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripRateNull() {
                this[this.tableDriverRouteTable.TripRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.TripAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripAmountNull() {
                this[this.tableDriverRouteTable.TripAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsNull() {
                return this.IsNull(this.tableDriverRouteTable.StopsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsNull() {
                this[this.tableDriverRouteTable.StopsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsRateNull() {
                return this.IsNull(this.tableDriverRouteTable.StopsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsRateNull() {
                this[this.tableDriverRouteTable.StopsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopsAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.StopsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopsAmountNull() {
                this[this.tableDriverRouteTable.StopsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableDriverRouteTable.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableDriverRouteTable.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsRateNull() {
                return this.IsNull(this.tableDriverRouteTable.CartonsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsRateNull() {
                this[this.tableDriverRouteTable.CartonsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.CartonsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsAmountNull() {
                this[this.tableDriverRouteTable.CartonsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsNull() {
                return this.IsNull(this.tableDriverRouteTable.PalletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsNull() {
                this[this.tableDriverRouteTable.PalletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsRateNull() {
                return this.IsNull(this.tableDriverRouteTable.PalletsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsRateNull() {
                this[this.tableDriverRouteTable.PalletsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPalletsAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.PalletsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPalletsAmountNull() {
                this[this.tableDriverRouteTable.PalletsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsNull() {
                return this.IsNull(this.tableDriverRouteTable.PickupCartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsNull() {
                this[this.tableDriverRouteTable.PickupCartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsRateNull() {
                return this.IsNull(this.tableDriverRouteTable.PickupCartonsRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsRateNull() {
                this[this.tableDriverRouteTable.PickupCartonsRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickupCartonsAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.PickupCartonsAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickupCartonsAmountNull() {
                this[this.tableDriverRouteTable.PickupCartonsAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimunAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.MinimunAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimunAmountNull() {
                this[this.tableDriverRouteTable.MinimunAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelCostNull() {
                return this.IsNull(this.tableDriverRouteTable.FuelCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelCostNull() {
                this[this.tableDriverRouteTable.FuelCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCGalNull() {
                return this.IsNull(this.tableDriverRouteTable.FSCGalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCGalNull() {
                this[this.tableDriverRouteTable.FSCGalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCBaseRateNull() {
                return this.IsNull(this.tableDriverRouteTable.FSCBaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCBaseRateNull() {
                this[this.tableDriverRouteTable.FSCBaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCNull() {
                return this.IsNull(this.tableDriverRouteTable.FSCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCNull() {
                this[this.tableDriverRouteTable.FSCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount1Null() {
                return this.IsNull(this.tableDriverRouteTable.AdjustmentAmount1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount1Null() {
                this[this.tableDriverRouteTable.AdjustmentAmount1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount1TypeIDNull() {
                return this.IsNull(this.tableDriverRouteTable.AdjustmentAmount1TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount1TypeIDNull() {
                this[this.tableDriverRouteTable.AdjustmentAmount1TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount2Null() {
                return this.IsNull(this.tableDriverRouteTable.AdjustmentAmount2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount2Null() {
                this[this.tableDriverRouteTable.AdjustmentAmount2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentAmount2TypeIDNull() {
                return this.IsNull(this.tableDriverRouteTable.AdjustmentAmount2TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentAmount2TypeIDNull() {
                this[this.tableDriverRouteTable.AdjustmentAmount2TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminChargeNull() {
                return this.IsNull(this.tableDriverRouteTable.AdminChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminChargeNull() {
                this[this.tableDriverRouteTable.AdminChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableDriverRouteTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableDriverRouteTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedNull() {
                return this.IsNull(this.tableDriverRouteTable.ImportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedNull() {
                this[this.tableDriverRouteTable.ImportedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportedNull() {
                return this.IsNull(this.tableDriverRouteTable.ExportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportedNull() {
                this[this.tableDriverRouteTable.ExportedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArgixRtTypeNull() {
                return this.IsNull(this.tableDriverRouteTable.ArgixRtTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArgixRtTypeNull() {
                this[this.tableDriverRouteTable.ArgixRtTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastUpdatedNull() {
                return this.IsNull(this.tableDriverRouteTable.LastUpdatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastUpdatedNull() {
                this[this.tableDriverRouteTable.LastUpdatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableDriverRouteTable.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableDriverRouteTable.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSCMilesNull() {
                return this.IsNull(this.tableDriverRouteTable.FSCMilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSCMilesNull() {
                this[this.tableDriverRouteTable.FSCMilesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RoadshowRouteTableRow : global::System.Data.DataRow {
            
            private RoadshowRouteTableDataTable tableRoadshowRouteTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RoadshowRouteTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRoadshowRouteTable = ((RoadshowRouteTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool New {
                get {
                    try {
                        return ((bool)(this[this.tableRoadshowRouteTable.NewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'New\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.NewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Rt_Date {
                get {
                    return ((global::System.DateTime)(this[this.tableRoadshowRouteTable.Rt_DateColumn]));
                }
                set {
                    this[this.tableRoadshowRouteTable.Rt_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rt_Name {
                get {
                    return ((string)(this[this.tableRoadshowRouteTable.Rt_NameColumn]));
                }
                set {
                    this[this.tableRoadshowRouteTable.Rt_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operator {
                get {
                    return ((string)(this[this.tableRoadshowRouteTable.OperatorColumn]));
                }
                set {
                    this[this.tableRoadshowRouteTable.OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VEHICLE_TYPE1 {
                get {
                    try {
                        return ((string)(this[this.tableRoadshowRouteTable.VEHICLE_TYPE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VEHICLE_TYPE1\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.VEHICLE_TYPE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Payee {
                get {
                    try {
                        return ((string)(this[this.tableRoadshowRouteTable.PayeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Payee\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.PayeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinanceVendID {
                get {
                    try {
                        return ((string)(this[this.tableRoadshowRouteTable.FinanceVendIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinanceVendID\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.FinanceVendIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TtlMiles {
                get {
                    try {
                        return ((decimal)(this[this.tableRoadshowRouteTable.TtlMilesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TtlMiles\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.TtlMilesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MultiTrp {
                get {
                    try {
                        return ((int)(this[this.tableRoadshowRouteTable.MultiTrpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MultiTrp\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.MultiTrpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UniqueStops {
                get {
                    try {
                        return ((int)(this[this.tableRoadshowRouteTable.UniqueStopsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UniqueStops\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.UniqueStopsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DelCtns {
                get {
                    try {
                        return ((float)(this[this.tableRoadshowRouteTable.DelCtnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelCtns\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.DelCtnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RtnCtn {
                get {
                    try {
                        return ((double)(this[this.tableRoadshowRouteTable.RtnCtnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RtnCtn\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.RtnCtnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DelPltsorRcks {
                get {
                    try {
                        return ((float)(this[this.tableRoadshowRouteTable.DelPltsorRcksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelPltsorRcks\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.DelPltsorRcksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depot {
                get {
                    try {
                        return ((string)(this[this.tableRoadshowRouteTable.DepotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depot\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.DepotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DepotNumber {
                get {
                    try {
                        return ((short)(this[this.tableRoadshowRouteTable.DepotNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepotNumber\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.DepotNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentID {
                get {
                    try {
                        return ((int)(this[this.tableRoadshowRouteTable.EquipmentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentID\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.EquipmentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArgixRtType {
                get {
                    try {
                        return ((string)(this[this.tableRoadshowRouteTable.ArgixRtTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArgixRtType\' in table \'RoadshowRouteTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRoadshowRouteTable.ArgixRtTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewNull() {
                return this.IsNull(this.tableRoadshowRouteTable.NewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewNull() {
                this[this.tableRoadshowRouteTable.NewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVEHICLE_TYPE1Null() {
                return this.IsNull(this.tableRoadshowRouteTable.VEHICLE_TYPE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVEHICLE_TYPE1Null() {
                this[this.tableRoadshowRouteTable.VEHICLE_TYPE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayeeNull() {
                return this.IsNull(this.tableRoadshowRouteTable.PayeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayeeNull() {
                this[this.tableRoadshowRouteTable.PayeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinanceVendIDNull() {
                return this.IsNull(this.tableRoadshowRouteTable.FinanceVendIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinanceVendIDNull() {
                this[this.tableRoadshowRouteTable.FinanceVendIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTtlMilesNull() {
                return this.IsNull(this.tableRoadshowRouteTable.TtlMilesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTtlMilesNull() {
                this[this.tableRoadshowRouteTable.TtlMilesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiTrpNull() {
                return this.IsNull(this.tableRoadshowRouteTable.MultiTrpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiTrpNull() {
                this[this.tableRoadshowRouteTable.MultiTrpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniqueStopsNull() {
                return this.IsNull(this.tableRoadshowRouteTable.UniqueStopsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniqueStopsNull() {
                this[this.tableRoadshowRouteTable.UniqueStopsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelCtnsNull() {
                return this.IsNull(this.tableRoadshowRouteTable.DelCtnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelCtnsNull() {
                this[this.tableRoadshowRouteTable.DelCtnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRtnCtnNull() {
                return this.IsNull(this.tableRoadshowRouteTable.RtnCtnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRtnCtnNull() {
                this[this.tableRoadshowRouteTable.RtnCtnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelPltsorRcksNull() {
                return this.IsNull(this.tableRoadshowRouteTable.DelPltsorRcksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelPltsorRcksNull() {
                this[this.tableRoadshowRouteTable.DelPltsorRcksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepotNull() {
                return this.IsNull(this.tableRoadshowRouteTable.DepotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepotNull() {
                this[this.tableRoadshowRouteTable.DepotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepotNumberNull() {
                return this.IsNull(this.tableRoadshowRouteTable.DepotNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepotNumberNull() {
                this[this.tableRoadshowRouteTable.DepotNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentIDNull() {
                return this.IsNull(this.tableRoadshowRouteTable.EquipmentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentIDNull() {
                this[this.tableRoadshowRouteTable.EquipmentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArgixRtTypeNull() {
                return this.IsNull(this.tableRoadshowRouteTable.ArgixRtTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArgixRtTypeNull() {
                this[this.tableRoadshowRouteTable.ArgixRtTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdjustmentTypeTableRow : global::System.Data.DataRow {
            
            private AdjustmentTypeTableDataTable tableAdjustmentTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdjustmentTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdjustmentTypeTable = ((AdjustmentTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentType {
                get {
                    return ((string)(this[this.tableAdjustmentTypeTable.AdjustmentTypeColumn]));
                }
                set {
                    this[this.tableAdjustmentTypeTable.AdjustmentTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DriverEquipmentTableRow : global::System.Data.DataRow {
            
            private DriverEquipmentTableDataTable tableDriverEquipmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverEquipmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriverEquipmentTable = ((DriverEquipmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinanceVendorID {
                get {
                    return ((string)(this[this.tableDriverEquipmentTable.FinanceVendorIDColumn]));
                }
                set {
                    this[this.tableDriverEquipmentTable.FinanceVendorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperatorName {
                get {
                    return ((string)(this[this.tableDriverEquipmentTable.OperatorNameColumn]));
                }
                set {
                    this[this.tableDriverEquipmentTable.OperatorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EquipmentID {
                get {
                    try {
                        return ((int)(this[this.tableDriverEquipmentTable.EquipmentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentID\' in table \'DriverEquipmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverEquipmentTable.EquipmentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentName {
                get {
                    try {
                        return ((string)(this[this.tableDriverEquipmentTable.EquipmentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentName\' in table \'DriverEquipmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDriverEquipmentTable.EquipmentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentIDNull() {
                return this.IsNull(this.tableDriverEquipmentTable.EquipmentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentIDNull() {
                this[this.tableDriverEquipmentTable.EquipmentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentNameNull() {
                return this.IsNull(this.tableDriverEquipmentTable.EquipmentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentNameNull() {
                this[this.tableDriverEquipmentTable.EquipmentNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TerminalConfigurationTableRow : global::System.Data.DataRow {
            
            private TerminalConfigurationTableDataTable tableTerminalConfigurationTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminalConfigurationTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminalConfigurationTable = ((TerminalConfigurationTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNumber {
                get {
                    return ((string)(this[this.tableTerminalConfigurationTable.AgentNumberColumn]));
                }
                set {
                    this[this.tableTerminalConfigurationTable.AgentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableTerminalConfigurationTable.AgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentName\' in table \'TerminalConfigurationTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTerminalConfigurationTable.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GLNumber {
                get {
                    try {
                        return ((string)(this[this.tableTerminalConfigurationTable.GLNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GLNumber\' in table \'TerminalConfigurationTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalConfigurationTable.GLNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdminGLNumber {
                get {
                    try {
                        return ((string)(this[this.tableTerminalConfigurationTable.AdminGLNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminGLNumber\' in table \'TerminalConfigurationTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTerminalConfigurationTable.AdminGLNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AdminFee {
                get {
                    try {
                        return ((decimal)(this[this.tableTerminalConfigurationTable.AdminFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdminFee\' in table \'TerminalConfigurationTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalConfigurationTable.AdminFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FSBase {
                get {
                    try {
                        return ((decimal)(this[this.tableTerminalConfigurationTable.FSBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSBase\' in table \'TerminalConfigurationTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminalConfigurationTable.FSBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableTerminalConfigurationTable.AgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameNull() {
                this[this.tableTerminalConfigurationTable.AgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGLNumberNull() {
                return this.IsNull(this.tableTerminalConfigurationTable.GLNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGLNumberNull() {
                this[this.tableTerminalConfigurationTable.GLNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminGLNumberNull() {
                return this.IsNull(this.tableTerminalConfigurationTable.AdminGLNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminGLNumberNull() {
                this[this.tableTerminalConfigurationTable.AdminGLNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdminFeeNull() {
                return this.IsNull(this.tableTerminalConfigurationTable.AdminFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdminFeeNull() {
                this[this.tableTerminalConfigurationTable.AdminFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSBaseNull() {
                return this.IsNull(this.tableTerminalConfigurationTable.FSBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSBaseNull() {
                this[this.tableTerminalConfigurationTable.FSBaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DriverCompTableRowChangeEvent : global::System.EventArgs {
            
            private DriverCompTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRowChangeEvent(DriverCompTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverCompTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DriverRouteTableRowChangeEvent : global::System.EventArgs {
            
            private DriverRouteTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRowChangeEvent(DriverRouteTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRouteTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RoadshowRouteTableRowChangeEvent : global::System.EventArgs {
            
            private RoadshowRouteTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRowChangeEvent(RoadshowRouteTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RoadshowRouteTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdjustmentTypeTableRowChangeEvent : global::System.EventArgs {
            
            private AdjustmentTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableRowChangeEvent(AdjustmentTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdjustmentTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DriverEquipmentTableRowChangeEvent : global::System.EventArgs {
            
            private DriverEquipmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRowChangeEvent(DriverEquipmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverEquipmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TerminalConfigurationTableRowChangeEvent : global::System.EventArgs {
            
            private TerminalConfigurationTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRowChangeEvent(TerminalConfigurationTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalConfigurationTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591