//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Argix.Dispatch {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DispatchDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DispatchDS : global::System.Data.DataSet {
        
        private ClientInboundTableDataTable tableClientInboundTable;
        
        private ScheduledInboundTableDataTable tableScheduledInboundTable;
        
        private PickupLogTableDataTable tablePickupLogTable;
        
        private ScheduledOutboundTableDataTable tableScheduledOutboundTable;
        
        private TrailerLogTableDataTable tableTrailerLogTable;
        
        private TrailerMoveTableDataTable tableTrailerMoveTable;
        
        private LineHaulTableDataTable tableLineHaulTable;
        
        private global::System.Data.DataRelation relationTrailerLogTable_TrailerMoveTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DispatchDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DispatchDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientInboundTable"] != null)) {
                    base.Tables.Add(new ClientInboundTableDataTable(ds.Tables["ClientInboundTable"]));
                }
                if ((ds.Tables["ScheduledInboundTable"] != null)) {
                    base.Tables.Add(new ScheduledInboundTableDataTable(ds.Tables["ScheduledInboundTable"]));
                }
                if ((ds.Tables["PickupLogTable"] != null)) {
                    base.Tables.Add(new PickupLogTableDataTable(ds.Tables["PickupLogTable"]));
                }
                if ((ds.Tables["ScheduledOutboundTable"] != null)) {
                    base.Tables.Add(new ScheduledOutboundTableDataTable(ds.Tables["ScheduledOutboundTable"]));
                }
                if ((ds.Tables["TrailerLogTable"] != null)) {
                    base.Tables.Add(new TrailerLogTableDataTable(ds.Tables["TrailerLogTable"]));
                }
                if ((ds.Tables["TrailerMoveTable"] != null)) {
                    base.Tables.Add(new TrailerMoveTableDataTable(ds.Tables["TrailerMoveTable"]));
                }
                if ((ds.Tables["LineHaulTable"] != null)) {
                    base.Tables.Add(new LineHaulTableDataTable(ds.Tables["LineHaulTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientInboundTableDataTable ClientInboundTable {
            get {
                return this.tableClientInboundTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduledInboundTableDataTable ScheduledInboundTable {
            get {
                return this.tableScheduledInboundTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PickupLogTableDataTable PickupLogTable {
            get {
                return this.tablePickupLogTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduledOutboundTableDataTable ScheduledOutboundTable {
            get {
                return this.tableScheduledOutboundTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrailerLogTableDataTable TrailerLogTable {
            get {
                return this.tableTrailerLogTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrailerMoveTableDataTable TrailerMoveTable {
            get {
                return this.tableTrailerMoveTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LineHaulTableDataTable LineHaulTable {
            get {
                return this.tableLineHaulTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DispatchDS cln = ((DispatchDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientInboundTable"] != null)) {
                    base.Tables.Add(new ClientInboundTableDataTable(ds.Tables["ClientInboundTable"]));
                }
                if ((ds.Tables["ScheduledInboundTable"] != null)) {
                    base.Tables.Add(new ScheduledInboundTableDataTable(ds.Tables["ScheduledInboundTable"]));
                }
                if ((ds.Tables["PickupLogTable"] != null)) {
                    base.Tables.Add(new PickupLogTableDataTable(ds.Tables["PickupLogTable"]));
                }
                if ((ds.Tables["ScheduledOutboundTable"] != null)) {
                    base.Tables.Add(new ScheduledOutboundTableDataTable(ds.Tables["ScheduledOutboundTable"]));
                }
                if ((ds.Tables["TrailerLogTable"] != null)) {
                    base.Tables.Add(new TrailerLogTableDataTable(ds.Tables["TrailerLogTable"]));
                }
                if ((ds.Tables["TrailerMoveTable"] != null)) {
                    base.Tables.Add(new TrailerMoveTableDataTable(ds.Tables["TrailerMoveTable"]));
                }
                if ((ds.Tables["LineHaulTable"] != null)) {
                    base.Tables.Add(new LineHaulTableDataTable(ds.Tables["LineHaulTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientInboundTable = ((ClientInboundTableDataTable)(base.Tables["ClientInboundTable"]));
            if ((initTable == true)) {
                if ((this.tableClientInboundTable != null)) {
                    this.tableClientInboundTable.InitVars();
                }
            }
            this.tableScheduledInboundTable = ((ScheduledInboundTableDataTable)(base.Tables["ScheduledInboundTable"]));
            if ((initTable == true)) {
                if ((this.tableScheduledInboundTable != null)) {
                    this.tableScheduledInboundTable.InitVars();
                }
            }
            this.tablePickupLogTable = ((PickupLogTableDataTable)(base.Tables["PickupLogTable"]));
            if ((initTable == true)) {
                if ((this.tablePickupLogTable != null)) {
                    this.tablePickupLogTable.InitVars();
                }
            }
            this.tableScheduledOutboundTable = ((ScheduledOutboundTableDataTable)(base.Tables["ScheduledOutboundTable"]));
            if ((initTable == true)) {
                if ((this.tableScheduledOutboundTable != null)) {
                    this.tableScheduledOutboundTable.InitVars();
                }
            }
            this.tableTrailerLogTable = ((TrailerLogTableDataTable)(base.Tables["TrailerLogTable"]));
            if ((initTable == true)) {
                if ((this.tableTrailerLogTable != null)) {
                    this.tableTrailerLogTable.InitVars();
                }
            }
            this.tableTrailerMoveTable = ((TrailerMoveTableDataTable)(base.Tables["TrailerMoveTable"]));
            if ((initTable == true)) {
                if ((this.tableTrailerMoveTable != null)) {
                    this.tableTrailerMoveTable.InitVars();
                }
            }
            this.tableLineHaulTable = ((LineHaulTableDataTable)(base.Tables["LineHaulTable"]));
            if ((initTable == true)) {
                if ((this.tableLineHaulTable != null)) {
                    this.tableLineHaulTable.InitVars();
                }
            }
            this.relationTrailerLogTable_TrailerMoveTable = this.Relations["TrailerLogTable_TrailerMoveTable"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DispatchDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DispatchDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientInboundTable = new ClientInboundTableDataTable();
            base.Tables.Add(this.tableClientInboundTable);
            this.tableScheduledInboundTable = new ScheduledInboundTableDataTable();
            base.Tables.Add(this.tableScheduledInboundTable);
            this.tablePickupLogTable = new PickupLogTableDataTable();
            base.Tables.Add(this.tablePickupLogTable);
            this.tableScheduledOutboundTable = new ScheduledOutboundTableDataTable();
            base.Tables.Add(this.tableScheduledOutboundTable);
            this.tableTrailerLogTable = new TrailerLogTableDataTable();
            base.Tables.Add(this.tableTrailerLogTable);
            this.tableTrailerMoveTable = new TrailerMoveTableDataTable();
            base.Tables.Add(this.tableTrailerMoveTable);
            this.tableLineHaulTable = new LineHaulTableDataTable();
            base.Tables.Add(this.tableLineHaulTable);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("TrailerLogTable_TrailerMoveTable", new global::System.Data.DataColumn[] {
                        this.tableTrailerLogTable.TrailerLogTable_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTrailerMoveTable.TrailerLogTable_IdColumn});
            this.tableTrailerMoveTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationTrailerLogTable_TrailerMoveTable = new global::System.Data.DataRelation("TrailerLogTable_TrailerMoveTable", new global::System.Data.DataColumn[] {
                        this.tableTrailerLogTable.TrailerLogTable_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTrailerMoveTable.TrailerLogTable_IdColumn}, false);
            this.relationTrailerLogTable_TrailerMoveTable.Nested = true;
            this.Relations.Add(this.relationTrailerLogTable_TrailerMoveTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientInboundTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheduledInboundTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePickupLogTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheduledOutboundTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrailerLogTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrailerMoveTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLineHaulTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DispatchDS ds = new DispatchDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientInboundTableRowChangeEventHandler(object sender, ClientInboundTableRowChangeEvent e);
        
        public delegate void ScheduledInboundTableRowChangeEventHandler(object sender, ScheduledInboundTableRowChangeEvent e);
        
        public delegate void PickupLogTableRowChangeEventHandler(object sender, PickupLogTableRowChangeEvent e);
        
        public delegate void ScheduledOutboundTableRowChangeEventHandler(object sender, ScheduledOutboundTableRowChangeEvent e);
        
        public delegate void TrailerLogTableRowChangeEventHandler(object sender, TrailerLogTableRowChangeEvent e);
        
        public delegate void TrailerMoveTableRowChangeEventHandler(object sender, TrailerMoveTableRowChangeEvent e);
        
        public delegate void LineHaulTableRowChangeEventHandler(object sender, LineHaulTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientInboundTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnVendorName;
            
            private global::System.Data.DataColumn columnConsigneeName;
            
            private global::System.Data.DataColumn columnETATime;
            
            private global::System.Data.DataColumn columnDriverName;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAmountType;
            
            private global::System.Data.DataColumn columnFreightType;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnIn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableDataTable() {
                this.TableName = "ClientInboundTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInboundTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientInboundTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsigneeNameColumn {
                get {
                    return this.columnConsigneeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ETATimeColumn {
                get {
                    return this.columnETATime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountTypeColumn {
                get {
                    return this.columnAmountType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InColumn {
                get {
                    return this.columnIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableRow this[int index] {
                get {
                    return ((ClientInboundTableRow)(this.Rows[index]));
                }
            }
            
            public event ClientInboundTableRowChangeEventHandler ClientInboundTableRowChanging;
            
            public event ClientInboundTableRowChangeEventHandler ClientInboundTableRowChanged;
            
            public event ClientInboundTableRowChangeEventHandler ClientInboundTableRowDeleting;
            
            public event ClientInboundTableRowChangeEventHandler ClientInboundTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientInboundTableRow(ClientInboundTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableRow AddClientInboundTableRow(int ID, System.DateTime Created, string CreatedBy, string VendorName, string ConsigneeName, System.DateTime ETATime, string DriverName, string TrailerNumber, int Amount, string AmountType, string FreightType, string Comments, bool In) {
                ClientInboundTableRow rowClientInboundTableRow = ((ClientInboundTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        VendorName,
                        ConsigneeName,
                        ETATime,
                        DriverName,
                        TrailerNumber,
                        Amount,
                        AmountType,
                        FreightType,
                        Comments,
                        In};
                rowClientInboundTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientInboundTableRow);
                return rowClientInboundTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientInboundTableDataTable cln = ((ClientInboundTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientInboundTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnVendorName = base.Columns["VendorName"];
                this.columnConsigneeName = base.Columns["ConsigneeName"];
                this.columnETATime = base.Columns["ETATime"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnAmount = base.Columns["Amount"];
                this.columnAmountType = base.Columns["AmountType"];
                this.columnFreightType = base.Columns["FreightType"];
                this.columnComments = base.Columns["Comments"];
                this.columnIn = base.Columns["In"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnVendorName = new global::System.Data.DataColumn("VendorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorName);
                this.columnConsigneeName = new global::System.Data.DataColumn("ConsigneeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsigneeName);
                this.columnETATime = new global::System.Data.DataColumn("ETATime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETATime);
                this.columnDriverName = new global::System.Data.DataColumn("DriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAmountType = new global::System.Data.DataColumn("AmountType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountType);
                this.columnFreightType = new global::System.Data.DataColumn("FreightType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightType);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnIn = new global::System.Data.DataColumn("In", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIn);
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableRow NewClientInboundTableRow() {
                return ((ClientInboundTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientInboundTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientInboundTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientInboundTableRowChanged != null)) {
                    this.ClientInboundTableRowChanged(this, new ClientInboundTableRowChangeEvent(((ClientInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientInboundTableRowChanging != null)) {
                    this.ClientInboundTableRowChanging(this, new ClientInboundTableRowChangeEvent(((ClientInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientInboundTableRowDeleted != null)) {
                    this.ClientInboundTableRowDeleted(this, new ClientInboundTableRowChangeEvent(((ClientInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientInboundTableRowDeleting != null)) {
                    this.ClientInboundTableRowDeleting(this, new ClientInboundTableRowChangeEvent(((ClientInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientInboundTableRow(ClientInboundTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientInboundTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduledInboundTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnDriverName;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnFromLocation;
            
            private global::System.Data.DataColumn columnToLocation;
            
            private global::System.Data.DataColumn columnScheduledDeparture;
            
            private global::System.Data.DataColumn columnActualDeparture;
            
            private global::System.Data.DataColumn columnScheduledDelivery;
            
            private global::System.Data.DataColumn columnActualDelivery;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnConfirmed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableDataTable() {
                this.TableName = "ScheduledInboundTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledInboundTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduledInboundTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromLocationColumn {
                get {
                    return this.columnFromLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLocationColumn {
                get {
                    return this.columnToLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledDepartureColumn {
                get {
                    return this.columnScheduledDeparture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDepartureColumn {
                get {
                    return this.columnActualDeparture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledDeliveryColumn {
                get {
                    return this.columnScheduledDelivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDeliveryColumn {
                get {
                    return this.columnActualDelivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableRow this[int index] {
                get {
                    return ((ScheduledInboundTableRow)(this.Rows[index]));
                }
            }
            
            public event ScheduledInboundTableRowChangeEventHandler ScheduledInboundTableRowChanging;
            
            public event ScheduledInboundTableRowChangeEventHandler ScheduledInboundTableRowChanged;
            
            public event ScheduledInboundTableRowChangeEventHandler ScheduledInboundTableRowDeleting;
            
            public event ScheduledInboundTableRowChangeEventHandler ScheduledInboundTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduledInboundTableRow(ScheduledInboundTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableRow AddScheduledInboundTableRow(int ID, System.DateTime Created, string CreatedBy, string DriverName, string TrailerNumber, string FromLocation, string ToLocation, System.DateTime ScheduledDeparture, System.DateTime ActualDeparture, System.DateTime ScheduledDelivery, System.DateTime ActualDelivery, string Comments, bool Confirmed) {
                ScheduledInboundTableRow rowScheduledInboundTableRow = ((ScheduledInboundTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        DriverName,
                        TrailerNumber,
                        FromLocation,
                        ToLocation,
                        ScheduledDeparture,
                        ActualDeparture,
                        ScheduledDelivery,
                        ActualDelivery,
                        Comments,
                        Confirmed};
                rowScheduledInboundTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduledInboundTableRow);
                return rowScheduledInboundTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduledInboundTableDataTable cln = ((ScheduledInboundTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduledInboundTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnFromLocation = base.Columns["FromLocation"];
                this.columnToLocation = base.Columns["ToLocation"];
                this.columnScheduledDeparture = base.Columns["ScheduledDeparture"];
                this.columnActualDeparture = base.Columns["ActualDeparture"];
                this.columnScheduledDelivery = base.Columns["ScheduledDelivery"];
                this.columnActualDelivery = base.Columns["ActualDelivery"];
                this.columnComments = base.Columns["Comments"];
                this.columnConfirmed = base.Columns["Confirmed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnDriverName = new global::System.Data.DataColumn("DriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnFromLocation = new global::System.Data.DataColumn("FromLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromLocation);
                this.columnToLocation = new global::System.Data.DataColumn("ToLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLocation);
                this.columnScheduledDeparture = new global::System.Data.DataColumn("ScheduledDeparture", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledDeparture);
                this.columnActualDeparture = new global::System.Data.DataColumn("ActualDeparture", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDeparture);
                this.columnScheduledDelivery = new global::System.Data.DataColumn("ScheduledDelivery", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledDelivery);
                this.columnActualDelivery = new global::System.Data.DataColumn("ActualDelivery", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDelivery);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnConfirmed = new global::System.Data.DataColumn("Confirmed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmed);
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableRow NewScheduledInboundTableRow() {
                return ((ScheduledInboundTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduledInboundTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduledInboundTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduledInboundTableRowChanged != null)) {
                    this.ScheduledInboundTableRowChanged(this, new ScheduledInboundTableRowChangeEvent(((ScheduledInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduledInboundTableRowChanging != null)) {
                    this.ScheduledInboundTableRowChanging(this, new ScheduledInboundTableRowChangeEvent(((ScheduledInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduledInboundTableRowDeleted != null)) {
                    this.ScheduledInboundTableRowDeleted(this, new ScheduledInboundTableRowChangeEvent(((ScheduledInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduledInboundTableRowDeleting != null)) {
                    this.ScheduledInboundTableRowDeleting(this, new ScheduledInboundTableRowChangeEvent(((ScheduledInboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduledInboundTableRow(ScheduledInboundTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduledInboundTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PickupLogTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnCallerName;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnShipperName;
            
            private global::System.Data.DataColumn columnShipperAddress;
            
            private global::System.Data.DataColumn columnDeliveryWindow;
            
            private global::System.Data.DataColumn columnTerminal;
            
            private global::System.Data.DataColumn columnDriverName;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAmountType;
            
            private global::System.Data.DataColumn columnFreightType;
            
            private global::System.Data.DataColumn columnAutoNumber;
            
            private global::System.Data.DataColumn columnRequestDate;
            
            private global::System.Data.DataColumn columnPickUpDate;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnUpdated;
            
            private global::System.Data.DataColumn columnMustBeReady;
            
            private global::System.Data.DataColumn columnPickedUp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableDataTable() {
                this.TableName = "PickupLogTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PickupLogTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PickupLogTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallerNameColumn {
                get {
                    return this.columnCallerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperNameColumn {
                get {
                    return this.columnShipperName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperAddressColumn {
                get {
                    return this.columnShipperAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryWindowColumn {
                get {
                    return this.columnDeliveryWindow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountTypeColumn {
                get {
                    return this.columnAmountType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FreightTypeColumn {
                get {
                    return this.columnFreightType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoNumberColumn {
                get {
                    return this.columnAutoNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestDateColumn {
                get {
                    return this.columnRequestDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickUpDateColumn {
                get {
                    return this.columnPickUpDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MustBeReadyColumn {
                get {
                    return this.columnMustBeReady;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PickedUpColumn {
                get {
                    return this.columnPickedUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableRow this[int index] {
                get {
                    return ((PickupLogTableRow)(this.Rows[index]));
                }
            }
            
            public event PickupLogTableRowChangeEventHandler PickupLogTableRowChanging;
            
            public event PickupLogTableRowChangeEventHandler PickupLogTableRowChanged;
            
            public event PickupLogTableRowChangeEventHandler PickupLogTableRowDeleting;
            
            public event PickupLogTableRowChangeEventHandler PickupLogTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPickupLogTableRow(PickupLogTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableRow AddPickupLogTableRow(
                        int ID, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        string CallerName, 
                        string ClientName, 
                        string ShipperName, 
                        string ShipperAddress, 
                        string DeliveryWindow, 
                        string Terminal, 
                        string DriverName, 
                        int Amount, 
                        string AmountType, 
                        string FreightType, 
                        int AutoNumber, 
                        System.DateTime RequestDate, 
                        System.DateTime PickUpDate, 
                        string Comments, 
                        bool Updated, 
                        bool MustBeReady, 
                        bool PickedUp) {
                PickupLogTableRow rowPickupLogTableRow = ((PickupLogTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        CallerName,
                        ClientName,
                        ShipperName,
                        ShipperAddress,
                        DeliveryWindow,
                        Terminal,
                        DriverName,
                        Amount,
                        AmountType,
                        FreightType,
                        AutoNumber,
                        RequestDate,
                        PickUpDate,
                        Comments,
                        Updated,
                        MustBeReady,
                        PickedUp};
                rowPickupLogTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPickupLogTableRow);
                return rowPickupLogTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PickupLogTableDataTable cln = ((PickupLogTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PickupLogTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnCallerName = base.Columns["CallerName"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnShipperName = base.Columns["ShipperName"];
                this.columnShipperAddress = base.Columns["ShipperAddress"];
                this.columnDeliveryWindow = base.Columns["DeliveryWindow"];
                this.columnTerminal = base.Columns["Terminal"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnAmount = base.Columns["Amount"];
                this.columnAmountType = base.Columns["AmountType"];
                this.columnFreightType = base.Columns["FreightType"];
                this.columnAutoNumber = base.Columns["AutoNumber"];
                this.columnRequestDate = base.Columns["RequestDate"];
                this.columnPickUpDate = base.Columns["PickUpDate"];
                this.columnComments = base.Columns["Comments"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnMustBeReady = base.Columns["MustBeReady"];
                this.columnPickedUp = base.Columns["PickedUp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnCallerName = new global::System.Data.DataColumn("CallerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallerName);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnShipperName = new global::System.Data.DataColumn("ShipperName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperName);
                this.columnShipperAddress = new global::System.Data.DataColumn("ShipperAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperAddress);
                this.columnDeliveryWindow = new global::System.Data.DataColumn("DeliveryWindow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryWindow);
                this.columnTerminal = new global::System.Data.DataColumn("Terminal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminal);
                this.columnDriverName = new global::System.Data.DataColumn("DriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAmountType = new global::System.Data.DataColumn("AmountType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountType);
                this.columnFreightType = new global::System.Data.DataColumn("FreightType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreightType);
                this.columnAutoNumber = new global::System.Data.DataColumn("AutoNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoNumber);
                this.columnRequestDate = new global::System.Data.DataColumn("RequestDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestDate);
                this.columnPickUpDate = new global::System.Data.DataColumn("PickUpDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickUpDate);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnUpdated = new global::System.Data.DataColumn("Updated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnMustBeReady = new global::System.Data.DataColumn("MustBeReady", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMustBeReady);
                this.columnPickedUp = new global::System.Data.DataColumn("PickedUp", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPickedUp);
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableRow NewPickupLogTableRow() {
                return ((PickupLogTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PickupLogTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PickupLogTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PickupLogTableRowChanged != null)) {
                    this.PickupLogTableRowChanged(this, new PickupLogTableRowChangeEvent(((PickupLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PickupLogTableRowChanging != null)) {
                    this.PickupLogTableRowChanging(this, new PickupLogTableRowChangeEvent(((PickupLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PickupLogTableRowDeleted != null)) {
                    this.PickupLogTableRowDeleted(this, new PickupLogTableRowChangeEvent(((PickupLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PickupLogTableRowDeleting != null)) {
                    this.PickupLogTableRowDeleting(this, new PickupLogTableRowChangeEvent(((PickupLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePickupLogTableRow(PickupLogTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PickupLogTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduledOutboundTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnDriverName;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnFromLocation;
            
            private global::System.Data.DataColumn columnToLocation;
            
            private global::System.Data.DataColumn columnScheduledDeparture;
            
            private global::System.Data.DataColumn columnActualDeparture;
            
            private global::System.Data.DataColumn columnScheduledDelivery;
            
            private global::System.Data.DataColumn columnActualDelivery;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnConfirmed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableDataTable() {
                this.TableName = "ScheduledOutboundTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledOutboundTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduledOutboundTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromLocationColumn {
                get {
                    return this.columnFromLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLocationColumn {
                get {
                    return this.columnToLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledDepartureColumn {
                get {
                    return this.columnScheduledDeparture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDepartureColumn {
                get {
                    return this.columnActualDeparture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledDeliveryColumn {
                get {
                    return this.columnScheduledDelivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDeliveryColumn {
                get {
                    return this.columnActualDelivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableRow this[int index] {
                get {
                    return ((ScheduledOutboundTableRow)(this.Rows[index]));
                }
            }
            
            public event ScheduledOutboundTableRowChangeEventHandler ScheduledOutboundTableRowChanging;
            
            public event ScheduledOutboundTableRowChangeEventHandler ScheduledOutboundTableRowChanged;
            
            public event ScheduledOutboundTableRowChangeEventHandler ScheduledOutboundTableRowDeleting;
            
            public event ScheduledOutboundTableRowChangeEventHandler ScheduledOutboundTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduledOutboundTableRow(ScheduledOutboundTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableRow AddScheduledOutboundTableRow(int ID, System.DateTime Created, string CreatedBy, string DriverName, string TrailerNumber, string FromLocation, string ToLocation, System.DateTime ScheduledDeparture, System.DateTime ActualDeparture, System.DateTime ScheduledDelivery, System.DateTime ActualDelivery, string Comments, bool Confirmed) {
                ScheduledOutboundTableRow rowScheduledOutboundTableRow = ((ScheduledOutboundTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        DriverName,
                        TrailerNumber,
                        FromLocation,
                        ToLocation,
                        ScheduledDeparture,
                        ActualDeparture,
                        ScheduledDelivery,
                        ActualDelivery,
                        Comments,
                        Confirmed};
                rowScheduledOutboundTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduledOutboundTableRow);
                return rowScheduledOutboundTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduledOutboundTableDataTable cln = ((ScheduledOutboundTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduledOutboundTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnFromLocation = base.Columns["FromLocation"];
                this.columnToLocation = base.Columns["ToLocation"];
                this.columnScheduledDeparture = base.Columns["ScheduledDeparture"];
                this.columnActualDeparture = base.Columns["ActualDeparture"];
                this.columnScheduledDelivery = base.Columns["ScheduledDelivery"];
                this.columnActualDelivery = base.Columns["ActualDelivery"];
                this.columnComments = base.Columns["Comments"];
                this.columnConfirmed = base.Columns["Confirmed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnDriverName = new global::System.Data.DataColumn("DriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnFromLocation = new global::System.Data.DataColumn("FromLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromLocation);
                this.columnToLocation = new global::System.Data.DataColumn("ToLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLocation);
                this.columnScheduledDeparture = new global::System.Data.DataColumn("ScheduledDeparture", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledDeparture);
                this.columnActualDeparture = new global::System.Data.DataColumn("ActualDeparture", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDeparture);
                this.columnScheduledDelivery = new global::System.Data.DataColumn("ScheduledDelivery", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledDelivery);
                this.columnActualDelivery = new global::System.Data.DataColumn("ActualDelivery", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDelivery);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnConfirmed = new global::System.Data.DataColumn("Confirmed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmed);
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableRow NewScheduledOutboundTableRow() {
                return ((ScheduledOutboundTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduledOutboundTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduledOutboundTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduledOutboundTableRowChanged != null)) {
                    this.ScheduledOutboundTableRowChanged(this, new ScheduledOutboundTableRowChangeEvent(((ScheduledOutboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduledOutboundTableRowChanging != null)) {
                    this.ScheduledOutboundTableRowChanging(this, new ScheduledOutboundTableRowChangeEvent(((ScheduledOutboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduledOutboundTableRowDeleted != null)) {
                    this.ScheduledOutboundTableRowDeleted(this, new ScheduledOutboundTableRowChangeEvent(((ScheduledOutboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduledOutboundTableRowDeleting != null)) {
                    this.ScheduledOutboundTableRowDeleting(this, new ScheduledOutboundTableRowChangeEvent(((ScheduledOutboundTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduledOutboundTableRow(ScheduledOutboundTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduledOutboundTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrailerLogTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnIncomingDate;
            
            private global::System.Data.DataColumn columnIncomingCarrier;
            
            private global::System.Data.DataColumn columnIncomingSeal;
            
            private global::System.Data.DataColumn columnIncomingDriverName;
            
            private global::System.Data.DataColumn columnInitialYardLocation;
            
            private global::System.Data.DataColumn columnLoadSheetReady;
            
            private global::System.Data.DataColumn columnMoveInProgress;
            
            private global::System.Data.DataColumn columnOutgoingDate;
            
            private global::System.Data.DataColumn columnOutgoingCarrier;
            
            private global::System.Data.DataColumn columnOutgoingSeal;
            
            private global::System.Data.DataColumn columnOutgoingDriverName;
            
            private global::System.Data.DataColumn columnMovedOut;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnTrailerLogTable_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableDataTable() {
                this.TableName = "TrailerLogTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrailerLogTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrailerLogTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomingDateColumn {
                get {
                    return this.columnIncomingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomingCarrierColumn {
                get {
                    return this.columnIncomingCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomingSealColumn {
                get {
                    return this.columnIncomingSeal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomingDriverNameColumn {
                get {
                    return this.columnIncomingDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialYardLocationColumn {
                get {
                    return this.columnInitialYardLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadSheetReadyColumn {
                get {
                    return this.columnLoadSheetReady;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MoveInProgressColumn {
                get {
                    return this.columnMoveInProgress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutgoingDateColumn {
                get {
                    return this.columnOutgoingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutgoingCarrierColumn {
                get {
                    return this.columnOutgoingCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutgoingSealColumn {
                get {
                    return this.columnOutgoingSeal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutgoingDriverNameColumn {
                get {
                    return this.columnOutgoingDriverName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovedOutColumn {
                get {
                    return this.columnMovedOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerLogTable_IdColumn {
                get {
                    return this.columnTrailerLogTable_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRow this[int index] {
                get {
                    return ((TrailerLogTableRow)(this.Rows[index]));
                }
            }
            
            public event TrailerLogTableRowChangeEventHandler TrailerLogTableRowChanging;
            
            public event TrailerLogTableRowChangeEventHandler TrailerLogTableRowChanged;
            
            public event TrailerLogTableRowChangeEventHandler TrailerLogTableRowDeleting;
            
            public event TrailerLogTableRowChangeEventHandler TrailerLogTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrailerLogTableRow(TrailerLogTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRow AddTrailerLogTableRow(
                        int ID, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        string TrailerNumber, 
                        System.DateTime IncomingDate, 
                        string IncomingCarrier, 
                        string IncomingSeal, 
                        string IncomingDriverName, 
                        string InitialYardLocation, 
                        bool LoadSheetReady, 
                        bool MoveInProgress, 
                        System.DateTime OutgoingDate, 
                        string OutgoingCarrier, 
                        string OutgoingSeal, 
                        string OutgoingDriverName, 
                        bool MovedOut, 
                        string Comments) {
                TrailerLogTableRow rowTrailerLogTableRow = ((TrailerLogTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        TrailerNumber,
                        IncomingDate,
                        IncomingCarrier,
                        IncomingSeal,
                        IncomingDriverName,
                        InitialYardLocation,
                        LoadSheetReady,
                        MoveInProgress,
                        OutgoingDate,
                        OutgoingCarrier,
                        OutgoingSeal,
                        OutgoingDriverName,
                        MovedOut,
                        Comments,
                        null};
                rowTrailerLogTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrailerLogTableRow);
                return rowTrailerLogTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TrailerLogTableDataTable cln = ((TrailerLogTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TrailerLogTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnIncomingDate = base.Columns["IncomingDate"];
                this.columnIncomingCarrier = base.Columns["IncomingCarrier"];
                this.columnIncomingSeal = base.Columns["IncomingSeal"];
                this.columnIncomingDriverName = base.Columns["IncomingDriverName"];
                this.columnInitialYardLocation = base.Columns["InitialYardLocation"];
                this.columnLoadSheetReady = base.Columns["LoadSheetReady"];
                this.columnMoveInProgress = base.Columns["MoveInProgress"];
                this.columnOutgoingDate = base.Columns["OutgoingDate"];
                this.columnOutgoingCarrier = base.Columns["OutgoingCarrier"];
                this.columnOutgoingSeal = base.Columns["OutgoingSeal"];
                this.columnOutgoingDriverName = base.Columns["OutgoingDriverName"];
                this.columnMovedOut = base.Columns["MovedOut"];
                this.columnComments = base.Columns["Comments"];
                this.columnTrailerLogTable_Id = base.Columns["TrailerLogTable_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnIncomingDate = new global::System.Data.DataColumn("IncomingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomingDate);
                this.columnIncomingCarrier = new global::System.Data.DataColumn("IncomingCarrier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomingCarrier);
                this.columnIncomingSeal = new global::System.Data.DataColumn("IncomingSeal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomingSeal);
                this.columnIncomingDriverName = new global::System.Data.DataColumn("IncomingDriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomingDriverName);
                this.columnInitialYardLocation = new global::System.Data.DataColumn("InitialYardLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialYardLocation);
                this.columnLoadSheetReady = new global::System.Data.DataColumn("LoadSheetReady", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadSheetReady);
                this.columnMoveInProgress = new global::System.Data.DataColumn("MoveInProgress", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoveInProgress);
                this.columnOutgoingDate = new global::System.Data.DataColumn("OutgoingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutgoingDate);
                this.columnOutgoingCarrier = new global::System.Data.DataColumn("OutgoingCarrier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutgoingCarrier);
                this.columnOutgoingSeal = new global::System.Data.DataColumn("OutgoingSeal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutgoingSeal);
                this.columnOutgoingDriverName = new global::System.Data.DataColumn("OutgoingDriverName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutgoingDriverName);
                this.columnMovedOut = new global::System.Data.DataColumn("MovedOut", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMovedOut);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnTrailerLogTable_Id = new global::System.Data.DataColumn("TrailerLogTable_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTrailerLogTable_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTrailerLogTable_Id}, true));
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
                this.columnTrailerLogTable_Id.AutoIncrement = true;
                this.columnTrailerLogTable_Id.AllowDBNull = false;
                this.columnTrailerLogTable_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRow NewTrailerLogTableRow() {
                return ((TrailerLogTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TrailerLogTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TrailerLogTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrailerLogTableRowChanged != null)) {
                    this.TrailerLogTableRowChanged(this, new TrailerLogTableRowChangeEvent(((TrailerLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrailerLogTableRowChanging != null)) {
                    this.TrailerLogTableRowChanging(this, new TrailerLogTableRowChangeEvent(((TrailerLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrailerLogTableRowDeleted != null)) {
                    this.TrailerLogTableRowDeleted(this, new TrailerLogTableRowChangeEvent(((TrailerLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrailerLogTableRowDeleting != null)) {
                    this.TrailerLogTableRowDeleting(this, new TrailerLogTableRowChangeEvent(((TrailerLogTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrailerLogTableRow(TrailerLogTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrailerLogTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrailerMoveTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRequested;
            
            private global::System.Data.DataColumn columnRequestedBy;
            
            private global::System.Data.DataColumn columnMoveFrom;
            
            private global::System.Data.DataColumn columnMoveTo;
            
            private global::System.Data.DataColumn columnSwitcher;
            
            private global::System.Data.DataColumn columnLoadedWith;
            
            private global::System.Data.DataColumn columnScheduledTime;
            
            private global::System.Data.DataColumn columnActualTime;
            
            private global::System.Data.DataColumn columnTrailerLogTable_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableDataTable() {
                this.TableName = "TrailerMoveTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrailerMoveTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrailerMoveTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedColumn {
                get {
                    return this.columnRequested;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedByColumn {
                get {
                    return this.columnRequestedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MoveFromColumn {
                get {
                    return this.columnMoveFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MoveToColumn {
                get {
                    return this.columnMoveTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitcherColumn {
                get {
                    return this.columnSwitcher;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadedWithColumn {
                get {
                    return this.columnLoadedWith;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledTimeColumn {
                get {
                    return this.columnScheduledTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualTimeColumn {
                get {
                    return this.columnActualTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerLogTable_IdColumn {
                get {
                    return this.columnTrailerLogTable_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRow this[int index] {
                get {
                    return ((TrailerMoveTableRow)(this.Rows[index]));
                }
            }
            
            public event TrailerMoveTableRowChangeEventHandler TrailerMoveTableRowChanging;
            
            public event TrailerMoveTableRowChangeEventHandler TrailerMoveTableRowChanged;
            
            public event TrailerMoveTableRowChangeEventHandler TrailerMoveTableRowDeleting;
            
            public event TrailerMoveTableRowChangeEventHandler TrailerMoveTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrailerMoveTableRow(TrailerMoveTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRow AddTrailerMoveTableRow(int ID, System.DateTime Requested, string RequestedBy, string MoveFrom, string MoveTo, string Switcher, string LoadedWith, System.DateTime ScheduledTime, System.DateTime ActualTime, TrailerLogTableRow parentTrailerLogTableRowByTrailerLogTable_TrailerMoveTable) {
                TrailerMoveTableRow rowTrailerMoveTableRow = ((TrailerMoveTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Requested,
                        RequestedBy,
                        MoveFrom,
                        MoveTo,
                        Switcher,
                        LoadedWith,
                        ScheduledTime,
                        ActualTime,
                        null};
                if ((parentTrailerLogTableRowByTrailerLogTable_TrailerMoveTable != null)) {
                    columnValuesArray[9] = parentTrailerLogTableRowByTrailerLogTable_TrailerMoveTable[17];
                }
                rowTrailerMoveTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrailerMoveTableRow);
                return rowTrailerMoveTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TrailerMoveTableDataTable cln = ((TrailerMoveTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TrailerMoveTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRequested = base.Columns["Requested"];
                this.columnRequestedBy = base.Columns["RequestedBy"];
                this.columnMoveFrom = base.Columns["MoveFrom"];
                this.columnMoveTo = base.Columns["MoveTo"];
                this.columnSwitcher = base.Columns["Switcher"];
                this.columnLoadedWith = base.Columns["LoadedWith"];
                this.columnScheduledTime = base.Columns["ScheduledTime"];
                this.columnActualTime = base.Columns["ActualTime"];
                this.columnTrailerLogTable_Id = base.Columns["TrailerLogTable_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRequested = new global::System.Data.DataColumn("Requested", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequested);
                this.columnRequestedBy = new global::System.Data.DataColumn("RequestedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedBy);
                this.columnMoveFrom = new global::System.Data.DataColumn("MoveFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoveFrom);
                this.columnMoveTo = new global::System.Data.DataColumn("MoveTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoveTo);
                this.columnSwitcher = new global::System.Data.DataColumn("Switcher", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitcher);
                this.columnLoadedWith = new global::System.Data.DataColumn("LoadedWith", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadedWith);
                this.columnScheduledTime = new global::System.Data.DataColumn("ScheduledTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledTime);
                this.columnActualTime = new global::System.Data.DataColumn("ActualTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualTime);
                this.columnTrailerLogTable_Id = new global::System.Data.DataColumn("TrailerLogTable_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTrailerLogTable_Id);
                this.columnID.AllowDBNull = false;
                this.columnRequested.AllowDBNull = false;
                this.columnRequestedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRow NewTrailerMoveTableRow() {
                return ((TrailerMoveTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TrailerMoveTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TrailerMoveTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrailerMoveTableRowChanged != null)) {
                    this.TrailerMoveTableRowChanged(this, new TrailerMoveTableRowChangeEvent(((TrailerMoveTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrailerMoveTableRowChanging != null)) {
                    this.TrailerMoveTableRowChanging(this, new TrailerMoveTableRowChangeEvent(((TrailerMoveTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrailerMoveTableRowDeleted != null)) {
                    this.TrailerMoveTableRowDeleted(this, new TrailerMoveTableRowChangeEvent(((TrailerMoveTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrailerMoveTableRowDeleting != null)) {
                    this.TrailerMoveTableRowDeleting(this, new TrailerMoveTableRowChangeEvent(((TrailerMoveTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrailerMoveTableRow(TrailerMoveTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrailerMoveTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LineHaulTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnTrailerNumber;
            
            private global::System.Data.DataColumn columnTerminal;
            
            private global::System.Data.DataColumn columnScheduledArrival;
            
            private global::System.Data.DataColumn columnActualArrival;
            
            private global::System.Data.DataColumn columnComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableDataTable() {
                this.TableName = "LineHaulTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LineHaulTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LineHaulTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn {
                get {
                    return this.columnTrailerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminalColumn {
                get {
                    return this.columnTerminal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduledArrivalColumn {
                get {
                    return this.columnScheduledArrival;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualArrivalColumn {
                get {
                    return this.columnActualArrival;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableRow this[int index] {
                get {
                    return ((LineHaulTableRow)(this.Rows[index]));
                }
            }
            
            public event LineHaulTableRowChangeEventHandler LineHaulTableRowChanging;
            
            public event LineHaulTableRowChangeEventHandler LineHaulTableRowChanged;
            
            public event LineHaulTableRowChangeEventHandler LineHaulTableRowDeleting;
            
            public event LineHaulTableRowChangeEventHandler LineHaulTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLineHaulTableRow(LineHaulTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableRow AddLineHaulTableRow(int ID, System.DateTime Created, string CreatedBy, string TrailerNumber, string Terminal, System.DateTime ScheduledArrival, System.DateTime ActualArrival, string Comments) {
                LineHaulTableRow rowLineHaulTableRow = ((LineHaulTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Created,
                        CreatedBy,
                        TrailerNumber,
                        Terminal,
                        ScheduledArrival,
                        ActualArrival,
                        Comments};
                rowLineHaulTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLineHaulTableRow);
                return rowLineHaulTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LineHaulTableDataTable cln = ((LineHaulTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LineHaulTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnTerminal = base.Columns["Terminal"];
                this.columnScheduledArrival = base.Columns["ScheduledArrival"];
                this.columnActualArrival = base.Columns["ActualArrival"];
                this.columnComments = base.Columns["Comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnTerminal = new global::System.Data.DataColumn("Terminal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminal);
                this.columnScheduledArrival = new global::System.Data.DataColumn("ScheduledArrival", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduledArrival);
                this.columnActualArrival = new global::System.Data.DataColumn("ActualArrival", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualArrival);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnID.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableRow NewLineHaulTableRow() {
                return ((LineHaulTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LineHaulTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LineHaulTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LineHaulTableRowChanged != null)) {
                    this.LineHaulTableRowChanged(this, new LineHaulTableRowChangeEvent(((LineHaulTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LineHaulTableRowChanging != null)) {
                    this.LineHaulTableRowChanging(this, new LineHaulTableRowChangeEvent(((LineHaulTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LineHaulTableRowDeleted != null)) {
                    this.LineHaulTableRowDeleted(this, new LineHaulTableRowChangeEvent(((LineHaulTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LineHaulTableRowDeleting != null)) {
                    this.LineHaulTableRowDeleting(this, new LineHaulTableRowChangeEvent(((LineHaulTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLineHaulTableRow(LineHaulTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DispatchDS ds = new DispatchDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LineHaulTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientInboundTableRow : global::System.Data.DataRow {
            
            private ClientInboundTableDataTable tableClientInboundTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientInboundTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientInboundTable = ((ClientInboundTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableClientInboundTable.IDColumn]));
                }
                set {
                    this[this.tableClientInboundTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableClientInboundTable.CreatedColumn]));
                }
                set {
                    this[this.tableClientInboundTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableClientInboundTable.CreatedByColumn]));
                }
                set {
                    this[this.tableClientInboundTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.VendorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorName\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.VendorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsigneeName {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.ConsigneeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsigneeName\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.ConsigneeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ETATime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientInboundTable.ETATimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ETATime\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.ETATimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.DriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriverName\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.DriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Amount {
                get {
                    try {
                        return ((int)(this[this.tableClientInboundTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmountType {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.AmountTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountType\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.AmountTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightType {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.FreightTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FreightType\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.FreightTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableClientInboundTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool In {
                get {
                    try {
                        return ((bool)(this[this.tableClientInboundTable.InColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'In\' in table \'ClientInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientInboundTable.InColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableClientInboundTable.VendorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorNameNull() {
                this[this.tableClientInboundTable.VendorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsigneeNameNull() {
                return this.IsNull(this.tableClientInboundTable.ConsigneeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsigneeNameNull() {
                this[this.tableClientInboundTable.ConsigneeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsETATimeNull() {
                return this.IsNull(this.tableClientInboundTable.ETATimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetETATimeNull() {
                this[this.tableClientInboundTable.ETATimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNameNull() {
                return this.IsNull(this.tableClientInboundTable.DriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNameNull() {
                this[this.tableClientInboundTable.DriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableClientInboundTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableClientInboundTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableClientInboundTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableClientInboundTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountTypeNull() {
                return this.IsNull(this.tableClientInboundTable.AmountTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountTypeNull() {
                this[this.tableClientInboundTable.AmountTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightTypeNull() {
                return this.IsNull(this.tableClientInboundTable.FreightTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightTypeNull() {
                this[this.tableClientInboundTable.FreightTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableClientInboundTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableClientInboundTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInNull() {
                return this.IsNull(this.tableClientInboundTable.InColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInNull() {
                this[this.tableClientInboundTable.InColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduledInboundTableRow : global::System.Data.DataRow {
            
            private ScheduledInboundTableDataTable tableScheduledInboundTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledInboundTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheduledInboundTable = ((ScheduledInboundTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableScheduledInboundTable.IDColumn]));
                }
                set {
                    this[this.tableScheduledInboundTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduledInboundTable.CreatedColumn]));
                }
                set {
                    this[this.tableScheduledInboundTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableScheduledInboundTable.CreatedByColumn]));
                }
                set {
                    this[this.tableScheduledInboundTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInboundTable.DriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriverName\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.DriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInboundTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromLocation {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInboundTable.FromLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromLocation\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.FromLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToLocation {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInboundTable.ToLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLocation\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ToLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledDeparture {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledInboundTable.ScheduledDepartureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledDeparture\' in table \'ScheduledInboundTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ScheduledDepartureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualDeparture {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledInboundTable.ActualDepartureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualDeparture\' in table \'ScheduledInboundTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ActualDepartureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledDelivery {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledInboundTable.ScheduledDeliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledDelivery\' in table \'ScheduledInboundTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ScheduledDeliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualDelivery {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledInboundTable.ActualDeliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualDelivery\' in table \'ScheduledInboundTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ActualDeliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInboundTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Confirmed {
                get {
                    try {
                        return ((bool)(this[this.tableScheduledInboundTable.ConfirmedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Confirmed\' in table \'ScheduledInboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInboundTable.ConfirmedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNameNull() {
                return this.IsNull(this.tableScheduledInboundTable.DriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNameNull() {
                this[this.tableScheduledInboundTable.DriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableScheduledInboundTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableScheduledInboundTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromLocationNull() {
                return this.IsNull(this.tableScheduledInboundTable.FromLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromLocationNull() {
                this[this.tableScheduledInboundTable.FromLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLocationNull() {
                return this.IsNull(this.tableScheduledInboundTable.ToLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLocationNull() {
                this[this.tableScheduledInboundTable.ToLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledDepartureNull() {
                return this.IsNull(this.tableScheduledInboundTable.ScheduledDepartureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledDepartureNull() {
                this[this.tableScheduledInboundTable.ScheduledDepartureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualDepartureNull() {
                return this.IsNull(this.tableScheduledInboundTable.ActualDepartureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualDepartureNull() {
                this[this.tableScheduledInboundTable.ActualDepartureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledDeliveryNull() {
                return this.IsNull(this.tableScheduledInboundTable.ScheduledDeliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledDeliveryNull() {
                this[this.tableScheduledInboundTable.ScheduledDeliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualDeliveryNull() {
                return this.IsNull(this.tableScheduledInboundTable.ActualDeliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualDeliveryNull() {
                this[this.tableScheduledInboundTable.ActualDeliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableScheduledInboundTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableScheduledInboundTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedNull() {
                return this.IsNull(this.tableScheduledInboundTable.ConfirmedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedNull() {
                this[this.tableScheduledInboundTable.ConfirmedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PickupLogTableRow : global::System.Data.DataRow {
            
            private PickupLogTableDataTable tablePickupLogTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PickupLogTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePickupLogTable = ((PickupLogTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePickupLogTable.IDColumn]));
                }
                set {
                    this[this.tablePickupLogTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tablePickupLogTable.CreatedColumn]));
                }
                set {
                    this[this.tablePickupLogTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tablePickupLogTable.CreatedByColumn]));
                }
                set {
                    this[this.tablePickupLogTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallerName {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.CallerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CallerName\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.CallerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperName {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.ShipperNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipperName\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.ShipperNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperAddress {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.ShipperAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipperAddress\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.ShipperAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliveryWindow {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.DeliveryWindowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryWindow\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.DeliveryWindowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.TerminalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Terminal\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.TerminalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.DriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriverName\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.DriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Amount {
                get {
                    try {
                        return ((int)(this[this.tablePickupLogTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmountType {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.AmountTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountType\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.AmountTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreightType {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.FreightTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FreightType\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.FreightTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoNumber {
                get {
                    try {
                        return ((int)(this[this.tablePickupLogTable.AutoNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoNumber\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.AutoNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RequestDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePickupLogTable.RequestDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestDate\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.RequestDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PickUpDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePickupLogTable.PickUpDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickUpDate\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.PickUpDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tablePickupLogTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Updated {
                get {
                    try {
                        return ((bool)(this[this.tablePickupLogTable.UpdatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Updated\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.UpdatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MustBeReady {
                get {
                    try {
                        return ((bool)(this[this.tablePickupLogTable.MustBeReadyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MustBeReady\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.MustBeReadyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PickedUp {
                get {
                    try {
                        return ((bool)(this[this.tablePickupLogTable.PickedUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PickedUp\' in table \'PickupLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePickupLogTable.PickedUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCallerNameNull() {
                return this.IsNull(this.tablePickupLogTable.CallerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCallerNameNull() {
                this[this.tablePickupLogTable.CallerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePickupLogTable.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePickupLogTable.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNameNull() {
                return this.IsNull(this.tablePickupLogTable.ShipperNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNameNull() {
                this[this.tablePickupLogTable.ShipperNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperAddressNull() {
                return this.IsNull(this.tablePickupLogTable.ShipperAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperAddressNull() {
                this[this.tablePickupLogTable.ShipperAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryWindowNull() {
                return this.IsNull(this.tablePickupLogTable.DeliveryWindowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryWindowNull() {
                this[this.tablePickupLogTable.DeliveryWindowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalNull() {
                return this.IsNull(this.tablePickupLogTable.TerminalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalNull() {
                this[this.tablePickupLogTable.TerminalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNameNull() {
                return this.IsNull(this.tablePickupLogTable.DriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNameNull() {
                this[this.tablePickupLogTable.DriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tablePickupLogTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tablePickupLogTable.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountTypeNull() {
                return this.IsNull(this.tablePickupLogTable.AmountTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountTypeNull() {
                this[this.tablePickupLogTable.AmountTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreightTypeNull() {
                return this.IsNull(this.tablePickupLogTable.FreightTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreightTypeNull() {
                this[this.tablePickupLogTable.FreightTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoNumberNull() {
                return this.IsNull(this.tablePickupLogTable.AutoNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoNumberNull() {
                this[this.tablePickupLogTable.AutoNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestDateNull() {
                return this.IsNull(this.tablePickupLogTable.RequestDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestDateNull() {
                this[this.tablePickupLogTable.RequestDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickUpDateNull() {
                return this.IsNull(this.tablePickupLogTable.PickUpDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickUpDateNull() {
                this[this.tablePickupLogTable.PickUpDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tablePickupLogTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tablePickupLogTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tablePickupLogTable.UpdatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedNull() {
                this[this.tablePickupLogTable.UpdatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMustBeReadyNull() {
                return this.IsNull(this.tablePickupLogTable.MustBeReadyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMustBeReadyNull() {
                this[this.tablePickupLogTable.MustBeReadyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPickedUpNull() {
                return this.IsNull(this.tablePickupLogTable.PickedUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPickedUpNull() {
                this[this.tablePickupLogTable.PickedUpColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduledOutboundTableRow : global::System.Data.DataRow {
            
            private ScheduledOutboundTableDataTable tableScheduledOutboundTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledOutboundTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheduledOutboundTable = ((ScheduledOutboundTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableScheduledOutboundTable.IDColumn]));
                }
                set {
                    this[this.tableScheduledOutboundTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableScheduledOutboundTable.CreatedColumn]));
                }
                set {
                    this[this.tableScheduledOutboundTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableScheduledOutboundTable.CreatedByColumn]));
                }
                set {
                    this[this.tableScheduledOutboundTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    try {
                        return ((string)(this[this.tableScheduledOutboundTable.DriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriverName\' in table \'ScheduledOutboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.DriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableScheduledOutboundTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'ScheduledOutboundTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromLocation {
                get {
                    try {
                        return ((string)(this[this.tableScheduledOutboundTable.FromLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromLocation\' in table \'ScheduledOutboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.FromLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToLocation {
                get {
                    try {
                        return ((string)(this[this.tableScheduledOutboundTable.ToLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLocation\' in table \'ScheduledOutboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ToLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledDeparture {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledOutboundTable.ScheduledDepartureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledDeparture\' in table \'ScheduledOutboundTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ScheduledDepartureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualDeparture {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledOutboundTable.ActualDepartureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualDeparture\' in table \'ScheduledOutboundTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ActualDepartureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledDelivery {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledOutboundTable.ScheduledDeliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledDelivery\' in table \'ScheduledOutboundTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ScheduledDeliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualDelivery {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledOutboundTable.ActualDeliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualDelivery\' in table \'ScheduledOutboundTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ActualDeliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableScheduledOutboundTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'ScheduledOutboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Confirmed {
                get {
                    try {
                        return ((bool)(this[this.tableScheduledOutboundTable.ConfirmedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Confirmed\' in table \'ScheduledOutboundTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledOutboundTable.ConfirmedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriverNameNull() {
                return this.IsNull(this.tableScheduledOutboundTable.DriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriverNameNull() {
                this[this.tableScheduledOutboundTable.DriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableScheduledOutboundTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableScheduledOutboundTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromLocationNull() {
                return this.IsNull(this.tableScheduledOutboundTable.FromLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromLocationNull() {
                this[this.tableScheduledOutboundTable.FromLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLocationNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ToLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLocationNull() {
                this[this.tableScheduledOutboundTable.ToLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledDepartureNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ScheduledDepartureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledDepartureNull() {
                this[this.tableScheduledOutboundTable.ScheduledDepartureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualDepartureNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ActualDepartureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualDepartureNull() {
                this[this.tableScheduledOutboundTable.ActualDepartureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledDeliveryNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ScheduledDeliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledDeliveryNull() {
                this[this.tableScheduledOutboundTable.ScheduledDeliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualDeliveryNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ActualDeliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualDeliveryNull() {
                this[this.tableScheduledOutboundTable.ActualDeliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableScheduledOutboundTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableScheduledOutboundTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedNull() {
                return this.IsNull(this.tableScheduledOutboundTable.ConfirmedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedNull() {
                this[this.tableScheduledOutboundTable.ConfirmedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrailerLogTableRow : global::System.Data.DataRow {
            
            private TrailerLogTableDataTable tableTrailerLogTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrailerLogTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrailerLogTable = ((TrailerLogTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTrailerLogTable.IDColumn]));
                }
                set {
                    this[this.tableTrailerLogTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableTrailerLogTable.CreatedColumn]));
                }
                set {
                    this[this.tableTrailerLogTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableTrailerLogTable.CreatedByColumn]));
                }
                set {
                    this[this.tableTrailerLogTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IncomingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTrailerLogTable.IncomingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomingDate\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.IncomingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomingCarrier {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.IncomingCarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomingCarrier\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.IncomingCarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomingSeal {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.IncomingSealColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomingSeal\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.IncomingSealColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomingDriverName {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.IncomingDriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomingDriverName\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.IncomingDriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InitialYardLocation {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.InitialYardLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialYardLocation\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.InitialYardLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LoadSheetReady {
                get {
                    try {
                        return ((bool)(this[this.tableTrailerLogTable.LoadSheetReadyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadSheetReady\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.LoadSheetReadyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MoveInProgress {
                get {
                    try {
                        return ((bool)(this[this.tableTrailerLogTable.MoveInProgressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MoveInProgress\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.MoveInProgressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OutgoingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTrailerLogTable.OutgoingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutgoingDate\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.OutgoingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutgoingCarrier {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.OutgoingCarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutgoingCarrier\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.OutgoingCarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutgoingSeal {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.OutgoingSealColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutgoingSeal\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.OutgoingSealColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutgoingDriverName {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.OutgoingDriverNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutgoingDriverName\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.OutgoingDriverNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MovedOut {
                get {
                    try {
                        return ((bool)(this[this.tableTrailerLogTable.MovedOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MovedOut\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.MovedOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableTrailerLogTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'TrailerLogTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerLogTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrailerLogTable_Id {
                get {
                    return ((int)(this[this.tableTrailerLogTable.TrailerLogTable_IdColumn]));
                }
                set {
                    this[this.tableTrailerLogTable.TrailerLogTable_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableTrailerLogTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableTrailerLogTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomingDateNull() {
                return this.IsNull(this.tableTrailerLogTable.IncomingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomingDateNull() {
                this[this.tableTrailerLogTable.IncomingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomingCarrierNull() {
                return this.IsNull(this.tableTrailerLogTable.IncomingCarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomingCarrierNull() {
                this[this.tableTrailerLogTable.IncomingCarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomingSealNull() {
                return this.IsNull(this.tableTrailerLogTable.IncomingSealColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomingSealNull() {
                this[this.tableTrailerLogTable.IncomingSealColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomingDriverNameNull() {
                return this.IsNull(this.tableTrailerLogTable.IncomingDriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomingDriverNameNull() {
                this[this.tableTrailerLogTable.IncomingDriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialYardLocationNull() {
                return this.IsNull(this.tableTrailerLogTable.InitialYardLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialYardLocationNull() {
                this[this.tableTrailerLogTable.InitialYardLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadSheetReadyNull() {
                return this.IsNull(this.tableTrailerLogTable.LoadSheetReadyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadSheetReadyNull() {
                this[this.tableTrailerLogTable.LoadSheetReadyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMoveInProgressNull() {
                return this.IsNull(this.tableTrailerLogTable.MoveInProgressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMoveInProgressNull() {
                this[this.tableTrailerLogTable.MoveInProgressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutgoingDateNull() {
                return this.IsNull(this.tableTrailerLogTable.OutgoingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutgoingDateNull() {
                this[this.tableTrailerLogTable.OutgoingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutgoingCarrierNull() {
                return this.IsNull(this.tableTrailerLogTable.OutgoingCarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutgoingCarrierNull() {
                this[this.tableTrailerLogTable.OutgoingCarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutgoingSealNull() {
                return this.IsNull(this.tableTrailerLogTable.OutgoingSealColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutgoingSealNull() {
                this[this.tableTrailerLogTable.OutgoingSealColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutgoingDriverNameNull() {
                return this.IsNull(this.tableTrailerLogTable.OutgoingDriverNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutgoingDriverNameNull() {
                this[this.tableTrailerLogTable.OutgoingDriverNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMovedOutNull() {
                return this.IsNull(this.tableTrailerLogTable.MovedOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMovedOutNull() {
                this[this.tableTrailerLogTable.MovedOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableTrailerLogTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableTrailerLogTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRow[] GetTrailerMoveTableRows() {
                if ((this.Table.ChildRelations["TrailerLogTable_TrailerMoveTable"] == null)) {
                    return new TrailerMoveTableRow[0];
                }
                else {
                    return ((TrailerMoveTableRow[])(base.GetChildRows(this.Table.ChildRelations["TrailerLogTable_TrailerMoveTable"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrailerMoveTableRow : global::System.Data.DataRow {
            
            private TrailerMoveTableDataTable tableTrailerMoveTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrailerMoveTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrailerMoveTable = ((TrailerMoveTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTrailerMoveTable.IDColumn]));
                }
                set {
                    this[this.tableTrailerMoveTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Requested {
                get {
                    return ((global::System.DateTime)(this[this.tableTrailerMoveTable.RequestedColumn]));
                }
                set {
                    this[this.tableTrailerMoveTable.RequestedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestedBy {
                get {
                    return ((string)(this[this.tableTrailerMoveTable.RequestedByColumn]));
                }
                set {
                    this[this.tableTrailerMoveTable.RequestedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MoveFrom {
                get {
                    try {
                        return ((string)(this[this.tableTrailerMoveTable.MoveFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MoveFrom\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.MoveFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MoveTo {
                get {
                    try {
                        return ((string)(this[this.tableTrailerMoveTable.MoveToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MoveTo\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.MoveToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Switcher {
                get {
                    try {
                        return ((string)(this[this.tableTrailerMoveTable.SwitcherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Switcher\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.SwitcherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadedWith {
                get {
                    try {
                        return ((string)(this[this.tableTrailerMoveTable.LoadedWithColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadedWith\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.LoadedWithColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTrailerMoveTable.ScheduledTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledTime\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.ScheduledTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTrailerMoveTable.ActualTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualTime\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.ActualTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrailerLogTable_Id {
                get {
                    try {
                        return ((int)(this[this.tableTrailerMoveTable.TrailerLogTable_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerLogTable_Id\' in table \'TrailerMoveTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrailerMoveTable.TrailerLogTable_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRow TrailerLogTableRow {
                get {
                    return ((TrailerLogTableRow)(this.GetParentRow(this.Table.ParentRelations["TrailerLogTable_TrailerMoveTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrailerLogTable_TrailerMoveTable"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMoveFromNull() {
                return this.IsNull(this.tableTrailerMoveTable.MoveFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMoveFromNull() {
                this[this.tableTrailerMoveTable.MoveFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMoveToNull() {
                return this.IsNull(this.tableTrailerMoveTable.MoveToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMoveToNull() {
                this[this.tableTrailerMoveTable.MoveToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitcherNull() {
                return this.IsNull(this.tableTrailerMoveTable.SwitcherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitcherNull() {
                this[this.tableTrailerMoveTable.SwitcherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadedWithNull() {
                return this.IsNull(this.tableTrailerMoveTable.LoadedWithColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadedWithNull() {
                this[this.tableTrailerMoveTable.LoadedWithColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledTimeNull() {
                return this.IsNull(this.tableTrailerMoveTable.ScheduledTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledTimeNull() {
                this[this.tableTrailerMoveTable.ScheduledTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualTimeNull() {
                return this.IsNull(this.tableTrailerMoveTable.ActualTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualTimeNull() {
                this[this.tableTrailerMoveTable.ActualTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerLogTable_IdNull() {
                return this.IsNull(this.tableTrailerMoveTable.TrailerLogTable_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerLogTable_IdNull() {
                this[this.tableTrailerMoveTable.TrailerLogTable_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LineHaulTableRow : global::System.Data.DataRow {
            
            private LineHaulTableDataTable tableLineHaulTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LineHaulTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLineHaulTable = ((LineHaulTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLineHaulTable.IDColumn]));
                }
                set {
                    this[this.tableLineHaulTable.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableLineHaulTable.CreatedColumn]));
                }
                set {
                    this[this.tableLineHaulTable.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableLineHaulTable.CreatedByColumn]));
                }
                set {
                    this[this.tableLineHaulTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber {
                get {
                    try {
                        return ((string)(this[this.tableLineHaulTable.TrailerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerNumber\' in table \'LineHaulTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLineHaulTable.TrailerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Terminal {
                get {
                    try {
                        return ((string)(this[this.tableLineHaulTable.TerminalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Terminal\' in table \'LineHaulTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLineHaulTable.TerminalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScheduledArrival {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLineHaulTable.ScheduledArrivalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduledArrival\' in table \'LineHaulTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLineHaulTable.ScheduledArrivalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualArrival {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLineHaulTable.ActualArrivalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualArrival\' in table \'LineHaulTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLineHaulTable.ActualArrivalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableLineHaulTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'LineHaulTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLineHaulTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerNumberNull() {
                return this.IsNull(this.tableLineHaulTable.TrailerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerNumberNull() {
                this[this.tableLineHaulTable.TrailerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminalNull() {
                return this.IsNull(this.tableLineHaulTable.TerminalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminalNull() {
                this[this.tableLineHaulTable.TerminalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduledArrivalNull() {
                return this.IsNull(this.tableLineHaulTable.ScheduledArrivalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduledArrivalNull() {
                this[this.tableLineHaulTable.ScheduledArrivalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualArrivalNull() {
                return this.IsNull(this.tableLineHaulTable.ActualArrivalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualArrivalNull() {
                this[this.tableLineHaulTable.ActualArrivalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableLineHaulTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableLineHaulTable.CommentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientInboundTableRowChangeEvent : global::System.EventArgs {
            
            private ClientInboundTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableRowChangeEvent(ClientInboundTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientInboundTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduledInboundTableRowChangeEvent : global::System.EventArgs {
            
            private ScheduledInboundTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableRowChangeEvent(ScheduledInboundTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInboundTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PickupLogTableRowChangeEvent : global::System.EventArgs {
            
            private PickupLogTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableRowChangeEvent(PickupLogTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PickupLogTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduledOutboundTableRowChangeEvent : global::System.EventArgs {
            
            private ScheduledOutboundTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableRowChangeEvent(ScheduledOutboundTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledOutboundTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrailerLogTableRowChangeEvent : global::System.EventArgs {
            
            private TrailerLogTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRowChangeEvent(TrailerLogTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerLogTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrailerMoveTableRowChangeEvent : global::System.EventArgs {
            
            private TrailerMoveTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRowChangeEvent(TrailerMoveTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrailerMoveTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LineHaulTableRowChangeEvent : global::System.EventArgs {
            
            private LineHaulTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableRowChangeEvent(LineHaulTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LineHaulTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591