//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.4961.
// 
namespace Argix.Sync {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    using Microsoft.Synchronization.Data;
    using Microsoft.Synchronization;

    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IDriverScanService",Namespace="http://tempuri.org/")]
    public partial class DriverScanService:System.Web.Services.Protocols.SoapHttpClientProtocol {

        /// <remarks/>
        public DriverScanService(string uri) {
            this.Url = uri;
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDriverScanService/ApplyChanges",RequestNamespace="http://tempuri.org/",ResponseNamespace="http://tempuri.org/",Use=System.Web.Services.Description.SoapBindingUse.Literal,ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SyncContext ApplyChanges(SyncGroupMetadata groupMetaData,System.Data.DataSet changeSet,SyncSession syncSession) {
            object[] results = this.Invoke("ApplyChanges",new object[] {
                        groupMetaData,
                        changeSet,
                        syncSession});
            return ((SyncContext)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginApplyChanges(SyncGroupMetadata groupMetaData,System.Data.DataSet changeSet,SyncSession syncSession,System.AsyncCallback callback,object asyncState) {
            return this.BeginInvoke("ApplyChanges",new object[] {
                        groupMetaData,
                        changeSet,
                        syncSession},callback,asyncState);
        }

        /// <remarks/>
        public SyncContext EndApplyChanges(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SyncContext)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDriverScanService/GetChanges",RequestNamespace="http://tempuri.org/",ResponseNamespace="http://tempuri.org/",Use=System.Web.Services.Description.SoapBindingUse.Literal,ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SyncContext GetChanges(SyncGroupMetadata groupMetaData,SyncSession syncSession) {
            object[] results = this.Invoke("GetChanges",new object[] {
                        groupMetaData,
                        syncSession});
            return ((SyncContext)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetChanges(SyncGroupMetadata groupMetaData,SyncSession syncSession,System.AsyncCallback callback,object asyncState) {
            return this.BeginInvoke("GetChanges",new object[] {
                        groupMetaData,
                        syncSession},callback,asyncState);
        }

        /// <remarks/>
        public SyncContext EndGetChanges(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SyncContext)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDriverScanService/GetSchema",RequestNamespace="http://tempuri.org/",ResponseNamespace="http://tempuri.org/",Use=System.Web.Services.Description.SoapBindingUse.Literal,ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SyncSchema GetSchema(string[] tableNames,SyncSession syncSession) {
            object[] results = this.Invoke("GetSchema",new object[] {
                        tableNames,
                        syncSession});
            return ((SyncSchema)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSchema(string[] tableNames,SyncSession syncSession,System.AsyncCallback callback,object asyncState) {
            return this.BeginInvoke("GetSchema",new object[] {
                        tableNames,
                        syncSession},callback,asyncState);
        }

        /// <remarks/>
        public SyncSchema EndGetSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SyncSchema)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDriverScanService/GetServerInfo",RequestNamespace="http://tempuri.org/",ResponseNamespace="http://tempuri.org/",Use=System.Web.Services.Description.SoapBindingUse.Literal,ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SyncServerInfo GetServerInfo(SyncSession syncSession) {
            object[] results = this.Invoke("GetServerInfo",new object[] {
                        syncSession});
            return ((SyncServerInfo)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetServerInfo(SyncSession syncSession,System.AsyncCallback callback,object asyncState) {
            return this.BeginInvoke("GetServerInfo",new object[] {
                        syncSession},callback,asyncState);
        }

        /// <remarks/>
        public SyncServerInfo EndGetServerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SyncServerInfo)(results[0]));
        }
    }

}
