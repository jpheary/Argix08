//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Argix {
    
    
    public partial class ClientSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ClientSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ClientSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.Client ([NUMBER], [DIVISION], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate]) VALUES (@NUMBER, @DIVISION, @NAME, @ADDRESS_LINE1, @ADDRESS_LINE2, @CITY, @STATE, @ZIP, @STATUS, @rowguid, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DIVISION", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE1", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE2", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATE", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZIP", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUS", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ClientSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.Client WHERE ([NUMBER] = @NUMBER AND [DIVISION] = @DIVISION) AND " +
                "(@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @s" +
                "ync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Char));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DIVISION", System.Data.SqlDbType.Char));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ClientSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.Client SET [NAME] = @NAME, [ADDRESS_LINE1] = @ADDRESS_LINE1, [ADDRESS_LINE2] = @ADDRESS_LINE2, [CITY] = @CITY, [STATE] = @STATE, [ZIP] = @ZIP, [STATUS] = @STATUS, [rowguid] = @rowguid, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([NUMBER] = @NUMBER AND [DIVISION] = @DIVISION) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE1", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE2", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATE", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZIP", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUS", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DIVISION", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ClientSyncTableSelectConflictDeletedRowsCommand command.
            this.SelectConflictDeletedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictDeletedRowsCommand.CommandText = "SELECT [NUMBER], [DIVISION], [DeletionDate] FROM dbo.Client_Tombstone WHERE ([NUM" +
                "BER] = @NUMBER AND [DIVISION] = @DIVISION)";
            this.SelectConflictDeletedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Char));
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DIVISION", System.Data.SqlDbType.Char));
            // ClientSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [NUMBER], [DIVISION], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [S" +
                "TATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Clien" +
                "t WHERE ([NUMBER] = @NUMBER AND [DIVISION] = @DIVISION)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Char));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DIVISION", System.Data.SqlDbType.Char));
            // ClientSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [NUMBER], [DIVISION], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Client WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ClientSyncTableSelectIncrementalDeletesCommand command.
            this.SelectIncrementalDeletesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalDeletesCommand.CommandText = "SELECT [NUMBER], [DIVISION], [DeletionDate] FROM dbo.Client_Tombstone WHERE (@syn" +
                "c_initialized = 1 AND [DeletionDate] > @sync_last_received_anchor AND [DeletionD" +
                "ate] <= @sync_new_received_anchor)";
            this.SelectIncrementalDeletesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ClientSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [NUMBER], [DIVISION], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Client WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "Client";
        }
    }
    
    public partial class ScanDataSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ScanDataSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ScanDataSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.ScanData ON INSERT INTO dbo.ScanData ([ID], [ScanDateTime], [ClientNumber], [StoreNumber], [TrackingNumber], [CreationDate]) VALUES (@ID, @ScanDateTime, @ClientNumber, @StoreNumber, @TrackingNumber, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.ScanData OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.BigInt));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ScanDateTime", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClientNumber", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StoreNumber", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TrackingNumber", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ScanDataSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.ScanData WHERE ([ID] = @ID) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.BigInt));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ScanDataSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = "UPDATE dbo.ScanData SET [ScanDateTime] = @ScanDateTime, [ClientNumber] = @ClientN" +
                "umber, [StoreNumber] = @StoreNumber, [TrackingNumber] = @TrackingNumber, [Creati" +
                "onDate] = @CreationDate WHERE ([ID] = @ID) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ScanDateTime", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClientNumber", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StoreNumber", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TrackingNumber", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.BigInt));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ScanDataSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID], [ScanDateTime], [ClientNumber], [StoreNumber], [TrackingNumber], [Cr" +
                "eationDate] FROM dbo.ScanData WHERE ([CreationDate] > @sync_last_received_anchor" +
                " AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ScanData";
        }
    }
    
    public partial class StoreSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public StoreSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // StoreSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.Store ([CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate]) VALUES (@CLIENT_NUMBER, @CLIENT_DIVISION, @NUMBER, @NAME, @ADDRESS_LINE1, @ADDRESS_LINE2, @CITY, @STATE, @ZIP, @STATUS, @rowguid, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_NUMBER", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_DIVISION", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE1", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE2", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATE", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZIP", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUS", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // StoreSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.Store WHERE ([CLIENT_NUMBER] = @CLIENT_NUMBER AND [CLIENT_DIVISIO" +
                "N] = @CLIENT_DIVISION AND [NUMBER] = @NUMBER) AND (@sync_force_write = 1 OR ([La" +
                "stEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_NUMBER", System.Data.SqlDbType.Char));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_DIVISION", System.Data.SqlDbType.Char));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // StoreSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.Store SET [NAME] = @NAME, [ADDRESS_LINE1] = @ADDRESS_LINE1, [ADDRESS_LINE2] = @ADDRESS_LINE2, [CITY] = @CITY, [STATE] = @STATE, [ZIP] = @ZIP, [STATUS] = @STATUS, [rowguid] = @rowguid, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([CLIENT_NUMBER] = @CLIENT_NUMBER AND [CLIENT_DIVISION] = @CLIENT_DIVISION AND [NUMBER] = @NUMBER) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE1", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRESS_LINE2", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATE", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZIP", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUS", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rowguid", System.Data.SqlDbType.UniqueIdentifier));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_NUMBER", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_DIVISION", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // StoreSyncTableSelectConflictDeletedRowsCommand command.
            this.SelectConflictDeletedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictDeletedRowsCommand.CommandText = "SELECT [CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [DeletionDate] FROM dbo.Stor" +
                "e_Tombstone WHERE ([CLIENT_NUMBER] = @CLIENT_NUMBER AND [CLIENT_DIVISION] = @CLI" +
                "ENT_DIVISION AND [NUMBER] = @NUMBER)";
            this.SelectConflictDeletedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_NUMBER", System.Data.SqlDbType.Char));
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_DIVISION", System.Data.SqlDbType.Char));
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Int));
            // StoreSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Store WHERE ([CLIENT_NUMBER] = @CLIENT_NUMBER AND [CLIENT_DIVISION] = @CLIENT_DIVISION AND [NUMBER] = @NUMBER)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_NUMBER", System.Data.SqlDbType.Char));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLIENT_DIVISION", System.Data.SqlDbType.Char));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMBER", System.Data.SqlDbType.Int));
            // StoreSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Store WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // StoreSyncTableSelectIncrementalDeletesCommand command.
            this.SelectIncrementalDeletesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalDeletesCommand.CommandText = "SELECT [CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [DeletionDate] FROM dbo.Stor" +
                "e_Tombstone WHERE (@sync_initialized = 1 AND [DeletionDate] > @sync_last_receive" +
                "d_anchor AND [DeletionDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalDeletesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // StoreSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [CLIENT_NUMBER], [CLIENT_DIVISION], [NUMBER], [NAME], [ADDRESS_LINE1], [ADDRESS_LINE2], [CITY], [STATE], [ZIP], [STATUS], [rowguid], [LastEditDate], [CreationDate] FROM dbo.Store WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "Store";
        }
    }
    
    public partial class TsortCacheServerSyncProvider : Microsoft.Synchronization.Data.Server.DbServerSyncProvider {
        
        private ClientSyncAdapter _clientSyncAdapter;
        
        private ScanDataSyncAdapter _scanDataSyncAdapter;
        
        private StoreSyncAdapter _storeSyncAdapter;
        
        partial void OnInitialized();
        
        public TsortCacheServerSyncProvider() {
            string connectionString = global::Argix.Properties.Settings.Default.ServerTsortConnectionString;
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        public TsortCacheServerSyncProvider(string connectionString) {
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientSyncAdapter ClientSyncAdapter {
            get {
                return this._clientSyncAdapter;
            }
            set {
                this._clientSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScanDataSyncAdapter ScanDataSyncAdapter {
            get {
                return this._scanDataSyncAdapter;
            }
            set {
                this._scanDataSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StoreSyncAdapter StoreSyncAdapter {
            get {
                return this._storeSyncAdapter;
            }
            set {
                this._storeSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeConnection(string connectionString) {
            this.Connection = new System.Data.SqlClient.SqlConnection(connectionString);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncAdapters() {
            // Create SyncAdapters.
            this._clientSyncAdapter = new ClientSyncAdapter();
            this.SyncAdapters.Add(this._clientSyncAdapter);
            this._scanDataSyncAdapter = new ScanDataSyncAdapter();
            this.SyncAdapters.Add(this._scanDataSyncAdapter);
            this._storeSyncAdapter = new StoreSyncAdapter();
            this.SyncAdapters.Add(this._storeSyncAdapter);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeNewAnchorCommand() {
            // selectNewAnchorCmd command.
            this.SelectNewAnchorCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectNewAnchorCommand.CommandText = "Select @sync_new_received_anchor = GETUTCDATE()";
            this.SelectNewAnchorCommand.CommandType = System.Data.CommandType.Text;
            System.Data.SqlClient.SqlParameter selectnewanchorcommand_sync_new_received_anchorParameter = new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime);
            selectnewanchorcommand_sync_new_received_anchorParameter.Direction = System.Data.ParameterDirection.Output;
            this.SelectNewAnchorCommand.Parameters.Add(selectnewanchorcommand_sync_new_received_anchorParameter);
        }
    }
}
