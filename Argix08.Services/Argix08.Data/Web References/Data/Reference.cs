//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
// 
#pragma warning disable 1591

namespace Argix.Data {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DataAccessSoap", Namespace="http://www.argixdirect.com/webservices")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class DataAccess : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecuteDatasetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryWithReturnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteXmlReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDatasetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDatasetWithTimeoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDatasetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DataAccess() {
            this.Url = global::Argix.Properties.Settings.Default.DataAccessWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecuteDatasetCompletedEventHandler ExecuteDatasetCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryCompletedEventHandler ExecuteNonQueryCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryWithReturnCompletedEventHandler ExecuteNonQueryWithReturnCompleted;
        
        /// <remarks/>
        public event ExecuteReaderCompletedEventHandler ExecuteReaderCompleted;
        
        /// <remarks/>
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        /// <remarks/>
        public event ExecuteXmlReaderCompletedEventHandler ExecuteXmlReaderCompleted;
        
        /// <remarks/>
        public event FillDataCompletedEventHandler FillDataCompleted;
        
        /// <remarks/>
        public event FillDatasetCompletedEventHandler FillDatasetCompleted;
        
        /// <remarks/>
        public event FillDatasetWithTimeoutCompletedEventHandler FillDatasetWithTimeoutCompleted;
        
        /// <remarks/>
        public event UpdateDatasetCompletedEventHandler UpdateDatasetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteDataset", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteDataset(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteDataset", new object[] {
                        spName,
                        paramValues});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteDataset(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteDataset", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndExecuteDataset(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteDatasetAsync(string spName, object[] paramValues) {
            this.ExecuteDatasetAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteDatasetAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteDatasetOperationCompleted == null)) {
                this.ExecuteDatasetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteDatasetOperationCompleted);
            }
            this.InvokeAsync("ExecuteDataset", new object[] {
                        spName,
                        paramValues}, this.ExecuteDatasetOperationCompleted, userState);
        }
        
        private void OnExecuteDatasetOperationCompleted(object arg) {
            if ((this.ExecuteDatasetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteDatasetCompleted(this, new ExecuteDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteNonQuery", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteNonQuery(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteNonQuery", new object[] {
                        spName,
                        paramValues});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteNonQuery(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonQuery", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndExecuteNonQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string spName, object[] paramValues) {
            this.ExecuteNonQueryAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteNonQueryOperationCompleted == null)) {
                this.ExecuteNonQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQuery", new object[] {
                        spName,
                        paramValues}, this.ExecuteNonQueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryCompleted(this, new ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteNonQueryWithReturn", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object ExecuteNonQueryWithReturn(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteNonQueryWithReturn", new object[] {
                        spName,
                        paramValues});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteNonQueryWithReturn(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteNonQueryWithReturn", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public object EndExecuteNonQueryWithReturn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryWithReturnAsync(string spName, object[] paramValues) {
            this.ExecuteNonQueryWithReturnAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryWithReturnAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteNonQueryWithReturnOperationCompleted == null)) {
                this.ExecuteNonQueryWithReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryWithReturnOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQueryWithReturn", new object[] {
                        spName,
                        paramValues}, this.ExecuteNonQueryWithReturnOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryWithReturnOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryWithReturnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryWithReturnCompleted(this, new ExecuteNonQueryWithReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteReader", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object ExecuteReader(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteReader", new object[] {
                        spName,
                        paramValues});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteReader(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteReader", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public object EndExecuteReader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteReaderAsync(string spName, object[] paramValues) {
            this.ExecuteReaderAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteReaderAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteReaderOperationCompleted == null)) {
                this.ExecuteReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteReaderOperationCompleted);
            }
            this.InvokeAsync("ExecuteReader", new object[] {
                        spName,
                        paramValues}, this.ExecuteReaderOperationCompleted, userState);
        }
        
        private void OnExecuteReaderOperationCompleted(object arg) {
            if ((this.ExecuteReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteReaderCompleted(this, new ExecuteReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteScalar", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object ExecuteScalar(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        spName,
                        paramValues});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteScalar(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScalar", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public object EndExecuteScalar(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string spName, object[] paramValues) {
            this.ExecuteScalarAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarOperationCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        spName,
                        paramValues}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarOperationCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/ExecuteXmlReader", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public XmlReader ExecuteXmlReader(string spName, object[] paramValues) {
            object[] results = this.Invoke("ExecuteXmlReader", new object[] {
                        spName,
                        paramValues});
            return ((XmlReader)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteXmlReader(string spName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteXmlReader", new object[] {
                        spName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public XmlReader EndExecuteXmlReader(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((XmlReader)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteXmlReaderAsync(string spName, object[] paramValues) {
            this.ExecuteXmlReaderAsync(spName, paramValues, null);
        }
        
        /// <remarks/>
        public void ExecuteXmlReaderAsync(string spName, object[] paramValues, object userState) {
            if ((this.ExecuteXmlReaderOperationCompleted == null)) {
                this.ExecuteXmlReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteXmlReaderOperationCompleted);
            }
            this.InvokeAsync("ExecuteXmlReader", new object[] {
                        spName,
                        paramValues}, this.ExecuteXmlReaderOperationCompleted, userState);
        }
        
        private void OnExecuteXmlReaderOperationCompleted(object arg) {
            if ((this.ExecuteXmlReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteXmlReaderCompleted(this, new ExecuteXmlReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/FillData", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FillData(string spName, string tableName, object[] paramValues) {
            object[] results = this.Invoke("FillData", new object[] {
                        spName,
                        tableName,
                        paramValues});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFillData(string spName, string tableName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FillData", new object[] {
                        spName,
                        tableName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndFillData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FillDataAsync(string spName, string tableName, object[] paramValues) {
            this.FillDataAsync(spName, tableName, paramValues, null);
        }
        
        /// <remarks/>
        public void FillDataAsync(string spName, string tableName, object[] paramValues, object userState) {
            if ((this.FillDataOperationCompleted == null)) {
                this.FillDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDataOperationCompleted);
            }
            this.InvokeAsync("FillData", new object[] {
                        spName,
                        tableName,
                        paramValues}, this.FillDataOperationCompleted, userState);
        }
        
        private void OnFillDataOperationCompleted(object arg) {
            if ((this.FillDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDataCompleted(this, new FillDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/FillDataset", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FillDataset(string spName, string tableName, object[] paramValues) {
            object[] results = this.Invoke("FillDataset", new object[] {
                        spName,
                        tableName,
                        paramValues});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFillDataset(string spName, string tableName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FillDataset", new object[] {
                        spName,
                        tableName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndFillDataset(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FillDatasetAsync(string spName, string tableName, object[] paramValues) {
            this.FillDatasetAsync(spName, tableName, paramValues, null);
        }
        
        /// <remarks/>
        public void FillDatasetAsync(string spName, string tableName, object[] paramValues, object userState) {
            if ((this.FillDatasetOperationCompleted == null)) {
                this.FillDatasetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDatasetOperationCompleted);
            }
            this.InvokeAsync("FillDataset", new object[] {
                        spName,
                        tableName,
                        paramValues}, this.FillDatasetOperationCompleted, userState);
        }
        
        private void OnFillDatasetOperationCompleted(object arg) {
            if ((this.FillDatasetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDatasetCompleted(this, new FillDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/FillDatasetWithTimeout", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FillDatasetWithTimeout(string spName, string tableName, object[] paramValues) {
            object[] results = this.Invoke("FillDatasetWithTimeout", new object[] {
                        spName,
                        tableName,
                        paramValues});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFillDatasetWithTimeout(string spName, string tableName, object[] paramValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FillDatasetWithTimeout", new object[] {
                        spName,
                        tableName,
                        paramValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndFillDatasetWithTimeout(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FillDatasetWithTimeoutAsync(string spName, string tableName, object[] paramValues) {
            this.FillDatasetWithTimeoutAsync(spName, tableName, paramValues, null);
        }
        
        /// <remarks/>
        public void FillDatasetWithTimeoutAsync(string spName, string tableName, object[] paramValues, object userState) {
            if ((this.FillDatasetWithTimeoutOperationCompleted == null)) {
                this.FillDatasetWithTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDatasetWithTimeoutOperationCompleted);
            }
            this.InvokeAsync("FillDatasetWithTimeout", new object[] {
                        spName,
                        tableName,
                        paramValues}, this.FillDatasetWithTimeoutOperationCompleted, userState);
        }
        
        private void OnFillDatasetWithTimeoutOperationCompleted(object arg) {
            if ((this.FillDatasetWithTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDatasetWithTimeoutCompleted(this, new FillDatasetWithTimeoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.argixdirect.com/webservices/UpdateDataset", RequestNamespace="http://www.argixdirect.com/webservices", ResponseNamespace="http://www.argixdirect.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDataset(string spInsert, string spDelete, string spUpdate, System.Data.DataSet ds, string tableName) {
            object[] results = this.Invoke("UpdateDataset", new object[] {
                        spInsert,
                        spDelete,
                        spUpdate,
                        ds,
                        tableName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDataset(string spInsert, string spDelete, string spUpdate, System.Data.DataSet ds, string tableName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDataset", new object[] {
                        spInsert,
                        spDelete,
                        spUpdate,
                        ds,
                        tableName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUpdateDataset(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDatasetAsync(string spInsert, string spDelete, string spUpdate, System.Data.DataSet ds, string tableName) {
            this.UpdateDatasetAsync(spInsert, spDelete, spUpdate, ds, tableName, null);
        }
        
        /// <remarks/>
        public void UpdateDatasetAsync(string spInsert, string spDelete, string spUpdate, System.Data.DataSet ds, string tableName, object userState) {
            if ((this.UpdateDatasetOperationCompleted == null)) {
                this.UpdateDatasetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDatasetOperationCompleted);
            }
            this.InvokeAsync("UpdateDataset", new object[] {
                        spInsert,
                        spDelete,
                        spUpdate,
                        ds,
                        tableName}, this.UpdateDatasetOperationCompleted, userState);
        }
        
        private void OnUpdateDatasetOperationCompleted(object arg) {
            if ((this.UpdateDatasetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDatasetCompleted(this, new UpdateDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.argixdirect.com/webservices")]
    public abstract partial class XmlReader {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteDatasetCompletedEventHandler(object sender, ExecuteDatasetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteDatasetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteDatasetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteNonQueryCompletedEventHandler(object sender, ExecuteNonQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteNonQueryWithReturnCompletedEventHandler(object sender, ExecuteNonQueryWithReturnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryWithReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryWithReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteReaderCompletedEventHandler(object sender, ExecuteReaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteReaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteReaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteXmlReaderCompletedEventHandler(object sender, ExecuteXmlReaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteXmlReaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteXmlReaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public XmlReader Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((XmlReader)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillDataCompletedEventHandler(object sender, FillDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillDatasetCompletedEventHandler(object sender, FillDatasetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDatasetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDatasetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillDatasetWithTimeoutCompletedEventHandler(object sender, FillDatasetWithTimeoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDatasetWithTimeoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDatasetWithTimeoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateDatasetCompletedEventHandler(object sender, UpdateDatasetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDatasetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDatasetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591